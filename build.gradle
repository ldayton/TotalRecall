plugins {
    id 'java'
    id 'com.diffplug.spotless' version '7.2.+'
    id 'com.github.ben-manes.versions' version '0.52.+'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.3.+'
    id 'io.spring.dependency-management' version '1.1.+'
    id 'org.graalvm.buildtools.native' version '0.10.+'
}

group = 'dev.totalrecall'
version = '0.1.0-SNAPSHOT'

ext {
    javaVersion = JavaVersion.VERSION_24
    nativeAccessJvmArgs = [
        '--enable-native-access=ALL-UNNAMED',
    ]
    caffeineVersion = '3.2.+'
    googleJavaFormatVersion = '1.24.0'
    lombokVersion = '1.18.+'
    maryttsSignalprocVersion = '5.2.+'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

bootRun {
    jvmArgs = nativeAccessJvmArgs
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("de.dfki.mary:marytts-signalproc:${maryttsSignalprocVersion}") {
        exclude group: 'gov.nist.math', module: 'Jampack'
        exclude group: 'com.twmacinta', module: 'fast-md5'
    }
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-json")
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"
    
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
}

bootJar {
    archiveFileName = "TotalRecall.jar"
}

spotless {
    java {
        target 'src/**/*.java'
        targetExclude 'src/main/java/audio/fmod/panama/**'
        googleJavaFormat(googleJavaFormatVersion).aosp().reflowLongStrings()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

checkstyle {
    toolVersion = '10.21.0'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    sourceSets = [sourceSets.main]
    showViolations = true
    maxWarnings = 0
    maxErrors = 0
}

// Exclude generated Panama bindings from Checkstyle (use glob relative to sources)
tasks.withType(Checkstyle).configureEach {
    exclude '**/audio/fmod/panama/**'
    reports {
        xml.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.file("reports/checkstyle/${name}.html")
    }
}


// Spring test AOT uses a JavaExec; set system property to ignore newer classfile versions
tasks.named('processTestAot') {
    if (it instanceof JavaExec) {
        it.systemProperty('spring.classformat.ignore', 'true')
    }
}

test {
    jvmArgs = nativeAccessJvmArgs
    systemProperty 'audio.loading.mode', 'unpackaged'
    systemProperty 'audio.library.type', 'standard'  // Use non-logging FMOD for tests
    // Spring Boot 3.3 ASM may lag latest classfile versions; ignore class format for scanning
    systemProperty 'spring.classformat.ignore', 'true'
    useJUnitPlatform {}
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
}

// Generate Panama bindings for FMOD via jextract
tasks.register('jextractFmod', Exec) {
    group = 'codegen'
    description = 'Generate Java Panama bindings for FMOD using jextract'
    inputs.file('src/main/resources/fmod/macos/fmod.h')
    inputs.files(fileTree('src/main/resources/fmod/macos') { include '*.h' })
    outputs.dir('src/main/java/audio/fmod/panama')

    doFirst {
        def defaultJextract = "${System.getProperty('user.home')}/jextract-22/bin/jextract"
        def jextractPath = (project.findProperty('jextractBin')
                ?: System.getenv('JEXTRACT_BIN')
                ?: defaultJextract).toString()

        def bin = file(jextractPath)
        if (!bin.exists() || !bin.canExecute()) {
            throw new GradleException("jextract not found or not executable at: ${jextractPath}. Set -PjextractBin=... or env JEXTRACT_BIN.")
        }
        file('src/main/java').mkdirs()

        // Ensure libclang from Command Line Tools is visible on macOS
        environment 'DYLD_LIBRARY_PATH', [
            '/Library/Developer/CommandLineTools/usr/lib',
            System.getenv('DYLD_LIBRARY_PATH')
        ].findAll { it && it.trim() }.join(File.pathSeparator)

        commandLine jextractPath,
                '-t', 'audio.fmod.panama',
                '--header-class-name', 'FmodCore',
                '-I', 'src/main/resources/fmod/macos',
                '-l', 'fmod',
                '--output', file('src/main/java').absolutePath,
                'src/main/resources/fmod/macos/fmod.h'
    }
}
