// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_DSP_LOUDNESS_METER_INFO_TYPE {
 *     float momentaryloudness;
 *     float shorttermloudness;
 *     float integratedloudness;
 *     float loudness10thpercentile;
 *     float loudness95thpercentile;
 *     float loudnesshistogram[66];
 *     float maxtruepeak;
 *     float maxmomentaryloudness;
 * }
 * }
 */
public class FMOD_DSP_LOUDNESS_METER_INFO_TYPE {

    FMOD_DSP_LOUDNESS_METER_INFO_TYPE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FmodCore.C_FLOAT.withName("momentaryloudness"),
        FmodCore.C_FLOAT.withName("shorttermloudness"),
        FmodCore.C_FLOAT.withName("integratedloudness"),
        FmodCore.C_FLOAT.withName("loudness10thpercentile"),
        FmodCore.C_FLOAT.withName("loudness95thpercentile"),
        MemoryLayout.sequenceLayout(66, FmodCore.C_FLOAT).withName("loudnesshistogram"),
        FmodCore.C_FLOAT.withName("maxtruepeak"),
        FmodCore.C_FLOAT.withName("maxmomentaryloudness")
    ).withName("FMOD_DSP_LOUDNESS_METER_INFO_TYPE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat momentaryloudness$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("momentaryloudness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float momentaryloudness
     * }
     */
    public static final OfFloat momentaryloudness$layout() {
        return momentaryloudness$LAYOUT;
    }

    private static final long momentaryloudness$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float momentaryloudness
     * }
     */
    public static final long momentaryloudness$offset() {
        return momentaryloudness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float momentaryloudness
     * }
     */
    public static float momentaryloudness(MemorySegment struct) {
        return struct.get(momentaryloudness$LAYOUT, momentaryloudness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float momentaryloudness
     * }
     */
    public static void momentaryloudness(MemorySegment struct, float fieldValue) {
        struct.set(momentaryloudness$LAYOUT, momentaryloudness$OFFSET, fieldValue);
    }

    private static final OfFloat shorttermloudness$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("shorttermloudness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float shorttermloudness
     * }
     */
    public static final OfFloat shorttermloudness$layout() {
        return shorttermloudness$LAYOUT;
    }

    private static final long shorttermloudness$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float shorttermloudness
     * }
     */
    public static final long shorttermloudness$offset() {
        return shorttermloudness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float shorttermloudness
     * }
     */
    public static float shorttermloudness(MemorySegment struct) {
        return struct.get(shorttermloudness$LAYOUT, shorttermloudness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float shorttermloudness
     * }
     */
    public static void shorttermloudness(MemorySegment struct, float fieldValue) {
        struct.set(shorttermloudness$LAYOUT, shorttermloudness$OFFSET, fieldValue);
    }

    private static final OfFloat integratedloudness$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("integratedloudness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float integratedloudness
     * }
     */
    public static final OfFloat integratedloudness$layout() {
        return integratedloudness$LAYOUT;
    }

    private static final long integratedloudness$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float integratedloudness
     * }
     */
    public static final long integratedloudness$offset() {
        return integratedloudness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float integratedloudness
     * }
     */
    public static float integratedloudness(MemorySegment struct) {
        return struct.get(integratedloudness$LAYOUT, integratedloudness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float integratedloudness
     * }
     */
    public static void integratedloudness(MemorySegment struct, float fieldValue) {
        struct.set(integratedloudness$LAYOUT, integratedloudness$OFFSET, fieldValue);
    }

    private static final OfFloat loudness10thpercentile$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("loudness10thpercentile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float loudness10thpercentile
     * }
     */
    public static final OfFloat loudness10thpercentile$layout() {
        return loudness10thpercentile$LAYOUT;
    }

    private static final long loudness10thpercentile$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float loudness10thpercentile
     * }
     */
    public static final long loudness10thpercentile$offset() {
        return loudness10thpercentile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float loudness10thpercentile
     * }
     */
    public static float loudness10thpercentile(MemorySegment struct) {
        return struct.get(loudness10thpercentile$LAYOUT, loudness10thpercentile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float loudness10thpercentile
     * }
     */
    public static void loudness10thpercentile(MemorySegment struct, float fieldValue) {
        struct.set(loudness10thpercentile$LAYOUT, loudness10thpercentile$OFFSET, fieldValue);
    }

    private static final OfFloat loudness95thpercentile$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("loudness95thpercentile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float loudness95thpercentile
     * }
     */
    public static final OfFloat loudness95thpercentile$layout() {
        return loudness95thpercentile$LAYOUT;
    }

    private static final long loudness95thpercentile$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float loudness95thpercentile
     * }
     */
    public static final long loudness95thpercentile$offset() {
        return loudness95thpercentile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float loudness95thpercentile
     * }
     */
    public static float loudness95thpercentile(MemorySegment struct) {
        return struct.get(loudness95thpercentile$LAYOUT, loudness95thpercentile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float loudness95thpercentile
     * }
     */
    public static void loudness95thpercentile(MemorySegment struct, float fieldValue) {
        struct.set(loudness95thpercentile$LAYOUT, loudness95thpercentile$OFFSET, fieldValue);
    }

    private static final SequenceLayout loudnesshistogram$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("loudnesshistogram"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float loudnesshistogram[66]
     * }
     */
    public static final SequenceLayout loudnesshistogram$layout() {
        return loudnesshistogram$LAYOUT;
    }

    private static final long loudnesshistogram$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float loudnesshistogram[66]
     * }
     */
    public static final long loudnesshistogram$offset() {
        return loudnesshistogram$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float loudnesshistogram[66]
     * }
     */
    public static MemorySegment loudnesshistogram(MemorySegment struct) {
        return struct.asSlice(loudnesshistogram$OFFSET, loudnesshistogram$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float loudnesshistogram[66]
     * }
     */
    public static void loudnesshistogram(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, loudnesshistogram$OFFSET, loudnesshistogram$LAYOUT.byteSize());
    }

    private static long[] loudnesshistogram$DIMS = { 66 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float loudnesshistogram[66]
     * }
     */
    public static long[] loudnesshistogram$dimensions() {
        return loudnesshistogram$DIMS;
    }
    private static final VarHandle loudnesshistogram$ELEM_HANDLE = loudnesshistogram$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float loudnesshistogram[66]
     * }
     */
    public static float loudnesshistogram(MemorySegment struct, long index0) {
        return (float)loudnesshistogram$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float loudnesshistogram[66]
     * }
     */
    public static void loudnesshistogram(MemorySegment struct, long index0, float fieldValue) {
        loudnesshistogram$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfFloat maxtruepeak$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxtruepeak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxtruepeak
     * }
     */
    public static final OfFloat maxtruepeak$layout() {
        return maxtruepeak$LAYOUT;
    }

    private static final long maxtruepeak$OFFSET = 284;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxtruepeak
     * }
     */
    public static final long maxtruepeak$offset() {
        return maxtruepeak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxtruepeak
     * }
     */
    public static float maxtruepeak(MemorySegment struct) {
        return struct.get(maxtruepeak$LAYOUT, maxtruepeak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxtruepeak
     * }
     */
    public static void maxtruepeak(MemorySegment struct, float fieldValue) {
        struct.set(maxtruepeak$LAYOUT, maxtruepeak$OFFSET, fieldValue);
    }

    private static final OfFloat maxmomentaryloudness$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxmomentaryloudness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxmomentaryloudness
     * }
     */
    public static final OfFloat maxmomentaryloudness$layout() {
        return maxmomentaryloudness$LAYOUT;
    }

    private static final long maxmomentaryloudness$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxmomentaryloudness
     * }
     */
    public static final long maxmomentaryloudness$offset() {
        return maxmomentaryloudness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxmomentaryloudness
     * }
     */
    public static float maxmomentaryloudness(MemorySegment struct) {
        return struct.get(maxmomentaryloudness$LAYOUT, maxmomentaryloudness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxmomentaryloudness
     * }
     */
    public static void maxmomentaryloudness(MemorySegment struct, float fieldValue) {
        struct.set(maxmomentaryloudness$LAYOUT, maxmomentaryloudness$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

