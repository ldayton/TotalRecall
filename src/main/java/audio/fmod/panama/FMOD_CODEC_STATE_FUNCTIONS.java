// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_CODEC_STATE_FUNCTIONS {
 *     FMOD_CODEC_METADATA_FUNC metadata;
 *     FMOD_CODEC_ALLOC_FUNC alloc;
 *     FMOD_CODEC_FREE_FUNC free;
 *     FMOD_CODEC_LOG_FUNC log;
 *     FMOD_CODEC_FILE_READ_FUNC read;
 *     FMOD_CODEC_FILE_SEEK_FUNC seek;
 *     FMOD_CODEC_FILE_TELL_FUNC tell;
 *     FMOD_CODEC_FILE_SIZE_FUNC size;
 * }
 * }
 */
public class FMOD_CODEC_STATE_FUNCTIONS {

    FMOD_CODEC_STATE_FUNCTIONS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FmodCore.C_POINTER.withName("metadata"),
        FmodCore.C_POINTER.withName("alloc"),
        FmodCore.C_POINTER.withName("free"),
        FmodCore.C_POINTER.withName("log"),
        FmodCore.C_POINTER.withName("read"),
        FmodCore.C_POINTER.withName("seek"),
        FmodCore.C_POINTER.withName("tell"),
        FmodCore.C_POINTER.withName("size")
    ).withName("FMOD_CODEC_STATE_FUNCTIONS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout metadata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("metadata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_METADATA_FUNC metadata
     * }
     */
    public static final AddressLayout metadata$layout() {
        return metadata$LAYOUT;
    }

    private static final long metadata$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_METADATA_FUNC metadata
     * }
     */
    public static final long metadata$offset() {
        return metadata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_METADATA_FUNC metadata
     * }
     */
    public static MemorySegment metadata(MemorySegment struct) {
        return struct.get(metadata$LAYOUT, metadata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_METADATA_FUNC metadata
     * }
     */
    public static void metadata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(metadata$LAYOUT, metadata$OFFSET, fieldValue);
    }

    private static final AddressLayout alloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_ALLOC_FUNC alloc
     * }
     */
    public static final AddressLayout alloc$layout() {
        return alloc$LAYOUT;
    }

    private static final long alloc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_ALLOC_FUNC alloc
     * }
     */
    public static final long alloc$offset() {
        return alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_ALLOC_FUNC alloc
     * }
     */
    public static MemorySegment alloc(MemorySegment struct) {
        return struct.get(alloc$LAYOUT, alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_ALLOC_FUNC alloc
     * }
     */
    public static void alloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(alloc$LAYOUT, alloc$OFFSET, fieldValue);
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FREE_FUNC free
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FREE_FUNC free
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FREE_FUNC free
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FREE_FUNC free
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    private static final AddressLayout log$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("log"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_LOG_FUNC log
     * }
     */
    public static final AddressLayout log$layout() {
        return log$LAYOUT;
    }

    private static final long log$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_LOG_FUNC log
     * }
     */
    public static final long log$offset() {
        return log$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_LOG_FUNC log
     * }
     */
    public static MemorySegment log(MemorySegment struct) {
        return struct.get(log$LAYOUT, log$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_LOG_FUNC log
     * }
     */
    public static void log(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(log$LAYOUT, log$OFFSET, fieldValue);
    }

    private static final AddressLayout read$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_READ_FUNC read
     * }
     */
    public static final AddressLayout read$layout() {
        return read$LAYOUT;
    }

    private static final long read$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_READ_FUNC read
     * }
     */
    public static final long read$offset() {
        return read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_READ_FUNC read
     * }
     */
    public static MemorySegment read(MemorySegment struct) {
        return struct.get(read$LAYOUT, read$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_READ_FUNC read
     * }
     */
    public static void read(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read$LAYOUT, read$OFFSET, fieldValue);
    }

    private static final AddressLayout seek$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seek"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SEEK_FUNC seek
     * }
     */
    public static final AddressLayout seek$layout() {
        return seek$LAYOUT;
    }

    private static final long seek$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SEEK_FUNC seek
     * }
     */
    public static final long seek$offset() {
        return seek$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SEEK_FUNC seek
     * }
     */
    public static MemorySegment seek(MemorySegment struct) {
        return struct.get(seek$LAYOUT, seek$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SEEK_FUNC seek
     * }
     */
    public static void seek(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seek$LAYOUT, seek$OFFSET, fieldValue);
    }

    private static final AddressLayout tell$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tell"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_TELL_FUNC tell
     * }
     */
    public static final AddressLayout tell$layout() {
        return tell$LAYOUT;
    }

    private static final long tell$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_TELL_FUNC tell
     * }
     */
    public static final long tell$offset() {
        return tell$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_TELL_FUNC tell
     * }
     */
    public static MemorySegment tell(MemorySegment struct) {
        return struct.get(tell$LAYOUT, tell$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_TELL_FUNC tell
     * }
     */
    public static void tell(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tell$LAYOUT, tell$OFFSET, fieldValue);
    }

    private static final AddressLayout size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SIZE_FUNC size
     * }
     */
    public static final AddressLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SIZE_FUNC size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SIZE_FUNC size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_CODEC_FILE_SIZE_FUNC size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

