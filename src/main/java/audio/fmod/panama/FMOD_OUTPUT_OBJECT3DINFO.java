// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_OUTPUT_OBJECT3DINFO {
 *     float *buffer;
 *     unsigned int bufferlength;
 *     FMOD_VECTOR position;
 *     float gain;
 *     float spread;
 *     float priority;
 * }
 * }
 */
public class FMOD_OUTPUT_OBJECT3DINFO {

    FMOD_OUTPUT_OBJECT3DINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FmodCore.C_POINTER.withName("buffer"),
        FmodCore.C_INT.withName("bufferlength"),
        FMOD_VECTOR.layout().withName("position"),
        FmodCore.C_FLOAT.withName("gain"),
        FmodCore.C_FLOAT.withName("spread"),
        FmodCore.C_FLOAT.withName("priority"),
        MemoryLayout.paddingLayout(4)
    ).withName("FMOD_OUTPUT_OBJECT3DINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfInt bufferlength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferlength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int bufferlength
     * }
     */
    public static final OfInt bufferlength$layout() {
        return bufferlength$LAYOUT;
    }

    private static final long bufferlength$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int bufferlength
     * }
     */
    public static final long bufferlength$offset() {
        return bufferlength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int bufferlength
     * }
     */
    public static int bufferlength(MemorySegment struct) {
        return struct.get(bufferlength$LAYOUT, bufferlength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int bufferlength
     * }
     */
    public static void bufferlength(MemorySegment struct, int fieldValue) {
        struct.set(bufferlength$LAYOUT, bufferlength$OFFSET, fieldValue);
    }

    private static final GroupLayout position$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static final GroupLayout position$layout() {
        return position$LAYOUT;
    }

    private static final long position$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static final long position$offset() {
        return position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static MemorySegment position(MemorySegment struct) {
        return struct.asSlice(position$OFFSET, position$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static void position(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, position$OFFSET, position$LAYOUT.byteSize());
    }

    private static final OfFloat gain$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("gain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float gain
     * }
     */
    public static final OfFloat gain$layout() {
        return gain$LAYOUT;
    }

    private static final long gain$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float gain
     * }
     */
    public static final long gain$offset() {
        return gain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float gain
     * }
     */
    public static float gain(MemorySegment struct) {
        return struct.get(gain$LAYOUT, gain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float gain
     * }
     */
    public static void gain(MemorySegment struct, float fieldValue) {
        struct.set(gain$LAYOUT, gain$OFFSET, fieldValue);
    }

    private static final OfFloat spread$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("spread"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float spread
     * }
     */
    public static final OfFloat spread$layout() {
        return spread$LAYOUT;
    }

    private static final long spread$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float spread
     * }
     */
    public static final long spread$offset() {
        return spread$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float spread
     * }
     */
    public static float spread(MemorySegment struct) {
        return struct.get(spread$LAYOUT, spread$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float spread
     * }
     */
    public static void spread(MemorySegment struct, float fieldValue) {
        struct.set(spread$LAYOUT, spread$OFFSET, fieldValue);
    }

    private static final OfFloat priority$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float priority
     * }
     */
    public static final OfFloat priority$layout() {
        return priority$LAYOUT;
    }

    private static final long priority$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float priority
     * }
     */
    public static final long priority$offset() {
        return priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float priority
     * }
     */
    public static float priority(MemorySegment struct) {
        return struct.get(priority$LAYOUT, priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float priority
     * }
     */
    public static void priority(MemorySegment struct, float fieldValue) {
        struct.set(priority$LAYOUT, priority$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

