// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_DSP_PARAMETER_OVERALLGAIN {
 *     float linear_gain;
 *     float linear_gain_additive;
 * }
 * }
 */
public class FMOD_DSP_PARAMETER_OVERALLGAIN {

    FMOD_DSP_PARAMETER_OVERALLGAIN() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FmodCore.C_FLOAT.withName("linear_gain"),
        FmodCore.C_FLOAT.withName("linear_gain_additive")
    ).withName("FMOD_DSP_PARAMETER_OVERALLGAIN");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat linear_gain$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("linear_gain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float linear_gain
     * }
     */
    public static final OfFloat linear_gain$layout() {
        return linear_gain$LAYOUT;
    }

    private static final long linear_gain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float linear_gain
     * }
     */
    public static final long linear_gain$offset() {
        return linear_gain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float linear_gain
     * }
     */
    public static float linear_gain(MemorySegment struct) {
        return struct.get(linear_gain$LAYOUT, linear_gain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float linear_gain
     * }
     */
    public static void linear_gain(MemorySegment struct, float fieldValue) {
        struct.set(linear_gain$LAYOUT, linear_gain$OFFSET, fieldValue);
    }

    private static final OfFloat linear_gain_additive$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("linear_gain_additive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float linear_gain_additive
     * }
     */
    public static final OfFloat linear_gain_additive$layout() {
        return linear_gain_additive$LAYOUT;
    }

    private static final long linear_gain_additive$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float linear_gain_additive
     * }
     */
    public static final long linear_gain_additive$offset() {
        return linear_gain_additive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float linear_gain_additive
     * }
     */
    public static float linear_gain_additive(MemorySegment struct) {
        return struct.get(linear_gain_additive$LAYOUT, linear_gain_additive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float linear_gain_additive
     * }
     */
    public static void linear_gain_additive(MemorySegment struct, float fieldValue) {
        struct.set(linear_gain_additive$LAYOUT, linear_gain_additive$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

