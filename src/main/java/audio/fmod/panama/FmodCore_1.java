// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class FmodCore_1 {

    FmodCore_1() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("fmod"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int FMOD_VERSION = (int)131849L;
    /**
     * {@snippet lang=c :
     * #define FMOD_VERSION 131849
     * }
     */
    public static int FMOD_VERSION() {
        return FMOD_VERSION;
    }
    private static final int FMOD_BUILDNUMBER = (int)155273L;
    /**
     * {@snippet lang=c :
     * #define FMOD_BUILDNUMBER 155273
     * }
     */
    public static int FMOD_BUILDNUMBER() {
        return FMOD_BUILDNUMBER;
    }
    private static final int FMOD_DEBUG_LEVEL_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_LEVEL_NONE 0
     * }
     */
    public static int FMOD_DEBUG_LEVEL_NONE() {
        return FMOD_DEBUG_LEVEL_NONE;
    }
    private static final int FMOD_DEBUG_LEVEL_ERROR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_LEVEL_ERROR 1
     * }
     */
    public static int FMOD_DEBUG_LEVEL_ERROR() {
        return FMOD_DEBUG_LEVEL_ERROR;
    }
    private static final int FMOD_DEBUG_LEVEL_WARNING = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_LEVEL_WARNING 2
     * }
     */
    public static int FMOD_DEBUG_LEVEL_WARNING() {
        return FMOD_DEBUG_LEVEL_WARNING;
    }
    private static final int FMOD_DEBUG_LEVEL_LOG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_LEVEL_LOG 4
     * }
     */
    public static int FMOD_DEBUG_LEVEL_LOG() {
        return FMOD_DEBUG_LEVEL_LOG;
    }
    private static final int FMOD_DEBUG_TYPE_MEMORY = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_TYPE_MEMORY 256
     * }
     */
    public static int FMOD_DEBUG_TYPE_MEMORY() {
        return FMOD_DEBUG_TYPE_MEMORY;
    }
    private static final int FMOD_DEBUG_TYPE_FILE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_TYPE_FILE 512
     * }
     */
    public static int FMOD_DEBUG_TYPE_FILE() {
        return FMOD_DEBUG_TYPE_FILE;
    }
    private static final int FMOD_DEBUG_TYPE_CODEC = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_TYPE_CODEC 1024
     * }
     */
    public static int FMOD_DEBUG_TYPE_CODEC() {
        return FMOD_DEBUG_TYPE_CODEC;
    }
    private static final int FMOD_DEBUG_TYPE_TRACE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_TYPE_TRACE 2048
     * }
     */
    public static int FMOD_DEBUG_TYPE_TRACE() {
        return FMOD_DEBUG_TYPE_TRACE;
    }
    private static final int FMOD_DEBUG_TYPE_VIRTUAL = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_TYPE_VIRTUAL 4096
     * }
     */
    public static int FMOD_DEBUG_TYPE_VIRTUAL() {
        return FMOD_DEBUG_TYPE_VIRTUAL;
    }
    private static final int FMOD_DEBUG_DISPLAY_TIMESTAMPS = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_DISPLAY_TIMESTAMPS 65536
     * }
     */
    public static int FMOD_DEBUG_DISPLAY_TIMESTAMPS() {
        return FMOD_DEBUG_DISPLAY_TIMESTAMPS;
    }
    private static final int FMOD_DEBUG_DISPLAY_LINENUMBERS = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_DISPLAY_LINENUMBERS 131072
     * }
     */
    public static int FMOD_DEBUG_DISPLAY_LINENUMBERS() {
        return FMOD_DEBUG_DISPLAY_LINENUMBERS;
    }
    private static final int FMOD_DEBUG_DISPLAY_THREAD = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEBUG_DISPLAY_THREAD 262144
     * }
     */
    public static int FMOD_DEBUG_DISPLAY_THREAD() {
        return FMOD_DEBUG_DISPLAY_THREAD;
    }
    private static final int FMOD_MEMORY_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_NORMAL 0
     * }
     */
    public static int FMOD_MEMORY_NORMAL() {
        return FMOD_MEMORY_NORMAL;
    }
    private static final int FMOD_MEMORY_STREAM_FILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_STREAM_FILE 1
     * }
     */
    public static int FMOD_MEMORY_STREAM_FILE() {
        return FMOD_MEMORY_STREAM_FILE;
    }
    private static final int FMOD_MEMORY_STREAM_DECODE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_STREAM_DECODE 2
     * }
     */
    public static int FMOD_MEMORY_STREAM_DECODE() {
        return FMOD_MEMORY_STREAM_DECODE;
    }
    private static final int FMOD_MEMORY_SAMPLEDATA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_SAMPLEDATA 4
     * }
     */
    public static int FMOD_MEMORY_SAMPLEDATA() {
        return FMOD_MEMORY_SAMPLEDATA;
    }
    private static final int FMOD_MEMORY_DSP_BUFFER = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_DSP_BUFFER 8
     * }
     */
    public static int FMOD_MEMORY_DSP_BUFFER() {
        return FMOD_MEMORY_DSP_BUFFER;
    }
    private static final int FMOD_MEMORY_PLUGIN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_PLUGIN 16
     * }
     */
    public static int FMOD_MEMORY_PLUGIN() {
        return FMOD_MEMORY_PLUGIN;
    }
    private static final int FMOD_MEMORY_PERSISTENT = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MEMORY_PERSISTENT 2097152
     * }
     */
    public static int FMOD_MEMORY_PERSISTENT() {
        return FMOD_MEMORY_PERSISTENT;
    }
    private static final int FMOD_INIT_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_NORMAL 0
     * }
     */
    public static int FMOD_INIT_NORMAL() {
        return FMOD_INIT_NORMAL;
    }
    private static final int FMOD_INIT_STREAM_FROM_UPDATE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_STREAM_FROM_UPDATE 1
     * }
     */
    public static int FMOD_INIT_STREAM_FROM_UPDATE() {
        return FMOD_INIT_STREAM_FROM_UPDATE;
    }
    private static final int FMOD_INIT_MIX_FROM_UPDATE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_MIX_FROM_UPDATE 2
     * }
     */
    public static int FMOD_INIT_MIX_FROM_UPDATE() {
        return FMOD_INIT_MIX_FROM_UPDATE;
    }
    private static final int FMOD_INIT_3D_RIGHTHANDED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_3D_RIGHTHANDED 4
     * }
     */
    public static int FMOD_INIT_3D_RIGHTHANDED() {
        return FMOD_INIT_3D_RIGHTHANDED;
    }
    private static final int FMOD_INIT_CLIP_OUTPUT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_CLIP_OUTPUT 8
     * }
     */
    public static int FMOD_INIT_CLIP_OUTPUT() {
        return FMOD_INIT_CLIP_OUTPUT;
    }
    private static final int FMOD_INIT_CHANNEL_LOWPASS = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_CHANNEL_LOWPASS 256
     * }
     */
    public static int FMOD_INIT_CHANNEL_LOWPASS() {
        return FMOD_INIT_CHANNEL_LOWPASS;
    }
    private static final int FMOD_INIT_CHANNEL_DISTANCEFILTER = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_CHANNEL_DISTANCEFILTER 512
     * }
     */
    public static int FMOD_INIT_CHANNEL_DISTANCEFILTER() {
        return FMOD_INIT_CHANNEL_DISTANCEFILTER;
    }
    private static final int FMOD_INIT_PROFILE_ENABLE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_PROFILE_ENABLE 65536
     * }
     */
    public static int FMOD_INIT_PROFILE_ENABLE() {
        return FMOD_INIT_PROFILE_ENABLE;
    }
    private static final int FMOD_INIT_VOL0_BECOMES_VIRTUAL = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_VOL0_BECOMES_VIRTUAL 131072
     * }
     */
    public static int FMOD_INIT_VOL0_BECOMES_VIRTUAL() {
        return FMOD_INIT_VOL0_BECOMES_VIRTUAL;
    }
    private static final int FMOD_INIT_GEOMETRY_USECLOSEST = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_GEOMETRY_USECLOSEST 262144
     * }
     */
    public static int FMOD_INIT_GEOMETRY_USECLOSEST() {
        return FMOD_INIT_GEOMETRY_USECLOSEST;
    }
    private static final int FMOD_INIT_PREFER_DOLBY_DOWNMIX = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_PREFER_DOLBY_DOWNMIX 524288
     * }
     */
    public static int FMOD_INIT_PREFER_DOLBY_DOWNMIX() {
        return FMOD_INIT_PREFER_DOLBY_DOWNMIX;
    }
    private static final int FMOD_INIT_THREAD_UNSAFE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_THREAD_UNSAFE 1048576
     * }
     */
    public static int FMOD_INIT_THREAD_UNSAFE() {
        return FMOD_INIT_THREAD_UNSAFE;
    }
    private static final int FMOD_INIT_PROFILE_METER_ALL = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_PROFILE_METER_ALL 2097152
     * }
     */
    public static int FMOD_INIT_PROFILE_METER_ALL() {
        return FMOD_INIT_PROFILE_METER_ALL;
    }
    private static final int FMOD_INIT_MEMORY_TRACKING = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define FMOD_INIT_MEMORY_TRACKING 4194304
     * }
     */
    public static int FMOD_INIT_MEMORY_TRACKING() {
        return FMOD_INIT_MEMORY_TRACKING;
    }
    private static final int FMOD_DRIVER_STATE_CONNECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DRIVER_STATE_CONNECTED 1
     * }
     */
    public static int FMOD_DRIVER_STATE_CONNECTED() {
        return FMOD_DRIVER_STATE_CONNECTED;
    }
    private static final int FMOD_DRIVER_STATE_DEFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DRIVER_STATE_DEFAULT 2
     * }
     */
    public static int FMOD_DRIVER_STATE_DEFAULT() {
        return FMOD_DRIVER_STATE_DEFAULT;
    }
    private static final int FMOD_TIMEUNIT_MS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_MS 1
     * }
     */
    public static int FMOD_TIMEUNIT_MS() {
        return FMOD_TIMEUNIT_MS;
    }
    private static final int FMOD_TIMEUNIT_PCM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_PCM 2
     * }
     */
    public static int FMOD_TIMEUNIT_PCM() {
        return FMOD_TIMEUNIT_PCM;
    }
    private static final int FMOD_TIMEUNIT_PCMBYTES = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_PCMBYTES 4
     * }
     */
    public static int FMOD_TIMEUNIT_PCMBYTES() {
        return FMOD_TIMEUNIT_PCMBYTES;
    }
    private static final int FMOD_TIMEUNIT_RAWBYTES = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_RAWBYTES 8
     * }
     */
    public static int FMOD_TIMEUNIT_RAWBYTES() {
        return FMOD_TIMEUNIT_RAWBYTES;
    }
    private static final int FMOD_TIMEUNIT_PCMFRACTION = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_PCMFRACTION 16
     * }
     */
    public static int FMOD_TIMEUNIT_PCMFRACTION() {
        return FMOD_TIMEUNIT_PCMFRACTION;
    }
    private static final int FMOD_TIMEUNIT_MODORDER = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_MODORDER 256
     * }
     */
    public static int FMOD_TIMEUNIT_MODORDER() {
        return FMOD_TIMEUNIT_MODORDER;
    }
    private static final int FMOD_TIMEUNIT_MODROW = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_MODROW 512
     * }
     */
    public static int FMOD_TIMEUNIT_MODROW() {
        return FMOD_TIMEUNIT_MODROW;
    }
    private static final int FMOD_TIMEUNIT_MODPATTERN = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FMOD_TIMEUNIT_MODPATTERN 1024
     * }
     */
    public static int FMOD_TIMEUNIT_MODPATTERN() {
        return FMOD_TIMEUNIT_MODPATTERN;
    }
    private static final int FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED 1
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED() {
        return FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED;
    }
    private static final int FMOD_SYSTEM_CALLBACK_DEVICELOST = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_DEVICELOST 2
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_DEVICELOST() {
        return FMOD_SYSTEM_CALLBACK_DEVICELOST;
    }
    private static final int FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED 4
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED() {
        return FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED;
    }
    private static final int FMOD_SYSTEM_CALLBACK_THREADCREATED = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_THREADCREATED 8
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_THREADCREATED() {
        return FMOD_SYSTEM_CALLBACK_THREADCREATED;
    }
    private static final int FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION 16
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION() {
        return FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION;
    }
    private static final int FMOD_SYSTEM_CALLBACK_PREMIX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_PREMIX 32
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_PREMIX() {
        return FMOD_SYSTEM_CALLBACK_PREMIX;
    }
    private static final int FMOD_SYSTEM_CALLBACK_POSTMIX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_POSTMIX 64
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_POSTMIX() {
        return FMOD_SYSTEM_CALLBACK_POSTMIX;
    }
    private static final int FMOD_SYSTEM_CALLBACK_ERROR = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_ERROR 128
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_ERROR() {
        return FMOD_SYSTEM_CALLBACK_ERROR;
    }
    private static final int FMOD_SYSTEM_CALLBACK_THREADDESTROYED = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_THREADDESTROYED 256
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_THREADDESTROYED() {
        return FMOD_SYSTEM_CALLBACK_THREADDESTROYED;
    }
    private static final int FMOD_SYSTEM_CALLBACK_PREUPDATE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_PREUPDATE 512
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_PREUPDATE() {
        return FMOD_SYSTEM_CALLBACK_PREUPDATE;
    }
    private static final int FMOD_SYSTEM_CALLBACK_POSTUPDATE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_POSTUPDATE 1024
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_POSTUPDATE() {
        return FMOD_SYSTEM_CALLBACK_POSTUPDATE;
    }
    private static final int FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED 2048
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED() {
        return FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED;
    }
    private static final int FMOD_SYSTEM_CALLBACK_BUFFEREDNOMIX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_BUFFEREDNOMIX 4096
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_BUFFEREDNOMIX() {
        return FMOD_SYSTEM_CALLBACK_BUFFEREDNOMIX;
    }
    private static final int FMOD_SYSTEM_CALLBACK_DEVICEREINITIALIZE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_DEVICEREINITIALIZE 8192
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_DEVICEREINITIALIZE() {
        return FMOD_SYSTEM_CALLBACK_DEVICEREINITIALIZE;
    }
    private static final int FMOD_SYSTEM_CALLBACK_OUTPUTUNDERRUN = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_OUTPUTUNDERRUN 16384
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_OUTPUTUNDERRUN() {
        return FMOD_SYSTEM_CALLBACK_OUTPUTUNDERRUN;
    }
    private static final int FMOD_SYSTEM_CALLBACK_RECORDPOSITIONCHANGED = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define FMOD_SYSTEM_CALLBACK_RECORDPOSITIONCHANGED 32768
     * }
     */
    public static int FMOD_SYSTEM_CALLBACK_RECORDPOSITIONCHANGED() {
        return FMOD_SYSTEM_CALLBACK_RECORDPOSITIONCHANGED;
    }
    private static final int FMOD_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DEFAULT 0
     * }
     */
    public static int FMOD_DEFAULT() {
        return FMOD_DEFAULT;
    }
    private static final int FMOD_LOOP_OFF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_LOOP_OFF 1
     * }
     */
    public static int FMOD_LOOP_OFF() {
        return FMOD_LOOP_OFF;
    }
    private static final int FMOD_LOOP_NORMAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_LOOP_NORMAL 2
     * }
     */
    public static int FMOD_LOOP_NORMAL() {
        return FMOD_LOOP_NORMAL;
    }
    private static final int FMOD_LOOP_BIDI = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_LOOP_BIDI 4
     * }
     */
    public static int FMOD_LOOP_BIDI() {
        return FMOD_LOOP_BIDI;
    }
    private static final int FMOD_2D = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_2D 8
     * }
     */
    public static int FMOD_2D() {
        return FMOD_2D;
    }
    private static final int FMOD_3D = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D 16
     * }
     */
    public static int FMOD_3D() {
        return FMOD_3D;
    }
    private static final int FMOD_CREATESTREAM = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CREATESTREAM 128
     * }
     */
    public static int FMOD_CREATESTREAM() {
        return FMOD_CREATESTREAM;
    }
    private static final int FMOD_CREATESAMPLE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CREATESAMPLE 256
     * }
     */
    public static int FMOD_CREATESAMPLE() {
        return FMOD_CREATESAMPLE;
    }
    private static final int FMOD_CREATECOMPRESSEDSAMPLE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CREATECOMPRESSEDSAMPLE 512
     * }
     */
    public static int FMOD_CREATECOMPRESSEDSAMPLE() {
        return FMOD_CREATECOMPRESSEDSAMPLE;
    }
    private static final int FMOD_OPENUSER = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OPENUSER 1024
     * }
     */
    public static int FMOD_OPENUSER() {
        return FMOD_OPENUSER;
    }
    private static final int FMOD_OPENMEMORY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OPENMEMORY 2048
     * }
     */
    public static int FMOD_OPENMEMORY() {
        return FMOD_OPENMEMORY;
    }
    private static final int FMOD_OPENMEMORY_POINT = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OPENMEMORY_POINT 268435456
     * }
     */
    public static int FMOD_OPENMEMORY_POINT() {
        return FMOD_OPENMEMORY_POINT;
    }
    private static final int FMOD_OPENRAW = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OPENRAW 4096
     * }
     */
    public static int FMOD_OPENRAW() {
        return FMOD_OPENRAW;
    }
    private static final int FMOD_OPENONLY = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OPENONLY 8192
     * }
     */
    public static int FMOD_OPENONLY() {
        return FMOD_OPENONLY;
    }
    private static final int FMOD_ACCURATETIME = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FMOD_ACCURATETIME 16384
     * }
     */
    public static int FMOD_ACCURATETIME() {
        return FMOD_ACCURATETIME;
    }
    private static final int FMOD_MPEGSEARCH = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MPEGSEARCH 32768
     * }
     */
    public static int FMOD_MPEGSEARCH() {
        return FMOD_MPEGSEARCH;
    }
    private static final int FMOD_NONBLOCKING = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define FMOD_NONBLOCKING 65536
     * }
     */
    public static int FMOD_NONBLOCKING() {
        return FMOD_NONBLOCKING;
    }
    private static final int FMOD_UNIQUE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define FMOD_UNIQUE 131072
     * }
     */
    public static int FMOD_UNIQUE() {
        return FMOD_UNIQUE;
    }
    private static final int FMOD_3D_HEADRELATIVE = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_HEADRELATIVE 262144
     * }
     */
    public static int FMOD_3D_HEADRELATIVE() {
        return FMOD_3D_HEADRELATIVE;
    }
    private static final int FMOD_3D_WORLDRELATIVE = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_WORLDRELATIVE 524288
     * }
     */
    public static int FMOD_3D_WORLDRELATIVE() {
        return FMOD_3D_WORLDRELATIVE;
    }
    private static final int FMOD_3D_INVERSEROLLOFF = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_INVERSEROLLOFF 1048576
     * }
     */
    public static int FMOD_3D_INVERSEROLLOFF() {
        return FMOD_3D_INVERSEROLLOFF;
    }
    private static final int FMOD_3D_LINEARROLLOFF = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_LINEARROLLOFF 2097152
     * }
     */
    public static int FMOD_3D_LINEARROLLOFF() {
        return FMOD_3D_LINEARROLLOFF;
    }
    private static final int FMOD_3D_LINEARSQUAREROLLOFF = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_LINEARSQUAREROLLOFF 4194304
     * }
     */
    public static int FMOD_3D_LINEARSQUAREROLLOFF() {
        return FMOD_3D_LINEARSQUAREROLLOFF;
    }
    private static final int FMOD_3D_INVERSETAPEREDROLLOFF = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_INVERSETAPEREDROLLOFF 8388608
     * }
     */
    public static int FMOD_3D_INVERSETAPEREDROLLOFF() {
        return FMOD_3D_INVERSETAPEREDROLLOFF;
    }
    private static final int FMOD_3D_CUSTOMROLLOFF = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_CUSTOMROLLOFF 67108864
     * }
     */
    public static int FMOD_3D_CUSTOMROLLOFF() {
        return FMOD_3D_CUSTOMROLLOFF;
    }
    private static final int FMOD_3D_IGNOREGEOMETRY = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define FMOD_3D_IGNOREGEOMETRY 1073741824
     * }
     */
    public static int FMOD_3D_IGNOREGEOMETRY() {
        return FMOD_3D_IGNOREGEOMETRY;
    }
    private static final int FMOD_IGNORETAGS = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define FMOD_IGNORETAGS 33554432
     * }
     */
    public static int FMOD_IGNORETAGS() {
        return FMOD_IGNORETAGS;
    }
    private static final int FMOD_LOWMEM = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define FMOD_LOWMEM 134217728
     * }
     */
    public static int FMOD_LOWMEM() {
        return FMOD_LOWMEM;
    }
    private static final int FMOD_CHANNELMASK_FRONT_LEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_FRONT_LEFT 1
     * }
     */
    public static int FMOD_CHANNELMASK_FRONT_LEFT() {
        return FMOD_CHANNELMASK_FRONT_LEFT;
    }
    private static final int FMOD_CHANNELMASK_FRONT_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_FRONT_RIGHT 2
     * }
     */
    public static int FMOD_CHANNELMASK_FRONT_RIGHT() {
        return FMOD_CHANNELMASK_FRONT_RIGHT;
    }
    private static final int FMOD_CHANNELMASK_FRONT_CENTER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_FRONT_CENTER 4
     * }
     */
    public static int FMOD_CHANNELMASK_FRONT_CENTER() {
        return FMOD_CHANNELMASK_FRONT_CENTER;
    }
    private static final int FMOD_CHANNELMASK_LOW_FREQUENCY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_LOW_FREQUENCY 8
     * }
     */
    public static int FMOD_CHANNELMASK_LOW_FREQUENCY() {
        return FMOD_CHANNELMASK_LOW_FREQUENCY;
    }
    private static final int FMOD_CHANNELMASK_SURROUND_LEFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_SURROUND_LEFT 16
     * }
     */
    public static int FMOD_CHANNELMASK_SURROUND_LEFT() {
        return FMOD_CHANNELMASK_SURROUND_LEFT;
    }
    private static final int FMOD_CHANNELMASK_SURROUND_RIGHT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_SURROUND_RIGHT 32
     * }
     */
    public static int FMOD_CHANNELMASK_SURROUND_RIGHT() {
        return FMOD_CHANNELMASK_SURROUND_RIGHT;
    }
    private static final int FMOD_CHANNELMASK_BACK_LEFT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_BACK_LEFT 64
     * }
     */
    public static int FMOD_CHANNELMASK_BACK_LEFT() {
        return FMOD_CHANNELMASK_BACK_LEFT;
    }
    private static final int FMOD_CHANNELMASK_BACK_RIGHT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_BACK_RIGHT 128
     * }
     */
    public static int FMOD_CHANNELMASK_BACK_RIGHT() {
        return FMOD_CHANNELMASK_BACK_RIGHT;
    }
    private static final int FMOD_CHANNELMASK_BACK_CENTER = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CHANNELMASK_BACK_CENTER 256
     * }
     */
    public static int FMOD_CHANNELMASK_BACK_CENTER() {
        return FMOD_CHANNELMASK_BACK_CENTER;
    }
    private static final int FMOD_THREAD_STACK_SIZE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_STACK_SIZE_DEFAULT 0
     * }
     */
    public static int FMOD_THREAD_STACK_SIZE_DEFAULT() {
        return FMOD_THREAD_STACK_SIZE_DEFAULT;
    }
    private static final int FMOD_THREAD_AFFINITY_CORE_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_THREAD_AFFINITY_CORE_ALL 0
     * }
     */
    public static int FMOD_THREAD_AFFINITY_CORE_ALL() {
        return FMOD_THREAD_AFFINITY_CORE_ALL;
    }
    private static final int FMOD_MAX_CHANNEL_WIDTH = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MAX_CHANNEL_WIDTH 32
     * }
     */
    public static int FMOD_MAX_CHANNEL_WIDTH() {
        return FMOD_MAX_CHANNEL_WIDTH;
    }
    private static final int FMOD_MAX_SYSTEMS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MAX_SYSTEMS 8
     * }
     */
    public static int FMOD_MAX_SYSTEMS() {
        return FMOD_MAX_SYSTEMS;
    }
    private static final int FMOD_MAX_LISTENERS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FMOD_MAX_LISTENERS 8
     * }
     */
    public static int FMOD_MAX_LISTENERS() {
        return FMOD_MAX_LISTENERS;
    }
    private static final int FMOD_REVERB_MAXINSTANCES = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FMOD_REVERB_MAXINSTANCES 4
     * }
     */
    public static int FMOD_REVERB_MAXINSTANCES() {
        return FMOD_REVERB_MAXINSTANCES;
    }
    private static final int FMOD_CODEC_PLUGIN_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CODEC_PLUGIN_VERSION 1
     * }
     */
    public static int FMOD_CODEC_PLUGIN_VERSION() {
        return FMOD_CODEC_PLUGIN_VERSION;
    }
    private static final int FMOD_CODEC_SEEK_METHOD_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CODEC_SEEK_METHOD_SET 0
     * }
     */
    public static int FMOD_CODEC_SEEK_METHOD_SET() {
        return FMOD_CODEC_SEEK_METHOD_SET;
    }
    private static final int FMOD_CODEC_SEEK_METHOD_CURRENT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CODEC_SEEK_METHOD_CURRENT 1
     * }
     */
    public static int FMOD_CODEC_SEEK_METHOD_CURRENT() {
        return FMOD_CODEC_SEEK_METHOD_CURRENT;
    }
    private static final int FMOD_CODEC_SEEK_METHOD_END = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FMOD_CODEC_SEEK_METHOD_END 2
     * }
     */
    public static int FMOD_CODEC_SEEK_METHOD_END() {
        return FMOD_CODEC_SEEK_METHOD_END;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_HISTOGRAM_SAMPLES = (int)66L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DSP_LOUDNESS_METER_HISTOGRAM_SAMPLES 66
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_HISTOGRAM_SAMPLES() {
        return FMOD_DSP_LOUDNESS_METER_HISTOGRAM_SAMPLES;
    }
    private static final int FMOD_PLUGIN_SDK_VERSION = (int)110L;
    /**
     * {@snippet lang=c :
     * #define FMOD_PLUGIN_SDK_VERSION 110
     * }
     */
    public static int FMOD_PLUGIN_SDK_VERSION() {
        return FMOD_PLUGIN_SDK_VERSION;
    }
    private static final int FMOD_DSP_GETPARAM_VALUESTR_LENGTH = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FMOD_DSP_GETPARAM_VALUESTR_LENGTH 32
     * }
     */
    public static int FMOD_DSP_GETPARAM_VALUESTR_LENGTH() {
        return FMOD_DSP_GETPARAM_VALUESTR_LENGTH;
    }
    private static final int FMOD_OUTPUT_PLUGIN_VERSION = (int)5L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OUTPUT_PLUGIN_VERSION 5
     * }
     */
    public static int FMOD_OUTPUT_PLUGIN_VERSION() {
        return FMOD_OUTPUT_PLUGIN_VERSION;
    }
    private static final int FMOD_OUTPUT_METHOD_MIX_DIRECT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OUTPUT_METHOD_MIX_DIRECT 0
     * }
     */
    public static int FMOD_OUTPUT_METHOD_MIX_DIRECT() {
        return FMOD_OUTPUT_METHOD_MIX_DIRECT;
    }
    private static final int FMOD_OUTPUT_METHOD_MIX_BUFFERED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FMOD_OUTPUT_METHOD_MIX_BUFFERED 1
     * }
     */
    public static int FMOD_OUTPUT_METHOD_MIX_BUFFERED() {
        return FMOD_OUTPUT_METHOD_MIX_BUFFERED;
    }
    /**
     * {@snippet lang=c :
     * typedef int FMOD_BOOL
     * }
     */
    public static final OfInt FMOD_BOOL = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_DEBUG_FLAGS
     * }
     */
    public static final OfInt FMOD_DEBUG_FLAGS = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_MEMORY_TYPE
     * }
     */
    public static final OfInt FMOD_MEMORY_TYPE = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_INITFLAGS
     * }
     */
    public static final OfInt FMOD_INITFLAGS = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_DRIVER_STATE
     * }
     */
    public static final OfInt FMOD_DRIVER_STATE = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_TIMEUNIT
     * }
     */
    public static final OfInt FMOD_TIMEUNIT = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_SYSTEM_CALLBACK_TYPE
     * }
     */
    public static final OfInt FMOD_SYSTEM_CALLBACK_TYPE = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_MODE
     * }
     */
    public static final OfInt FMOD_MODE = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_CHANNELMASK
     * }
     */
    public static final OfInt FMOD_CHANNELMASK = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long FMOD_PORT_INDEX
     * }
     */
    public static final OfLong FMOD_PORT_INDEX = FmodCore.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int FMOD_THREAD_PRIORITY
     * }
     */
    public static final OfInt FMOD_THREAD_PRIORITY = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_THREAD_STACK_SIZE
     * }
     */
    public static final OfInt FMOD_THREAD_STACK_SIZE = FmodCore.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long FMOD_THREAD_AFFINITY
     * }
     */
    public static final OfLong FMOD_THREAD_AFFINITY = FmodCore.C_LONG_LONG;
    private static final int FMOD_THREAD_TYPE_MIXER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_MIXER = 0
     * }
     */
    public static int FMOD_THREAD_TYPE_MIXER() {
        return FMOD_THREAD_TYPE_MIXER;
    }
    private static final int FMOD_THREAD_TYPE_FEEDER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_FEEDER = 1
     * }
     */
    public static int FMOD_THREAD_TYPE_FEEDER() {
        return FMOD_THREAD_TYPE_FEEDER;
    }
    private static final int FMOD_THREAD_TYPE_STREAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_STREAM = 2
     * }
     */
    public static int FMOD_THREAD_TYPE_STREAM() {
        return FMOD_THREAD_TYPE_STREAM;
    }
    private static final int FMOD_THREAD_TYPE_FILE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_FILE = 3
     * }
     */
    public static int FMOD_THREAD_TYPE_FILE() {
        return FMOD_THREAD_TYPE_FILE;
    }
    private static final int FMOD_THREAD_TYPE_NONBLOCKING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_NONBLOCKING = 4
     * }
     */
    public static int FMOD_THREAD_TYPE_NONBLOCKING() {
        return FMOD_THREAD_TYPE_NONBLOCKING;
    }
    private static final int FMOD_THREAD_TYPE_RECORD = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_RECORD = 5
     * }
     */
    public static int FMOD_THREAD_TYPE_RECORD() {
        return FMOD_THREAD_TYPE_RECORD;
    }
    private static final int FMOD_THREAD_TYPE_GEOMETRY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_GEOMETRY = 6
     * }
     */
    public static int FMOD_THREAD_TYPE_GEOMETRY() {
        return FMOD_THREAD_TYPE_GEOMETRY;
    }
    private static final int FMOD_THREAD_TYPE_PROFILER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_PROFILER = 7
     * }
     */
    public static int FMOD_THREAD_TYPE_PROFILER() {
        return FMOD_THREAD_TYPE_PROFILER;
    }
    private static final int FMOD_THREAD_TYPE_STUDIO_UPDATE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_STUDIO_UPDATE = 8
     * }
     */
    public static int FMOD_THREAD_TYPE_STUDIO_UPDATE() {
        return FMOD_THREAD_TYPE_STUDIO_UPDATE;
    }
    private static final int FMOD_THREAD_TYPE_STUDIO_LOAD_BANK = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_STUDIO_LOAD_BANK = 9
     * }
     */
    public static int FMOD_THREAD_TYPE_STUDIO_LOAD_BANK() {
        return FMOD_THREAD_TYPE_STUDIO_LOAD_BANK;
    }
    private static final int FMOD_THREAD_TYPE_STUDIO_LOAD_SAMPLE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_STUDIO_LOAD_SAMPLE = 10
     * }
     */
    public static int FMOD_THREAD_TYPE_STUDIO_LOAD_SAMPLE() {
        return FMOD_THREAD_TYPE_STUDIO_LOAD_SAMPLE;
    }
    private static final int FMOD_THREAD_TYPE_CONVOLUTION1 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_CONVOLUTION1 = 11
     * }
     */
    public static int FMOD_THREAD_TYPE_CONVOLUTION1() {
        return FMOD_THREAD_TYPE_CONVOLUTION1;
    }
    private static final int FMOD_THREAD_TYPE_CONVOLUTION2 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_CONVOLUTION2 = 12
     * }
     */
    public static int FMOD_THREAD_TYPE_CONVOLUTION2() {
        return FMOD_THREAD_TYPE_CONVOLUTION2;
    }
    private static final int FMOD_THREAD_TYPE_MAX = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_MAX = 13
     * }
     */
    public static int FMOD_THREAD_TYPE_MAX() {
        return FMOD_THREAD_TYPE_MAX;
    }
    private static final int FMOD_THREAD_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_THREAD_TYPE.FMOD_THREAD_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_THREAD_TYPE_FORCEINT() {
        return FMOD_THREAD_TYPE_FORCEINT;
    }
    private static final int FMOD_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_OK = 0
     * }
     */
    public static int FMOD_OK() {
        return FMOD_OK;
    }
    private static final int FMOD_ERR_BADCOMMAND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_BADCOMMAND = 1
     * }
     */
    public static int FMOD_ERR_BADCOMMAND() {
        return FMOD_ERR_BADCOMMAND;
    }
    private static final int FMOD_ERR_CHANNEL_ALLOC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_CHANNEL_ALLOC = 2
     * }
     */
    public static int FMOD_ERR_CHANNEL_ALLOC() {
        return FMOD_ERR_CHANNEL_ALLOC;
    }
    private static final int FMOD_ERR_CHANNEL_STOLEN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_CHANNEL_STOLEN = 3
     * }
     */
    public static int FMOD_ERR_CHANNEL_STOLEN() {
        return FMOD_ERR_CHANNEL_STOLEN;
    }
    private static final int FMOD_ERR_DMA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DMA = 4
     * }
     */
    public static int FMOD_ERR_DMA() {
        return FMOD_ERR_DMA;
    }
    private static final int FMOD_ERR_DSP_CONNECTION = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_CONNECTION = 5
     * }
     */
    public static int FMOD_ERR_DSP_CONNECTION() {
        return FMOD_ERR_DSP_CONNECTION;
    }
    private static final int FMOD_ERR_DSP_DONTPROCESS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_DONTPROCESS = 6
     * }
     */
    public static int FMOD_ERR_DSP_DONTPROCESS() {
        return FMOD_ERR_DSP_DONTPROCESS;
    }
    private static final int FMOD_ERR_DSP_FORMAT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_FORMAT = 7
     * }
     */
    public static int FMOD_ERR_DSP_FORMAT() {
        return FMOD_ERR_DSP_FORMAT;
    }
    private static final int FMOD_ERR_DSP_INUSE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_INUSE = 8
     * }
     */
    public static int FMOD_ERR_DSP_INUSE() {
        return FMOD_ERR_DSP_INUSE;
    }
    private static final int FMOD_ERR_DSP_NOTFOUND = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_NOTFOUND = 9
     * }
     */
    public static int FMOD_ERR_DSP_NOTFOUND() {
        return FMOD_ERR_DSP_NOTFOUND;
    }
    private static final int FMOD_ERR_DSP_RESERVED = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_RESERVED = 10
     * }
     */
    public static int FMOD_ERR_DSP_RESERVED() {
        return FMOD_ERR_DSP_RESERVED;
    }
    private static final int FMOD_ERR_DSP_SILENCE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_SILENCE = 11
     * }
     */
    public static int FMOD_ERR_DSP_SILENCE() {
        return FMOD_ERR_DSP_SILENCE;
    }
    private static final int FMOD_ERR_DSP_TYPE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_DSP_TYPE = 12
     * }
     */
    public static int FMOD_ERR_DSP_TYPE() {
        return FMOD_ERR_DSP_TYPE;
    }
    private static final int FMOD_ERR_FILE_BAD = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_FILE_BAD = 13
     * }
     */
    public static int FMOD_ERR_FILE_BAD() {
        return FMOD_ERR_FILE_BAD;
    }
    private static final int FMOD_ERR_FILE_COULDNOTSEEK = (int)14L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_FILE_COULDNOTSEEK = 14
     * }
     */
    public static int FMOD_ERR_FILE_COULDNOTSEEK() {
        return FMOD_ERR_FILE_COULDNOTSEEK;
    }
    private static final int FMOD_ERR_FILE_DISKEJECTED = (int)15L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_FILE_DISKEJECTED = 15
     * }
     */
    public static int FMOD_ERR_FILE_DISKEJECTED() {
        return FMOD_ERR_FILE_DISKEJECTED;
    }
    private static final int FMOD_ERR_FILE_EOF = (int)16L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_FILE_EOF = 16
     * }
     */
    public static int FMOD_ERR_FILE_EOF() {
        return FMOD_ERR_FILE_EOF;
    }
    private static final int FMOD_ERR_FILE_ENDOFDATA = (int)17L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_FILE_ENDOFDATA = 17
     * }
     */
    public static int FMOD_ERR_FILE_ENDOFDATA() {
        return FMOD_ERR_FILE_ENDOFDATA;
    }
    private static final int FMOD_ERR_FILE_NOTFOUND = (int)18L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_FILE_NOTFOUND = 18
     * }
     */
    public static int FMOD_ERR_FILE_NOTFOUND() {
        return FMOD_ERR_FILE_NOTFOUND;
    }
    private static final int FMOD_ERR_FORMAT = (int)19L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_FORMAT = 19
     * }
     */
    public static int FMOD_ERR_FORMAT() {
        return FMOD_ERR_FORMAT;
    }
    private static final int FMOD_ERR_HEADER_MISMATCH = (int)20L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_HEADER_MISMATCH = 20
     * }
     */
    public static int FMOD_ERR_HEADER_MISMATCH() {
        return FMOD_ERR_HEADER_MISMATCH;
    }
    private static final int FMOD_ERR_HTTP = (int)21L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_HTTP = 21
     * }
     */
    public static int FMOD_ERR_HTTP() {
        return FMOD_ERR_HTTP;
    }
    private static final int FMOD_ERR_HTTP_ACCESS = (int)22L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_HTTP_ACCESS = 22
     * }
     */
    public static int FMOD_ERR_HTTP_ACCESS() {
        return FMOD_ERR_HTTP_ACCESS;
    }
    private static final int FMOD_ERR_HTTP_PROXY_AUTH = (int)23L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_HTTP_PROXY_AUTH = 23
     * }
     */
    public static int FMOD_ERR_HTTP_PROXY_AUTH() {
        return FMOD_ERR_HTTP_PROXY_AUTH;
    }
    private static final int FMOD_ERR_HTTP_SERVER_ERROR = (int)24L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_HTTP_SERVER_ERROR = 24
     * }
     */
    public static int FMOD_ERR_HTTP_SERVER_ERROR() {
        return FMOD_ERR_HTTP_SERVER_ERROR;
    }
    private static final int FMOD_ERR_HTTP_TIMEOUT = (int)25L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_HTTP_TIMEOUT = 25
     * }
     */
    public static int FMOD_ERR_HTTP_TIMEOUT() {
        return FMOD_ERR_HTTP_TIMEOUT;
    }
    private static final int FMOD_ERR_INITIALIZATION = (int)26L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INITIALIZATION = 26
     * }
     */
    public static int FMOD_ERR_INITIALIZATION() {
        return FMOD_ERR_INITIALIZATION;
    }
    private static final int FMOD_ERR_INITIALIZED = (int)27L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INITIALIZED = 27
     * }
     */
    public static int FMOD_ERR_INITIALIZED() {
        return FMOD_ERR_INITIALIZED;
    }
    private static final int FMOD_ERR_INTERNAL = (int)28L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INTERNAL = 28
     * }
     */
    public static int FMOD_ERR_INTERNAL() {
        return FMOD_ERR_INTERNAL;
    }
    private static final int FMOD_ERR_INVALID_FLOAT = (int)29L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_FLOAT = 29
     * }
     */
    public static int FMOD_ERR_INVALID_FLOAT() {
        return FMOD_ERR_INVALID_FLOAT;
    }
    private static final int FMOD_ERR_INVALID_HANDLE = (int)30L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_HANDLE = 30
     * }
     */
    public static int FMOD_ERR_INVALID_HANDLE() {
        return FMOD_ERR_INVALID_HANDLE;
    }
    private static final int FMOD_ERR_INVALID_PARAM = (int)31L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_PARAM = 31
     * }
     */
    public static int FMOD_ERR_INVALID_PARAM() {
        return FMOD_ERR_INVALID_PARAM;
    }
    private static final int FMOD_ERR_INVALID_POSITION = (int)32L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_POSITION = 32
     * }
     */
    public static int FMOD_ERR_INVALID_POSITION() {
        return FMOD_ERR_INVALID_POSITION;
    }
    private static final int FMOD_ERR_INVALID_SPEAKER = (int)33L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_SPEAKER = 33
     * }
     */
    public static int FMOD_ERR_INVALID_SPEAKER() {
        return FMOD_ERR_INVALID_SPEAKER;
    }
    private static final int FMOD_ERR_INVALID_SYNCPOINT = (int)34L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_SYNCPOINT = 34
     * }
     */
    public static int FMOD_ERR_INVALID_SYNCPOINT() {
        return FMOD_ERR_INVALID_SYNCPOINT;
    }
    private static final int FMOD_ERR_INVALID_THREAD = (int)35L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_THREAD = 35
     * }
     */
    public static int FMOD_ERR_INVALID_THREAD() {
        return FMOD_ERR_INVALID_THREAD;
    }
    private static final int FMOD_ERR_INVALID_VECTOR = (int)36L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_VECTOR = 36
     * }
     */
    public static int FMOD_ERR_INVALID_VECTOR() {
        return FMOD_ERR_INVALID_VECTOR;
    }
    private static final int FMOD_ERR_MAXAUDIBLE = (int)37L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_MAXAUDIBLE = 37
     * }
     */
    public static int FMOD_ERR_MAXAUDIBLE() {
        return FMOD_ERR_MAXAUDIBLE;
    }
    private static final int FMOD_ERR_MEMORY = (int)38L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_MEMORY = 38
     * }
     */
    public static int FMOD_ERR_MEMORY() {
        return FMOD_ERR_MEMORY;
    }
    private static final int FMOD_ERR_MEMORY_CANTPOINT = (int)39L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_MEMORY_CANTPOINT = 39
     * }
     */
    public static int FMOD_ERR_MEMORY_CANTPOINT() {
        return FMOD_ERR_MEMORY_CANTPOINT;
    }
    private static final int FMOD_ERR_NEEDS3D = (int)40L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NEEDS3D = 40
     * }
     */
    public static int FMOD_ERR_NEEDS3D() {
        return FMOD_ERR_NEEDS3D;
    }
    private static final int FMOD_ERR_NEEDSHARDWARE = (int)41L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NEEDSHARDWARE = 41
     * }
     */
    public static int FMOD_ERR_NEEDSHARDWARE() {
        return FMOD_ERR_NEEDSHARDWARE;
    }
    private static final int FMOD_ERR_NET_CONNECT = (int)42L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NET_CONNECT = 42
     * }
     */
    public static int FMOD_ERR_NET_CONNECT() {
        return FMOD_ERR_NET_CONNECT;
    }
    private static final int FMOD_ERR_NET_SOCKET_ERROR = (int)43L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NET_SOCKET_ERROR = 43
     * }
     */
    public static int FMOD_ERR_NET_SOCKET_ERROR() {
        return FMOD_ERR_NET_SOCKET_ERROR;
    }
    private static final int FMOD_ERR_NET_URL = (int)44L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NET_URL = 44
     * }
     */
    public static int FMOD_ERR_NET_URL() {
        return FMOD_ERR_NET_URL;
    }
    private static final int FMOD_ERR_NET_WOULD_BLOCK = (int)45L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NET_WOULD_BLOCK = 45
     * }
     */
    public static int FMOD_ERR_NET_WOULD_BLOCK() {
        return FMOD_ERR_NET_WOULD_BLOCK;
    }
    private static final int FMOD_ERR_NOTREADY = (int)46L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NOTREADY = 46
     * }
     */
    public static int FMOD_ERR_NOTREADY() {
        return FMOD_ERR_NOTREADY;
    }
    private static final int FMOD_ERR_OUTPUT_ALLOCATED = (int)47L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_OUTPUT_ALLOCATED = 47
     * }
     */
    public static int FMOD_ERR_OUTPUT_ALLOCATED() {
        return FMOD_ERR_OUTPUT_ALLOCATED;
    }
    private static final int FMOD_ERR_OUTPUT_CREATEBUFFER = (int)48L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_OUTPUT_CREATEBUFFER = 48
     * }
     */
    public static int FMOD_ERR_OUTPUT_CREATEBUFFER() {
        return FMOD_ERR_OUTPUT_CREATEBUFFER;
    }
    private static final int FMOD_ERR_OUTPUT_DRIVERCALL = (int)49L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_OUTPUT_DRIVERCALL = 49
     * }
     */
    public static int FMOD_ERR_OUTPUT_DRIVERCALL() {
        return FMOD_ERR_OUTPUT_DRIVERCALL;
    }
    private static final int FMOD_ERR_OUTPUT_FORMAT = (int)50L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_OUTPUT_FORMAT = 50
     * }
     */
    public static int FMOD_ERR_OUTPUT_FORMAT() {
        return FMOD_ERR_OUTPUT_FORMAT;
    }
    private static final int FMOD_ERR_OUTPUT_INIT = (int)51L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_OUTPUT_INIT = 51
     * }
     */
    public static int FMOD_ERR_OUTPUT_INIT() {
        return FMOD_ERR_OUTPUT_INIT;
    }
    private static final int FMOD_ERR_OUTPUT_NODRIVERS = (int)52L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_OUTPUT_NODRIVERS = 52
     * }
     */
    public static int FMOD_ERR_OUTPUT_NODRIVERS() {
        return FMOD_ERR_OUTPUT_NODRIVERS;
    }
    private static final int FMOD_ERR_PLUGIN = (int)53L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_PLUGIN = 53
     * }
     */
    public static int FMOD_ERR_PLUGIN() {
        return FMOD_ERR_PLUGIN;
    }
    private static final int FMOD_ERR_PLUGIN_MISSING = (int)54L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_PLUGIN_MISSING = 54
     * }
     */
    public static int FMOD_ERR_PLUGIN_MISSING() {
        return FMOD_ERR_PLUGIN_MISSING;
    }
    private static final int FMOD_ERR_PLUGIN_RESOURCE = (int)55L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_PLUGIN_RESOURCE = 55
     * }
     */
    public static int FMOD_ERR_PLUGIN_RESOURCE() {
        return FMOD_ERR_PLUGIN_RESOURCE;
    }
    private static final int FMOD_ERR_PLUGIN_VERSION = (int)56L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_PLUGIN_VERSION = 56
     * }
     */
    public static int FMOD_ERR_PLUGIN_VERSION() {
        return FMOD_ERR_PLUGIN_VERSION;
    }
    private static final int FMOD_ERR_RECORD = (int)57L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_RECORD = 57
     * }
     */
    public static int FMOD_ERR_RECORD() {
        return FMOD_ERR_RECORD;
    }
    private static final int FMOD_ERR_REVERB_CHANNELGROUP = (int)58L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_REVERB_CHANNELGROUP = 58
     * }
     */
    public static int FMOD_ERR_REVERB_CHANNELGROUP() {
        return FMOD_ERR_REVERB_CHANNELGROUP;
    }
    private static final int FMOD_ERR_REVERB_INSTANCE = (int)59L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_REVERB_INSTANCE = 59
     * }
     */
    public static int FMOD_ERR_REVERB_INSTANCE() {
        return FMOD_ERR_REVERB_INSTANCE;
    }
    private static final int FMOD_ERR_SUBSOUNDS = (int)60L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_SUBSOUNDS = 60
     * }
     */
    public static int FMOD_ERR_SUBSOUNDS() {
        return FMOD_ERR_SUBSOUNDS;
    }
    private static final int FMOD_ERR_SUBSOUND_ALLOCATED = (int)61L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_SUBSOUND_ALLOCATED = 61
     * }
     */
    public static int FMOD_ERR_SUBSOUND_ALLOCATED() {
        return FMOD_ERR_SUBSOUND_ALLOCATED;
    }
    private static final int FMOD_ERR_SUBSOUND_CANTMOVE = (int)62L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_SUBSOUND_CANTMOVE = 62
     * }
     */
    public static int FMOD_ERR_SUBSOUND_CANTMOVE() {
        return FMOD_ERR_SUBSOUND_CANTMOVE;
    }
    private static final int FMOD_ERR_TAGNOTFOUND = (int)63L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_TAGNOTFOUND = 63
     * }
     */
    public static int FMOD_ERR_TAGNOTFOUND() {
        return FMOD_ERR_TAGNOTFOUND;
    }
    private static final int FMOD_ERR_TOOMANYCHANNELS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_TOOMANYCHANNELS = 64
     * }
     */
    public static int FMOD_ERR_TOOMANYCHANNELS() {
        return FMOD_ERR_TOOMANYCHANNELS;
    }
    private static final int FMOD_ERR_TRUNCATED = (int)65L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_TRUNCATED = 65
     * }
     */
    public static int FMOD_ERR_TRUNCATED() {
        return FMOD_ERR_TRUNCATED;
    }
    private static final int FMOD_ERR_UNIMPLEMENTED = (int)66L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_UNIMPLEMENTED = 66
     * }
     */
    public static int FMOD_ERR_UNIMPLEMENTED() {
        return FMOD_ERR_UNIMPLEMENTED;
    }
    private static final int FMOD_ERR_UNINITIALIZED = (int)67L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_UNINITIALIZED = 67
     * }
     */
    public static int FMOD_ERR_UNINITIALIZED() {
        return FMOD_ERR_UNINITIALIZED;
    }
    private static final int FMOD_ERR_UNSUPPORTED = (int)68L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_UNSUPPORTED = 68
     * }
     */
    public static int FMOD_ERR_UNSUPPORTED() {
        return FMOD_ERR_UNSUPPORTED;
    }
    private static final int FMOD_ERR_VERSION = (int)69L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_VERSION = 69
     * }
     */
    public static int FMOD_ERR_VERSION() {
        return FMOD_ERR_VERSION;
    }
    private static final int FMOD_ERR_EVENT_ALREADY_LOADED = (int)70L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_EVENT_ALREADY_LOADED = 70
     * }
     */
    public static int FMOD_ERR_EVENT_ALREADY_LOADED() {
        return FMOD_ERR_EVENT_ALREADY_LOADED;
    }
    private static final int FMOD_ERR_EVENT_LIVEUPDATE_BUSY = (int)71L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_EVENT_LIVEUPDATE_BUSY = 71
     * }
     */
    public static int FMOD_ERR_EVENT_LIVEUPDATE_BUSY() {
        return FMOD_ERR_EVENT_LIVEUPDATE_BUSY;
    }
    private static final int FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH = (int)72L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH = 72
     * }
     */
    public static int FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH() {
        return FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH;
    }
    private static final int FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT = (int)73L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT = 73
     * }
     */
    public static int FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT() {
        return FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT;
    }
    private static final int FMOD_ERR_EVENT_NOTFOUND = (int)74L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_EVENT_NOTFOUND = 74
     * }
     */
    public static int FMOD_ERR_EVENT_NOTFOUND() {
        return FMOD_ERR_EVENT_NOTFOUND;
    }
    private static final int FMOD_ERR_STUDIO_UNINITIALIZED = (int)75L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_STUDIO_UNINITIALIZED = 75
     * }
     */
    public static int FMOD_ERR_STUDIO_UNINITIALIZED() {
        return FMOD_ERR_STUDIO_UNINITIALIZED;
    }
    private static final int FMOD_ERR_STUDIO_NOT_LOADED = (int)76L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_STUDIO_NOT_LOADED = 76
     * }
     */
    public static int FMOD_ERR_STUDIO_NOT_LOADED() {
        return FMOD_ERR_STUDIO_NOT_LOADED;
    }
    private static final int FMOD_ERR_INVALID_STRING = (int)77L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_INVALID_STRING = 77
     * }
     */
    public static int FMOD_ERR_INVALID_STRING() {
        return FMOD_ERR_INVALID_STRING;
    }
    private static final int FMOD_ERR_ALREADY_LOCKED = (int)78L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_ALREADY_LOCKED = 78
     * }
     */
    public static int FMOD_ERR_ALREADY_LOCKED() {
        return FMOD_ERR_ALREADY_LOCKED;
    }
    private static final int FMOD_ERR_NOT_LOCKED = (int)79L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_NOT_LOCKED = 79
     * }
     */
    public static int FMOD_ERR_NOT_LOCKED() {
        return FMOD_ERR_NOT_LOCKED;
    }
    private static final int FMOD_ERR_RECORD_DISCONNECTED = (int)80L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_RECORD_DISCONNECTED = 80
     * }
     */
    public static int FMOD_ERR_RECORD_DISCONNECTED() {
        return FMOD_ERR_RECORD_DISCONNECTED;
    }
    private static final int FMOD_ERR_TOOMANYSAMPLES = (int)81L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_ERR_TOOMANYSAMPLES = 81
     * }
     */
    public static int FMOD_ERR_TOOMANYSAMPLES() {
        return FMOD_ERR_TOOMANYSAMPLES;
    }
    private static final int FMOD_RESULT_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_RESULT.FMOD_RESULT_FORCEINT = 65536
     * }
     */
    public static int FMOD_RESULT_FORCEINT() {
        return FMOD_RESULT_FORCEINT;
    }
    private static final int FMOD_CHANNELCONTROL_CHANNEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_CHANNEL = 0
     * }
     */
    public static int FMOD_CHANNELCONTROL_CHANNEL() {
        return FMOD_CHANNELCONTROL_CHANNEL;
    }
    private static final int FMOD_CHANNELCONTROL_CHANNELGROUP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_CHANNELGROUP = 1
     * }
     */
    public static int FMOD_CHANNELCONTROL_CHANNELGROUP() {
        return FMOD_CHANNELCONTROL_CHANNELGROUP;
    }
    private static final int FMOD_CHANNELCONTROL_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_MAX = 2
     * }
     */
    public static int FMOD_CHANNELCONTROL_MAX() {
        return FMOD_CHANNELCONTROL_MAX;
    }
    private static final int FMOD_CHANNELCONTROL_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_FORCEINT = 65536
     * }
     */
    public static int FMOD_CHANNELCONTROL_FORCEINT() {
        return FMOD_CHANNELCONTROL_FORCEINT;
    }
    private static final int FMOD_OUTPUTTYPE_AUTODETECT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_AUTODETECT = 0
     * }
     */
    public static int FMOD_OUTPUTTYPE_AUTODETECT() {
        return FMOD_OUTPUTTYPE_AUTODETECT;
    }
    private static final int FMOD_OUTPUTTYPE_UNKNOWN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_UNKNOWN = 1
     * }
     */
    public static int FMOD_OUTPUTTYPE_UNKNOWN() {
        return FMOD_OUTPUTTYPE_UNKNOWN;
    }
    private static final int FMOD_OUTPUTTYPE_NOSOUND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_NOSOUND = 2
     * }
     */
    public static int FMOD_OUTPUTTYPE_NOSOUND() {
        return FMOD_OUTPUTTYPE_NOSOUND;
    }
    private static final int FMOD_OUTPUTTYPE_WAVWRITER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_WAVWRITER = 3
     * }
     */
    public static int FMOD_OUTPUTTYPE_WAVWRITER() {
        return FMOD_OUTPUTTYPE_WAVWRITER;
    }
    private static final int FMOD_OUTPUTTYPE_NOSOUND_NRT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_NOSOUND_NRT = 4
     * }
     */
    public static int FMOD_OUTPUTTYPE_NOSOUND_NRT() {
        return FMOD_OUTPUTTYPE_NOSOUND_NRT;
    }
    private static final int FMOD_OUTPUTTYPE_WAVWRITER_NRT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_WAVWRITER_NRT = 5
     * }
     */
    public static int FMOD_OUTPUTTYPE_WAVWRITER_NRT() {
        return FMOD_OUTPUTTYPE_WAVWRITER_NRT;
    }
    private static final int FMOD_OUTPUTTYPE_WASAPI = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_WASAPI = 6
     * }
     */
    public static int FMOD_OUTPUTTYPE_WASAPI() {
        return FMOD_OUTPUTTYPE_WASAPI;
    }
    private static final int FMOD_OUTPUTTYPE_ASIO = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_ASIO = 7
     * }
     */
    public static int FMOD_OUTPUTTYPE_ASIO() {
        return FMOD_OUTPUTTYPE_ASIO;
    }
    private static final int FMOD_OUTPUTTYPE_PULSEAUDIO = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_PULSEAUDIO = 8
     * }
     */
    public static int FMOD_OUTPUTTYPE_PULSEAUDIO() {
        return FMOD_OUTPUTTYPE_PULSEAUDIO;
    }
    private static final int FMOD_OUTPUTTYPE_ALSA = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_ALSA = 9
     * }
     */
    public static int FMOD_OUTPUTTYPE_ALSA() {
        return FMOD_OUTPUTTYPE_ALSA;
    }
    private static final int FMOD_OUTPUTTYPE_COREAUDIO = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_COREAUDIO = 10
     * }
     */
    public static int FMOD_OUTPUTTYPE_COREAUDIO() {
        return FMOD_OUTPUTTYPE_COREAUDIO;
    }
    private static final int FMOD_OUTPUTTYPE_AUDIOTRACK = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_AUDIOTRACK = 11
     * }
     */
    public static int FMOD_OUTPUTTYPE_AUDIOTRACK() {
        return FMOD_OUTPUTTYPE_AUDIOTRACK;
    }
    private static final int FMOD_OUTPUTTYPE_OPENSL = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_OPENSL = 12
     * }
     */
    public static int FMOD_OUTPUTTYPE_OPENSL() {
        return FMOD_OUTPUTTYPE_OPENSL;
    }
    private static final int FMOD_OUTPUTTYPE_AUDIOOUT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_AUDIOOUT = 13
     * }
     */
    public static int FMOD_OUTPUTTYPE_AUDIOOUT() {
        return FMOD_OUTPUTTYPE_AUDIOOUT;
    }
    private static final int FMOD_OUTPUTTYPE_AUDIO3D = (int)14L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_AUDIO3D = 14
     * }
     */
    public static int FMOD_OUTPUTTYPE_AUDIO3D() {
        return FMOD_OUTPUTTYPE_AUDIO3D;
    }
    private static final int FMOD_OUTPUTTYPE_WEBAUDIO = (int)15L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_WEBAUDIO = 15
     * }
     */
    public static int FMOD_OUTPUTTYPE_WEBAUDIO() {
        return FMOD_OUTPUTTYPE_WEBAUDIO;
    }
    private static final int FMOD_OUTPUTTYPE_NNAUDIO = (int)16L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_NNAUDIO = 16
     * }
     */
    public static int FMOD_OUTPUTTYPE_NNAUDIO() {
        return FMOD_OUTPUTTYPE_NNAUDIO;
    }
    private static final int FMOD_OUTPUTTYPE_WINSONIC = (int)17L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_WINSONIC = 17
     * }
     */
    public static int FMOD_OUTPUTTYPE_WINSONIC() {
        return FMOD_OUTPUTTYPE_WINSONIC;
    }
    private static final int FMOD_OUTPUTTYPE_AAUDIO = (int)18L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_AAUDIO = 18
     * }
     */
    public static int FMOD_OUTPUTTYPE_AAUDIO() {
        return FMOD_OUTPUTTYPE_AAUDIO;
    }
    private static final int FMOD_OUTPUTTYPE_AUDIOWORKLET = (int)19L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_AUDIOWORKLET = 19
     * }
     */
    public static int FMOD_OUTPUTTYPE_AUDIOWORKLET() {
        return FMOD_OUTPUTTYPE_AUDIOWORKLET;
    }
    private static final int FMOD_OUTPUTTYPE_PHASE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_PHASE = 20
     * }
     */
    public static int FMOD_OUTPUTTYPE_PHASE() {
        return FMOD_OUTPUTTYPE_PHASE;
    }
    private static final int FMOD_OUTPUTTYPE_OHAUDIO = (int)21L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_OHAUDIO = 21
     * }
     */
    public static int FMOD_OUTPUTTYPE_OHAUDIO() {
        return FMOD_OUTPUTTYPE_OHAUDIO;
    }
    private static final int FMOD_OUTPUTTYPE_MAX = (int)22L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_MAX = 22
     * }
     */
    public static int FMOD_OUTPUTTYPE_MAX() {
        return FMOD_OUTPUTTYPE_MAX;
    }
    private static final int FMOD_OUTPUTTYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OUTPUTTYPE.FMOD_OUTPUTTYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_OUTPUTTYPE_FORCEINT() {
        return FMOD_OUTPUTTYPE_FORCEINT;
    }
    private static final int FMOD_DEBUG_MODE_TTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DEBUG_MODE.FMOD_DEBUG_MODE_TTY = 0
     * }
     */
    public static int FMOD_DEBUG_MODE_TTY() {
        return FMOD_DEBUG_MODE_TTY;
    }
    private static final int FMOD_DEBUG_MODE_FILE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DEBUG_MODE.FMOD_DEBUG_MODE_FILE = 1
     * }
     */
    public static int FMOD_DEBUG_MODE_FILE() {
        return FMOD_DEBUG_MODE_FILE;
    }
    private static final int FMOD_DEBUG_MODE_CALLBACK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DEBUG_MODE.FMOD_DEBUG_MODE_CALLBACK = 2
     * }
     */
    public static int FMOD_DEBUG_MODE_CALLBACK() {
        return FMOD_DEBUG_MODE_CALLBACK;
    }
    private static final int FMOD_DEBUG_MODE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DEBUG_MODE.FMOD_DEBUG_MODE_FORCEINT = 65536
     * }
     */
    public static int FMOD_DEBUG_MODE_FORCEINT() {
        return FMOD_DEBUG_MODE_FORCEINT;
    }
    private static final int FMOD_SPEAKERMODE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_DEFAULT = 0
     * }
     */
    public static int FMOD_SPEAKERMODE_DEFAULT() {
        return FMOD_SPEAKERMODE_DEFAULT;
    }
    private static final int FMOD_SPEAKERMODE_RAW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_RAW = 1
     * }
     */
    public static int FMOD_SPEAKERMODE_RAW() {
        return FMOD_SPEAKERMODE_RAW;
    }
    private static final int FMOD_SPEAKERMODE_MONO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_MONO = 2
     * }
     */
    public static int FMOD_SPEAKERMODE_MONO() {
        return FMOD_SPEAKERMODE_MONO;
    }
    private static final int FMOD_SPEAKERMODE_STEREO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_STEREO = 3
     * }
     */
    public static int FMOD_SPEAKERMODE_STEREO() {
        return FMOD_SPEAKERMODE_STEREO;
    }
    private static final int FMOD_SPEAKERMODE_QUAD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_QUAD = 4
     * }
     */
    public static int FMOD_SPEAKERMODE_QUAD() {
        return FMOD_SPEAKERMODE_QUAD;
    }
    private static final int FMOD_SPEAKERMODE_SURROUND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_SURROUND = 5
     * }
     */
    public static int FMOD_SPEAKERMODE_SURROUND() {
        return FMOD_SPEAKERMODE_SURROUND;
    }
    private static final int FMOD_SPEAKERMODE_5POINT1 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_5POINT1 = 6
     * }
     */
    public static int FMOD_SPEAKERMODE_5POINT1() {
        return FMOD_SPEAKERMODE_5POINT1;
    }
    private static final int FMOD_SPEAKERMODE_7POINT1 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_7POINT1 = 7
     * }
     */
    public static int FMOD_SPEAKERMODE_7POINT1() {
        return FMOD_SPEAKERMODE_7POINT1;
    }
    private static final int FMOD_SPEAKERMODE_7POINT1POINT4 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_7POINT1POINT4 = 8
     * }
     */
    public static int FMOD_SPEAKERMODE_7POINT1POINT4() {
        return FMOD_SPEAKERMODE_7POINT1POINT4;
    }
    private static final int FMOD_SPEAKERMODE_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_MAX = 9
     * }
     */
    public static int FMOD_SPEAKERMODE_MAX() {
        return FMOD_SPEAKERMODE_MAX;
    }
    private static final int FMOD_SPEAKERMODE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKERMODE.FMOD_SPEAKERMODE_FORCEINT = 65536
     * }
     */
    public static int FMOD_SPEAKERMODE_FORCEINT() {
        return FMOD_SPEAKERMODE_FORCEINT;
    }
    private static final int FMOD_SPEAKER_NONE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_NONE = -1
     * }
     */
    public static int FMOD_SPEAKER_NONE() {
        return FMOD_SPEAKER_NONE;
    }
    private static final int FMOD_SPEAKER_FRONT_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_FRONT_LEFT = 0
     * }
     */
    public static int FMOD_SPEAKER_FRONT_LEFT() {
        return FMOD_SPEAKER_FRONT_LEFT;
    }
    private static final int FMOD_SPEAKER_FRONT_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_FRONT_RIGHT = 1
     * }
     */
    public static int FMOD_SPEAKER_FRONT_RIGHT() {
        return FMOD_SPEAKER_FRONT_RIGHT;
    }
    private static final int FMOD_SPEAKER_FRONT_CENTER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_FRONT_CENTER = 2
     * }
     */
    public static int FMOD_SPEAKER_FRONT_CENTER() {
        return FMOD_SPEAKER_FRONT_CENTER;
    }
    private static final int FMOD_SPEAKER_LOW_FREQUENCY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_LOW_FREQUENCY = 3
     * }
     */
    public static int FMOD_SPEAKER_LOW_FREQUENCY() {
        return FMOD_SPEAKER_LOW_FREQUENCY;
    }
    private static final int FMOD_SPEAKER_SURROUND_LEFT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_SURROUND_LEFT = 4
     * }
     */
    public static int FMOD_SPEAKER_SURROUND_LEFT() {
        return FMOD_SPEAKER_SURROUND_LEFT;
    }
    private static final int FMOD_SPEAKER_SURROUND_RIGHT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_SURROUND_RIGHT = 5
     * }
     */
    public static int FMOD_SPEAKER_SURROUND_RIGHT() {
        return FMOD_SPEAKER_SURROUND_RIGHT;
    }
    private static final int FMOD_SPEAKER_BACK_LEFT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_BACK_LEFT = 6
     * }
     */
    public static int FMOD_SPEAKER_BACK_LEFT() {
        return FMOD_SPEAKER_BACK_LEFT;
    }
    private static final int FMOD_SPEAKER_BACK_RIGHT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_BACK_RIGHT = 7
     * }
     */
    public static int FMOD_SPEAKER_BACK_RIGHT() {
        return FMOD_SPEAKER_BACK_RIGHT;
    }
    private static final int FMOD_SPEAKER_TOP_FRONT_LEFT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_TOP_FRONT_LEFT = 8
     * }
     */
    public static int FMOD_SPEAKER_TOP_FRONT_LEFT() {
        return FMOD_SPEAKER_TOP_FRONT_LEFT;
    }
    private static final int FMOD_SPEAKER_TOP_FRONT_RIGHT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_TOP_FRONT_RIGHT = 9
     * }
     */
    public static int FMOD_SPEAKER_TOP_FRONT_RIGHT() {
        return FMOD_SPEAKER_TOP_FRONT_RIGHT;
    }
    private static final int FMOD_SPEAKER_TOP_BACK_LEFT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_TOP_BACK_LEFT = 10
     * }
     */
    public static int FMOD_SPEAKER_TOP_BACK_LEFT() {
        return FMOD_SPEAKER_TOP_BACK_LEFT;
    }
    private static final int FMOD_SPEAKER_TOP_BACK_RIGHT = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_TOP_BACK_RIGHT = 11
     * }
     */
    public static int FMOD_SPEAKER_TOP_BACK_RIGHT() {
        return FMOD_SPEAKER_TOP_BACK_RIGHT;
    }
    private static final int FMOD_SPEAKER_MAX = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_MAX = 12
     * }
     */
    public static int FMOD_SPEAKER_MAX() {
        return FMOD_SPEAKER_MAX;
    }
    private static final int FMOD_SPEAKER_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SPEAKER.FMOD_SPEAKER_FORCEINT = 65536
     * }
     */
    public static int FMOD_SPEAKER_FORCEINT() {
        return FMOD_SPEAKER_FORCEINT;
    }
    private static final int FMOD_CHANNELORDER_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_DEFAULT = 0
     * }
     */
    public static int FMOD_CHANNELORDER_DEFAULT() {
        return FMOD_CHANNELORDER_DEFAULT;
    }
    private static final int FMOD_CHANNELORDER_WAVEFORMAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_WAVEFORMAT = 1
     * }
     */
    public static int FMOD_CHANNELORDER_WAVEFORMAT() {
        return FMOD_CHANNELORDER_WAVEFORMAT;
    }
    private static final int FMOD_CHANNELORDER_PROTOOLS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_PROTOOLS = 2
     * }
     */
    public static int FMOD_CHANNELORDER_PROTOOLS() {
        return FMOD_CHANNELORDER_PROTOOLS;
    }
    private static final int FMOD_CHANNELORDER_ALLMONO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_ALLMONO = 3
     * }
     */
    public static int FMOD_CHANNELORDER_ALLMONO() {
        return FMOD_CHANNELORDER_ALLMONO;
    }
    private static final int FMOD_CHANNELORDER_ALLSTEREO = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_ALLSTEREO = 4
     * }
     */
    public static int FMOD_CHANNELORDER_ALLSTEREO() {
        return FMOD_CHANNELORDER_ALLSTEREO;
    }
    private static final int FMOD_CHANNELORDER_ALSA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_ALSA = 5
     * }
     */
    public static int FMOD_CHANNELORDER_ALSA() {
        return FMOD_CHANNELORDER_ALSA;
    }
    private static final int FMOD_CHANNELORDER_MAX = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_MAX = 6
     * }
     */
    public static int FMOD_CHANNELORDER_MAX() {
        return FMOD_CHANNELORDER_MAX;
    }
    private static final int FMOD_CHANNELORDER_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELORDER.FMOD_CHANNELORDER_FORCEINT = 65536
     * }
     */
    public static int FMOD_CHANNELORDER_FORCEINT() {
        return FMOD_CHANNELORDER_FORCEINT;
    }
    private static final int FMOD_PLUGINTYPE_OUTPUT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PLUGINTYPE.FMOD_PLUGINTYPE_OUTPUT = 0
     * }
     */
    public static int FMOD_PLUGINTYPE_OUTPUT() {
        return FMOD_PLUGINTYPE_OUTPUT;
    }
    private static final int FMOD_PLUGINTYPE_CODEC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PLUGINTYPE.FMOD_PLUGINTYPE_CODEC = 1
     * }
     */
    public static int FMOD_PLUGINTYPE_CODEC() {
        return FMOD_PLUGINTYPE_CODEC;
    }
    private static final int FMOD_PLUGINTYPE_DSP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PLUGINTYPE.FMOD_PLUGINTYPE_DSP = 2
     * }
     */
    public static int FMOD_PLUGINTYPE_DSP() {
        return FMOD_PLUGINTYPE_DSP;
    }
    private static final int FMOD_PLUGINTYPE_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PLUGINTYPE.FMOD_PLUGINTYPE_MAX = 3
     * }
     */
    public static int FMOD_PLUGINTYPE_MAX() {
        return FMOD_PLUGINTYPE_MAX;
    }
    private static final int FMOD_PLUGINTYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PLUGINTYPE.FMOD_PLUGINTYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_PLUGINTYPE_FORCEINT() {
        return FMOD_PLUGINTYPE_FORCEINT;
    }
    private static final int FMOD_SOUND_TYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_UNKNOWN = 0
     * }
     */
    public static int FMOD_SOUND_TYPE_UNKNOWN() {
        return FMOD_SOUND_TYPE_UNKNOWN;
    }
    private static final int FMOD_SOUND_TYPE_AIFF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_AIFF = 1
     * }
     */
    public static int FMOD_SOUND_TYPE_AIFF() {
        return FMOD_SOUND_TYPE_AIFF;
    }
    private static final int FMOD_SOUND_TYPE_ASF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_ASF = 2
     * }
     */
    public static int FMOD_SOUND_TYPE_ASF() {
        return FMOD_SOUND_TYPE_ASF;
    }
    private static final int FMOD_SOUND_TYPE_DLS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_DLS = 3
     * }
     */
    public static int FMOD_SOUND_TYPE_DLS() {
        return FMOD_SOUND_TYPE_DLS;
    }
    private static final int FMOD_SOUND_TYPE_FLAC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_FLAC = 4
     * }
     */
    public static int FMOD_SOUND_TYPE_FLAC() {
        return FMOD_SOUND_TYPE_FLAC;
    }
    private static final int FMOD_SOUND_TYPE_FSB = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_FSB = 5
     * }
     */
    public static int FMOD_SOUND_TYPE_FSB() {
        return FMOD_SOUND_TYPE_FSB;
    }
    private static final int FMOD_SOUND_TYPE_IT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_IT = 6
     * }
     */
    public static int FMOD_SOUND_TYPE_IT() {
        return FMOD_SOUND_TYPE_IT;
    }
    private static final int FMOD_SOUND_TYPE_MIDI = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_MIDI = 7
     * }
     */
    public static int FMOD_SOUND_TYPE_MIDI() {
        return FMOD_SOUND_TYPE_MIDI;
    }
    private static final int FMOD_SOUND_TYPE_MOD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_MOD = 8
     * }
     */
    public static int FMOD_SOUND_TYPE_MOD() {
        return FMOD_SOUND_TYPE_MOD;
    }
    private static final int FMOD_SOUND_TYPE_MPEG = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_MPEG = 9
     * }
     */
    public static int FMOD_SOUND_TYPE_MPEG() {
        return FMOD_SOUND_TYPE_MPEG;
    }
    private static final int FMOD_SOUND_TYPE_OGGVORBIS = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_OGGVORBIS = 10
     * }
     */
    public static int FMOD_SOUND_TYPE_OGGVORBIS() {
        return FMOD_SOUND_TYPE_OGGVORBIS;
    }
    private static final int FMOD_SOUND_TYPE_PLAYLIST = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_PLAYLIST = 11
     * }
     */
    public static int FMOD_SOUND_TYPE_PLAYLIST() {
        return FMOD_SOUND_TYPE_PLAYLIST;
    }
    private static final int FMOD_SOUND_TYPE_RAW = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_RAW = 12
     * }
     */
    public static int FMOD_SOUND_TYPE_RAW() {
        return FMOD_SOUND_TYPE_RAW;
    }
    private static final int FMOD_SOUND_TYPE_S3M = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_S3M = 13
     * }
     */
    public static int FMOD_SOUND_TYPE_S3M() {
        return FMOD_SOUND_TYPE_S3M;
    }
    private static final int FMOD_SOUND_TYPE_USER = (int)14L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_USER = 14
     * }
     */
    public static int FMOD_SOUND_TYPE_USER() {
        return FMOD_SOUND_TYPE_USER;
    }
    private static final int FMOD_SOUND_TYPE_WAV = (int)15L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_WAV = 15
     * }
     */
    public static int FMOD_SOUND_TYPE_WAV() {
        return FMOD_SOUND_TYPE_WAV;
    }
    private static final int FMOD_SOUND_TYPE_XM = (int)16L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_XM = 16
     * }
     */
    public static int FMOD_SOUND_TYPE_XM() {
        return FMOD_SOUND_TYPE_XM;
    }
    private static final int FMOD_SOUND_TYPE_XMA = (int)17L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_XMA = 17
     * }
     */
    public static int FMOD_SOUND_TYPE_XMA() {
        return FMOD_SOUND_TYPE_XMA;
    }
    private static final int FMOD_SOUND_TYPE_AUDIOQUEUE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_AUDIOQUEUE = 18
     * }
     */
    public static int FMOD_SOUND_TYPE_AUDIOQUEUE() {
        return FMOD_SOUND_TYPE_AUDIOQUEUE;
    }
    private static final int FMOD_SOUND_TYPE_AT9 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_AT9 = 19
     * }
     */
    public static int FMOD_SOUND_TYPE_AT9() {
        return FMOD_SOUND_TYPE_AT9;
    }
    private static final int FMOD_SOUND_TYPE_VORBIS = (int)20L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_VORBIS = 20
     * }
     */
    public static int FMOD_SOUND_TYPE_VORBIS() {
        return FMOD_SOUND_TYPE_VORBIS;
    }
    private static final int FMOD_SOUND_TYPE_MEDIA_FOUNDATION = (int)21L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_MEDIA_FOUNDATION = 21
     * }
     */
    public static int FMOD_SOUND_TYPE_MEDIA_FOUNDATION() {
        return FMOD_SOUND_TYPE_MEDIA_FOUNDATION;
    }
    private static final int FMOD_SOUND_TYPE_MEDIACODEC = (int)22L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_MEDIACODEC = 22
     * }
     */
    public static int FMOD_SOUND_TYPE_MEDIACODEC() {
        return FMOD_SOUND_TYPE_MEDIACODEC;
    }
    private static final int FMOD_SOUND_TYPE_FADPCM = (int)23L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_FADPCM = 23
     * }
     */
    public static int FMOD_SOUND_TYPE_FADPCM() {
        return FMOD_SOUND_TYPE_FADPCM;
    }
    private static final int FMOD_SOUND_TYPE_OPUS = (int)24L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_OPUS = 24
     * }
     */
    public static int FMOD_SOUND_TYPE_OPUS() {
        return FMOD_SOUND_TYPE_OPUS;
    }
    private static final int FMOD_SOUND_TYPE_MAX = (int)25L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_MAX = 25
     * }
     */
    public static int FMOD_SOUND_TYPE_MAX() {
        return FMOD_SOUND_TYPE_MAX;
    }
    private static final int FMOD_SOUND_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_TYPE.FMOD_SOUND_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_SOUND_TYPE_FORCEINT() {
        return FMOD_SOUND_TYPE_FORCEINT;
    }
    private static final int FMOD_SOUND_FORMAT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_NONE = 0
     * }
     */
    public static int FMOD_SOUND_FORMAT_NONE() {
        return FMOD_SOUND_FORMAT_NONE;
    }
    private static final int FMOD_SOUND_FORMAT_PCM8 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_PCM8 = 1
     * }
     */
    public static int FMOD_SOUND_FORMAT_PCM8() {
        return FMOD_SOUND_FORMAT_PCM8;
    }
    private static final int FMOD_SOUND_FORMAT_PCM16 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_PCM16 = 2
     * }
     */
    public static int FMOD_SOUND_FORMAT_PCM16() {
        return FMOD_SOUND_FORMAT_PCM16;
    }
    private static final int FMOD_SOUND_FORMAT_PCM24 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_PCM24 = 3
     * }
     */
    public static int FMOD_SOUND_FORMAT_PCM24() {
        return FMOD_SOUND_FORMAT_PCM24;
    }
    private static final int FMOD_SOUND_FORMAT_PCM32 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_PCM32 = 4
     * }
     */
    public static int FMOD_SOUND_FORMAT_PCM32() {
        return FMOD_SOUND_FORMAT_PCM32;
    }
    private static final int FMOD_SOUND_FORMAT_PCMFLOAT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_PCMFLOAT = 5
     * }
     */
    public static int FMOD_SOUND_FORMAT_PCMFLOAT() {
        return FMOD_SOUND_FORMAT_PCMFLOAT;
    }
    private static final int FMOD_SOUND_FORMAT_BITSTREAM = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_BITSTREAM = 6
     * }
     */
    public static int FMOD_SOUND_FORMAT_BITSTREAM() {
        return FMOD_SOUND_FORMAT_BITSTREAM;
    }
    private static final int FMOD_SOUND_FORMAT_MAX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_MAX = 7
     * }
     */
    public static int FMOD_SOUND_FORMAT_MAX() {
        return FMOD_SOUND_FORMAT_MAX;
    }
    private static final int FMOD_SOUND_FORMAT_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUND_FORMAT.FMOD_SOUND_FORMAT_FORCEINT = 65536
     * }
     */
    public static int FMOD_SOUND_FORMAT_FORCEINT() {
        return FMOD_SOUND_FORMAT_FORCEINT;
    }
    private static final int FMOD_OPENSTATE_READY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_READY = 0
     * }
     */
    public static int FMOD_OPENSTATE_READY() {
        return FMOD_OPENSTATE_READY;
    }
    private static final int FMOD_OPENSTATE_LOADING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_LOADING = 1
     * }
     */
    public static int FMOD_OPENSTATE_LOADING() {
        return FMOD_OPENSTATE_LOADING;
    }
    private static final int FMOD_OPENSTATE_ERROR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_ERROR = 2
     * }
     */
    public static int FMOD_OPENSTATE_ERROR() {
        return FMOD_OPENSTATE_ERROR;
    }
    private static final int FMOD_OPENSTATE_CONNECTING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_CONNECTING = 3
     * }
     */
    public static int FMOD_OPENSTATE_CONNECTING() {
        return FMOD_OPENSTATE_CONNECTING;
    }
    private static final int FMOD_OPENSTATE_BUFFERING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_BUFFERING = 4
     * }
     */
    public static int FMOD_OPENSTATE_BUFFERING() {
        return FMOD_OPENSTATE_BUFFERING;
    }
    private static final int FMOD_OPENSTATE_SEEKING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_SEEKING = 5
     * }
     */
    public static int FMOD_OPENSTATE_SEEKING() {
        return FMOD_OPENSTATE_SEEKING;
    }
    private static final int FMOD_OPENSTATE_PLAYING = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_PLAYING = 6
     * }
     */
    public static int FMOD_OPENSTATE_PLAYING() {
        return FMOD_OPENSTATE_PLAYING;
    }
    private static final int FMOD_OPENSTATE_SETPOSITION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_SETPOSITION = 7
     * }
     */
    public static int FMOD_OPENSTATE_SETPOSITION() {
        return FMOD_OPENSTATE_SETPOSITION;
    }
    private static final int FMOD_OPENSTATE_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_MAX = 8
     * }
     */
    public static int FMOD_OPENSTATE_MAX() {
        return FMOD_OPENSTATE_MAX;
    }
    private static final int FMOD_OPENSTATE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_OPENSTATE.FMOD_OPENSTATE_FORCEINT = 65536
     * }
     */
    public static int FMOD_OPENSTATE_FORCEINT() {
        return FMOD_OPENSTATE_FORCEINT;
    }
    private static final int FMOD_SOUNDGROUP_BEHAVIOR_FAIL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUNDGROUP_BEHAVIOR.FMOD_SOUNDGROUP_BEHAVIOR_FAIL = 0
     * }
     */
    public static int FMOD_SOUNDGROUP_BEHAVIOR_FAIL() {
        return FMOD_SOUNDGROUP_BEHAVIOR_FAIL;
    }
    private static final int FMOD_SOUNDGROUP_BEHAVIOR_MUTE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUNDGROUP_BEHAVIOR.FMOD_SOUNDGROUP_BEHAVIOR_MUTE = 1
     * }
     */
    public static int FMOD_SOUNDGROUP_BEHAVIOR_MUTE() {
        return FMOD_SOUNDGROUP_BEHAVIOR_MUTE;
    }
    private static final int FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUNDGROUP_BEHAVIOR.FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST = 2
     * }
     */
    public static int FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST() {
        return FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST;
    }
    private static final int FMOD_SOUNDGROUP_BEHAVIOR_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUNDGROUP_BEHAVIOR.FMOD_SOUNDGROUP_BEHAVIOR_MAX = 3
     * }
     */
    public static int FMOD_SOUNDGROUP_BEHAVIOR_MAX() {
        return FMOD_SOUNDGROUP_BEHAVIOR_MAX;
    }
    private static final int FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_SOUNDGROUP_BEHAVIOR.FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT = 65536
     * }
     */
    public static int FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT() {
        return FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT;
    }
    private static final int FMOD_CHANNELCONTROL_CALLBACK_END = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_END = 0
     * }
     */
    public static int FMOD_CHANNELCONTROL_CALLBACK_END() {
        return FMOD_CHANNELCONTROL_CALLBACK_END;
    }
    private static final int FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE = 1
     * }
     */
    public static int FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE() {
        return FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE;
    }
    private static final int FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT = 2
     * }
     */
    public static int FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT() {
        return FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT;
    }
    private static final int FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION = 3
     * }
     */
    public static int FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION() {
        return FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION;
    }
    private static final int FMOD_CHANNELCONTROL_CALLBACK_MAX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_MAX = 4
     * }
     */
    public static int FMOD_CHANNELCONTROL_CALLBACK_MAX() {
        return FMOD_CHANNELCONTROL_CALLBACK_MAX;
    }
    private static final int FMOD_CHANNELCONTROL_CALLBACK_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_FORCEINT = 65536
     * }
     */
    public static int FMOD_CHANNELCONTROL_CALLBACK_FORCEINT() {
        return FMOD_CHANNELCONTROL_CALLBACK_FORCEINT;
    }
    private static final int FMOD_CHANNELCONTROL_DSP_HEAD = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_HEAD = -1
     * }
     */
    public static int FMOD_CHANNELCONTROL_DSP_HEAD() {
        return FMOD_CHANNELCONTROL_DSP_HEAD;
    }
    private static final int FMOD_CHANNELCONTROL_DSP_FADER = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_FADER = -2
     * }
     */
    public static int FMOD_CHANNELCONTROL_DSP_FADER() {
        return FMOD_CHANNELCONTROL_DSP_FADER;
    }
    private static final int FMOD_CHANNELCONTROL_DSP_TAIL = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_TAIL = -3
     * }
     */
    public static int FMOD_CHANNELCONTROL_DSP_TAIL() {
        return FMOD_CHANNELCONTROL_DSP_TAIL;
    }
    private static final int FMOD_CHANNELCONTROL_DSP_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_FORCEINT = 65536
     * }
     */
    public static int FMOD_CHANNELCONTROL_DSP_FORCEINT() {
        return FMOD_CHANNELCONTROL_DSP_FORCEINT;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_NONE = 0
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_NONE() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_NONE;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM = 1
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL = 2
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP = 3
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL = 4
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND = 5
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP = 6
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_DSP = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_DSP = 7
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_DSP() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_DSP;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION = 8
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY = 9
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D = 10
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM = 11
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION = 12
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE = 13
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE = 14
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS = (int)15L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS = 15
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA = (int)16L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA = 16
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK = (int)17L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK = 17
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY = (int)18L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY = 18
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY;
    }
    private static final int FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_ERRORCALLBACK_INSTANCETYPE.FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT() {
        return FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT;
    }
    private static final int FMOD_DSP_RESAMPLER_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_RESAMPLER.FMOD_DSP_RESAMPLER_DEFAULT = 0
     * }
     */
    public static int FMOD_DSP_RESAMPLER_DEFAULT() {
        return FMOD_DSP_RESAMPLER_DEFAULT;
    }
    private static final int FMOD_DSP_RESAMPLER_NOINTERP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_RESAMPLER.FMOD_DSP_RESAMPLER_NOINTERP = 1
     * }
     */
    public static int FMOD_DSP_RESAMPLER_NOINTERP() {
        return FMOD_DSP_RESAMPLER_NOINTERP;
    }
    private static final int FMOD_DSP_RESAMPLER_LINEAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_RESAMPLER.FMOD_DSP_RESAMPLER_LINEAR = 2
     * }
     */
    public static int FMOD_DSP_RESAMPLER_LINEAR() {
        return FMOD_DSP_RESAMPLER_LINEAR;
    }
    private static final int FMOD_DSP_RESAMPLER_CUBIC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_RESAMPLER.FMOD_DSP_RESAMPLER_CUBIC = 3
     * }
     */
    public static int FMOD_DSP_RESAMPLER_CUBIC() {
        return FMOD_DSP_RESAMPLER_CUBIC;
    }
    private static final int FMOD_DSP_RESAMPLER_SPLINE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_RESAMPLER.FMOD_DSP_RESAMPLER_SPLINE = 4
     * }
     */
    public static int FMOD_DSP_RESAMPLER_SPLINE() {
        return FMOD_DSP_RESAMPLER_SPLINE;
    }
    private static final int FMOD_DSP_RESAMPLER_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_RESAMPLER.FMOD_DSP_RESAMPLER_MAX = 5
     * }
     */
    public static int FMOD_DSP_RESAMPLER_MAX() {
        return FMOD_DSP_RESAMPLER_MAX;
    }
    private static final int FMOD_DSP_RESAMPLER_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_RESAMPLER.FMOD_DSP_RESAMPLER_FORCEINT = 65536
     * }
     */
    public static int FMOD_DSP_RESAMPLER_FORCEINT() {
        return FMOD_DSP_RESAMPLER_FORCEINT;
    }
    private static final int FMOD_DSP_CALLBACK_DATAPARAMETERRELEASE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_CALLBACK_TYPE.FMOD_DSP_CALLBACK_DATAPARAMETERRELEASE = 0
     * }
     */
    public static int FMOD_DSP_CALLBACK_DATAPARAMETERRELEASE() {
        return FMOD_DSP_CALLBACK_DATAPARAMETERRELEASE;
    }
    private static final int FMOD_DSP_CALLBACK_MAX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_CALLBACK_TYPE.FMOD_DSP_CALLBACK_MAX = 1
     * }
     */
    public static int FMOD_DSP_CALLBACK_MAX() {
        return FMOD_DSP_CALLBACK_MAX;
    }
    private static final int FMOD_DSP_CALLBACK_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_CALLBACK_TYPE.FMOD_DSP_CALLBACK_FORCEINT = 65536
     * }
     */
    public static int FMOD_DSP_CALLBACK_FORCEINT() {
        return FMOD_DSP_CALLBACK_FORCEINT;
    }
    private static final int FMOD_DSPCONNECTION_TYPE_STANDARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSPCONNECTION_TYPE.FMOD_DSPCONNECTION_TYPE_STANDARD = 0
     * }
     */
    public static int FMOD_DSPCONNECTION_TYPE_STANDARD() {
        return FMOD_DSPCONNECTION_TYPE_STANDARD;
    }
    private static final int FMOD_DSPCONNECTION_TYPE_SIDECHAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSPCONNECTION_TYPE.FMOD_DSPCONNECTION_TYPE_SIDECHAIN = 1
     * }
     */
    public static int FMOD_DSPCONNECTION_TYPE_SIDECHAIN() {
        return FMOD_DSPCONNECTION_TYPE_SIDECHAIN;
    }
    private static final int FMOD_DSPCONNECTION_TYPE_SEND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSPCONNECTION_TYPE.FMOD_DSPCONNECTION_TYPE_SEND = 2
     * }
     */
    public static int FMOD_DSPCONNECTION_TYPE_SEND() {
        return FMOD_DSPCONNECTION_TYPE_SEND;
    }
    private static final int FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSPCONNECTION_TYPE.FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN = 3
     * }
     */
    public static int FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN() {
        return FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN;
    }
    private static final int FMOD_DSPCONNECTION_TYPE_PREALLOCATED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSPCONNECTION_TYPE.FMOD_DSPCONNECTION_TYPE_PREALLOCATED = 4
     * }
     */
    public static int FMOD_DSPCONNECTION_TYPE_PREALLOCATED() {
        return FMOD_DSPCONNECTION_TYPE_PREALLOCATED;
    }
    private static final int FMOD_DSPCONNECTION_TYPE_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSPCONNECTION_TYPE.FMOD_DSPCONNECTION_TYPE_MAX = 5
     * }
     */
    public static int FMOD_DSPCONNECTION_TYPE_MAX() {
        return FMOD_DSPCONNECTION_TYPE_MAX;
    }
    private static final int FMOD_DSPCONNECTION_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSPCONNECTION_TYPE.FMOD_DSPCONNECTION_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_DSPCONNECTION_TYPE_FORCEINT() {
        return FMOD_DSPCONNECTION_TYPE_FORCEINT;
    }
    private static final int FMOD_TAGTYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_UNKNOWN = 0
     * }
     */
    public static int FMOD_TAGTYPE_UNKNOWN() {
        return FMOD_TAGTYPE_UNKNOWN;
    }
    private static final int FMOD_TAGTYPE_ID3V1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_ID3V1 = 1
     * }
     */
    public static int FMOD_TAGTYPE_ID3V1() {
        return FMOD_TAGTYPE_ID3V1;
    }
    private static final int FMOD_TAGTYPE_ID3V2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_ID3V2 = 2
     * }
     */
    public static int FMOD_TAGTYPE_ID3V2() {
        return FMOD_TAGTYPE_ID3V2;
    }
    private static final int FMOD_TAGTYPE_VORBISCOMMENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_VORBISCOMMENT = 3
     * }
     */
    public static int FMOD_TAGTYPE_VORBISCOMMENT() {
        return FMOD_TAGTYPE_VORBISCOMMENT;
    }
    private static final int FMOD_TAGTYPE_SHOUTCAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_SHOUTCAST = 4
     * }
     */
    public static int FMOD_TAGTYPE_SHOUTCAST() {
        return FMOD_TAGTYPE_SHOUTCAST;
    }
    private static final int FMOD_TAGTYPE_ICECAST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_ICECAST = 5
     * }
     */
    public static int FMOD_TAGTYPE_ICECAST() {
        return FMOD_TAGTYPE_ICECAST;
    }
    private static final int FMOD_TAGTYPE_ASF = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_ASF = 6
     * }
     */
    public static int FMOD_TAGTYPE_ASF() {
        return FMOD_TAGTYPE_ASF;
    }
    private static final int FMOD_TAGTYPE_MIDI = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_MIDI = 7
     * }
     */
    public static int FMOD_TAGTYPE_MIDI() {
        return FMOD_TAGTYPE_MIDI;
    }
    private static final int FMOD_TAGTYPE_PLAYLIST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_PLAYLIST = 8
     * }
     */
    public static int FMOD_TAGTYPE_PLAYLIST() {
        return FMOD_TAGTYPE_PLAYLIST;
    }
    private static final int FMOD_TAGTYPE_FMOD = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_FMOD = 9
     * }
     */
    public static int FMOD_TAGTYPE_FMOD() {
        return FMOD_TAGTYPE_FMOD;
    }
    private static final int FMOD_TAGTYPE_USER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_USER = 10
     * }
     */
    public static int FMOD_TAGTYPE_USER() {
        return FMOD_TAGTYPE_USER;
    }
    private static final int FMOD_TAGTYPE_MAX = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_MAX = 11
     * }
     */
    public static int FMOD_TAGTYPE_MAX() {
        return FMOD_TAGTYPE_MAX;
    }
    private static final int FMOD_TAGTYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGTYPE.FMOD_TAGTYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_TAGTYPE_FORCEINT() {
        return FMOD_TAGTYPE_FORCEINT;
    }
    private static final int FMOD_TAGDATATYPE_BINARY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_BINARY = 0
     * }
     */
    public static int FMOD_TAGDATATYPE_BINARY() {
        return FMOD_TAGDATATYPE_BINARY;
    }
    private static final int FMOD_TAGDATATYPE_INT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_INT = 1
     * }
     */
    public static int FMOD_TAGDATATYPE_INT() {
        return FMOD_TAGDATATYPE_INT;
    }
    private static final int FMOD_TAGDATATYPE_FLOAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_FLOAT = 2
     * }
     */
    public static int FMOD_TAGDATATYPE_FLOAT() {
        return FMOD_TAGDATATYPE_FLOAT;
    }
    private static final int FMOD_TAGDATATYPE_STRING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_STRING = 3
     * }
     */
    public static int FMOD_TAGDATATYPE_STRING() {
        return FMOD_TAGDATATYPE_STRING;
    }
    private static final int FMOD_TAGDATATYPE_STRING_UTF16 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_STRING_UTF16 = 4
     * }
     */
    public static int FMOD_TAGDATATYPE_STRING_UTF16() {
        return FMOD_TAGDATATYPE_STRING_UTF16;
    }
    private static final int FMOD_TAGDATATYPE_STRING_UTF16BE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_STRING_UTF16BE = 5
     * }
     */
    public static int FMOD_TAGDATATYPE_STRING_UTF16BE() {
        return FMOD_TAGDATATYPE_STRING_UTF16BE;
    }
    private static final int FMOD_TAGDATATYPE_STRING_UTF8 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_STRING_UTF8 = 6
     * }
     */
    public static int FMOD_TAGDATATYPE_STRING_UTF8() {
        return FMOD_TAGDATATYPE_STRING_UTF8;
    }
    private static final int FMOD_TAGDATATYPE_MAX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_MAX = 7
     * }
     */
    public static int FMOD_TAGDATATYPE_MAX() {
        return FMOD_TAGDATATYPE_MAX;
    }
    private static final int FMOD_TAGDATATYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_TAGDATATYPE.FMOD_TAGDATATYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_TAGDATATYPE_FORCEINT() {
        return FMOD_TAGDATATYPE_FORCEINT;
    }
    private static final int FMOD_PORT_TYPE_MUSIC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_MUSIC = 0
     * }
     */
    public static int FMOD_PORT_TYPE_MUSIC() {
        return FMOD_PORT_TYPE_MUSIC;
    }
    private static final int FMOD_PORT_TYPE_COPYRIGHT_MUSIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_COPYRIGHT_MUSIC = 1
     * }
     */
    public static int FMOD_PORT_TYPE_COPYRIGHT_MUSIC() {
        return FMOD_PORT_TYPE_COPYRIGHT_MUSIC;
    }
    private static final int FMOD_PORT_TYPE_VOICE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_VOICE = 2
     * }
     */
    public static int FMOD_PORT_TYPE_VOICE() {
        return FMOD_PORT_TYPE_VOICE;
    }
    private static final int FMOD_PORT_TYPE_CONTROLLER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_CONTROLLER = 3
     * }
     */
    public static int FMOD_PORT_TYPE_CONTROLLER() {
        return FMOD_PORT_TYPE_CONTROLLER;
    }
    private static final int FMOD_PORT_TYPE_PERSONAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_PERSONAL = 4
     * }
     */
    public static int FMOD_PORT_TYPE_PERSONAL() {
        return FMOD_PORT_TYPE_PERSONAL;
    }
    private static final int FMOD_PORT_TYPE_VIBRATION = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_VIBRATION = 5
     * }
     */
    public static int FMOD_PORT_TYPE_VIBRATION() {
        return FMOD_PORT_TYPE_VIBRATION;
    }
    private static final int FMOD_PORT_TYPE_AUX = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_AUX = 6
     * }
     */
    public static int FMOD_PORT_TYPE_AUX() {
        return FMOD_PORT_TYPE_AUX;
    }
    private static final int FMOD_PORT_TYPE_PASSTHROUGH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_PASSTHROUGH = 7
     * }
     */
    public static int FMOD_PORT_TYPE_PASSTHROUGH() {
        return FMOD_PORT_TYPE_PASSTHROUGH;
    }
    private static final int FMOD_PORT_TYPE_VR_VIBRATION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_VR_VIBRATION = 8
     * }
     */
    public static int FMOD_PORT_TYPE_VR_VIBRATION() {
        return FMOD_PORT_TYPE_VR_VIBRATION;
    }
    private static final int FMOD_PORT_TYPE_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_MAX = 9
     * }
     */
    public static int FMOD_PORT_TYPE_MAX() {
        return FMOD_PORT_TYPE_MAX;
    }
    private static final int FMOD_PORT_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_PORT_TYPE.FMOD_PORT_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_PORT_TYPE_FORCEINT() {
        return FMOD_PORT_TYPE_FORCEINT;
    }
    /**
     * {@snippet lang=c :
     * typedef int FMOD_CODEC_SEEK_METHOD
     * }
     */
    public static final OfInt FMOD_CODEC_SEEK_METHOD = FmodCore.C_INT;
    private static final int FMOD_DSP_TYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_UNKNOWN = 0
     * }
     */
    public static int FMOD_DSP_TYPE_UNKNOWN() {
        return FMOD_DSP_TYPE_UNKNOWN;
    }
    private static final int FMOD_DSP_TYPE_MIXER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_MIXER = 1
     * }
     */
    public static int FMOD_DSP_TYPE_MIXER() {
        return FMOD_DSP_TYPE_MIXER;
    }
    private static final int FMOD_DSP_TYPE_OSCILLATOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_OSCILLATOR = 2
     * }
     */
    public static int FMOD_DSP_TYPE_OSCILLATOR() {
        return FMOD_DSP_TYPE_OSCILLATOR;
    }
    private static final int FMOD_DSP_TYPE_LOWPASS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_LOWPASS = 3
     * }
     */
    public static int FMOD_DSP_TYPE_LOWPASS() {
        return FMOD_DSP_TYPE_LOWPASS;
    }
    private static final int FMOD_DSP_TYPE_ITLOWPASS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_ITLOWPASS = 4
     * }
     */
    public static int FMOD_DSP_TYPE_ITLOWPASS() {
        return FMOD_DSP_TYPE_ITLOWPASS;
    }
    private static final int FMOD_DSP_TYPE_HIGHPASS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_HIGHPASS = 5
     * }
     */
    public static int FMOD_DSP_TYPE_HIGHPASS() {
        return FMOD_DSP_TYPE_HIGHPASS;
    }
    private static final int FMOD_DSP_TYPE_ECHO = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_ECHO = 6
     * }
     */
    public static int FMOD_DSP_TYPE_ECHO() {
        return FMOD_DSP_TYPE_ECHO;
    }
    private static final int FMOD_DSP_TYPE_FADER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_FADER = 7
     * }
     */
    public static int FMOD_DSP_TYPE_FADER() {
        return FMOD_DSP_TYPE_FADER;
    }
    private static final int FMOD_DSP_TYPE_FLANGE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_FLANGE = 8
     * }
     */
    public static int FMOD_DSP_TYPE_FLANGE() {
        return FMOD_DSP_TYPE_FLANGE;
    }
    private static final int FMOD_DSP_TYPE_DISTORTION = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_DISTORTION = 9
     * }
     */
    public static int FMOD_DSP_TYPE_DISTORTION() {
        return FMOD_DSP_TYPE_DISTORTION;
    }
    private static final int FMOD_DSP_TYPE_NORMALIZE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_NORMALIZE = 10
     * }
     */
    public static int FMOD_DSP_TYPE_NORMALIZE() {
        return FMOD_DSP_TYPE_NORMALIZE;
    }
    private static final int FMOD_DSP_TYPE_LIMITER = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_LIMITER = 11
     * }
     */
    public static int FMOD_DSP_TYPE_LIMITER() {
        return FMOD_DSP_TYPE_LIMITER;
    }
    private static final int FMOD_DSP_TYPE_PARAMEQ = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_PARAMEQ = 12
     * }
     */
    public static int FMOD_DSP_TYPE_PARAMEQ() {
        return FMOD_DSP_TYPE_PARAMEQ;
    }
    private static final int FMOD_DSP_TYPE_PITCHSHIFT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_PITCHSHIFT = 13
     * }
     */
    public static int FMOD_DSP_TYPE_PITCHSHIFT() {
        return FMOD_DSP_TYPE_PITCHSHIFT;
    }
    private static final int FMOD_DSP_TYPE_CHORUS = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_CHORUS = 14
     * }
     */
    public static int FMOD_DSP_TYPE_CHORUS() {
        return FMOD_DSP_TYPE_CHORUS;
    }
    private static final int FMOD_DSP_TYPE_ITECHO = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_ITECHO = 15
     * }
     */
    public static int FMOD_DSP_TYPE_ITECHO() {
        return FMOD_DSP_TYPE_ITECHO;
    }
    private static final int FMOD_DSP_TYPE_COMPRESSOR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_COMPRESSOR = 16
     * }
     */
    public static int FMOD_DSP_TYPE_COMPRESSOR() {
        return FMOD_DSP_TYPE_COMPRESSOR;
    }
    private static final int FMOD_DSP_TYPE_SFXREVERB = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_SFXREVERB = 17
     * }
     */
    public static int FMOD_DSP_TYPE_SFXREVERB() {
        return FMOD_DSP_TYPE_SFXREVERB;
    }
    private static final int FMOD_DSP_TYPE_LOWPASS_SIMPLE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_LOWPASS_SIMPLE = 18
     * }
     */
    public static int FMOD_DSP_TYPE_LOWPASS_SIMPLE() {
        return FMOD_DSP_TYPE_LOWPASS_SIMPLE;
    }
    private static final int FMOD_DSP_TYPE_DELAY = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_DELAY = 19
     * }
     */
    public static int FMOD_DSP_TYPE_DELAY() {
        return FMOD_DSP_TYPE_DELAY;
    }
    private static final int FMOD_DSP_TYPE_TREMOLO = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_TREMOLO = 20
     * }
     */
    public static int FMOD_DSP_TYPE_TREMOLO() {
        return FMOD_DSP_TYPE_TREMOLO;
    }
    private static final int FMOD_DSP_TYPE_SEND = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_SEND = 21
     * }
     */
    public static int FMOD_DSP_TYPE_SEND() {
        return FMOD_DSP_TYPE_SEND;
    }
    private static final int FMOD_DSP_TYPE_RETURN = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_RETURN = 22
     * }
     */
    public static int FMOD_DSP_TYPE_RETURN() {
        return FMOD_DSP_TYPE_RETURN;
    }
    private static final int FMOD_DSP_TYPE_HIGHPASS_SIMPLE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_HIGHPASS_SIMPLE = 23
     * }
     */
    public static int FMOD_DSP_TYPE_HIGHPASS_SIMPLE() {
        return FMOD_DSP_TYPE_HIGHPASS_SIMPLE;
    }
    private static final int FMOD_DSP_TYPE_PAN = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_PAN = 24
     * }
     */
    public static int FMOD_DSP_TYPE_PAN() {
        return FMOD_DSP_TYPE_PAN;
    }
    private static final int FMOD_DSP_TYPE_THREE_EQ = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_THREE_EQ = 25
     * }
     */
    public static int FMOD_DSP_TYPE_THREE_EQ() {
        return FMOD_DSP_TYPE_THREE_EQ;
    }
    private static final int FMOD_DSP_TYPE_FFT = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_FFT = 26
     * }
     */
    public static int FMOD_DSP_TYPE_FFT() {
        return FMOD_DSP_TYPE_FFT;
    }
    private static final int FMOD_DSP_TYPE_LOUDNESS_METER = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_LOUDNESS_METER = 27
     * }
     */
    public static int FMOD_DSP_TYPE_LOUDNESS_METER() {
        return FMOD_DSP_TYPE_LOUDNESS_METER;
    }
    private static final int FMOD_DSP_TYPE_CONVOLUTIONREVERB = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_CONVOLUTIONREVERB = 28
     * }
     */
    public static int FMOD_DSP_TYPE_CONVOLUTIONREVERB() {
        return FMOD_DSP_TYPE_CONVOLUTIONREVERB;
    }
    private static final int FMOD_DSP_TYPE_CHANNELMIX = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_CHANNELMIX = 29
     * }
     */
    public static int FMOD_DSP_TYPE_CHANNELMIX() {
        return FMOD_DSP_TYPE_CHANNELMIX;
    }
    private static final int FMOD_DSP_TYPE_TRANSCEIVER = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_TRANSCEIVER = 30
     * }
     */
    public static int FMOD_DSP_TYPE_TRANSCEIVER() {
        return FMOD_DSP_TYPE_TRANSCEIVER;
    }
    private static final int FMOD_DSP_TYPE_OBJECTPAN = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_OBJECTPAN = 31
     * }
     */
    public static int FMOD_DSP_TYPE_OBJECTPAN() {
        return FMOD_DSP_TYPE_OBJECTPAN;
    }
    private static final int FMOD_DSP_TYPE_MULTIBAND_EQ = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_MULTIBAND_EQ = 32
     * }
     */
    public static int FMOD_DSP_TYPE_MULTIBAND_EQ() {
        return FMOD_DSP_TYPE_MULTIBAND_EQ;
    }
    private static final int FMOD_DSP_TYPE_MULTIBAND_DYNAMICS = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_MULTIBAND_DYNAMICS = 33
     * }
     */
    public static int FMOD_DSP_TYPE_MULTIBAND_DYNAMICS() {
        return FMOD_DSP_TYPE_MULTIBAND_DYNAMICS;
    }
    private static final int FMOD_DSP_TYPE_MAX = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_MAX = 34
     * }
     */
    public static int FMOD_DSP_TYPE_MAX() {
        return FMOD_DSP_TYPE_MAX;
    }
    private static final int FMOD_DSP_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_DSP_TYPE_FORCEINT() {
        return FMOD_DSP_TYPE_FORCEINT;
    }
    private static final int FMOD_DSP_OSCILLATOR_TYPE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OSCILLATOR_TYPE = 0
     * }
     */
    public static int FMOD_DSP_OSCILLATOR_TYPE() {
        return FMOD_DSP_OSCILLATOR_TYPE;
    }
    private static final int FMOD_DSP_OSCILLATOR_RATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OSCILLATOR_RATE = 1
     * }
     */
    public static int FMOD_DSP_OSCILLATOR_RATE() {
        return FMOD_DSP_OSCILLATOR_RATE;
    }
    private static final int FMOD_DSP_LOWPASS_CUTOFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOWPASS_CUTOFF = 0
     * }
     */
    public static int FMOD_DSP_LOWPASS_CUTOFF() {
        return FMOD_DSP_LOWPASS_CUTOFF;
    }
    private static final int FMOD_DSP_LOWPASS_RESONANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOWPASS_RESONANCE = 1
     * }
     */
    public static int FMOD_DSP_LOWPASS_RESONANCE() {
        return FMOD_DSP_LOWPASS_RESONANCE;
    }
    private static final int FMOD_DSP_ITLOWPASS_CUTOFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ITLOWPASS_CUTOFF = 0
     * }
     */
    public static int FMOD_DSP_ITLOWPASS_CUTOFF() {
        return FMOD_DSP_ITLOWPASS_CUTOFF;
    }
    private static final int FMOD_DSP_ITLOWPASS_RESONANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ITLOWPASS_RESONANCE = 1
     * }
     */
    public static int FMOD_DSP_ITLOWPASS_RESONANCE() {
        return FMOD_DSP_ITLOWPASS_RESONANCE;
    }
    private static final int FMOD_DSP_HIGHPASS_CUTOFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_HIGHPASS_CUTOFF = 0
     * }
     */
    public static int FMOD_DSP_HIGHPASS_CUTOFF() {
        return FMOD_DSP_HIGHPASS_CUTOFF;
    }
    private static final int FMOD_DSP_HIGHPASS_RESONANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_HIGHPASS_RESONANCE = 1
     * }
     */
    public static int FMOD_DSP_HIGHPASS_RESONANCE() {
        return FMOD_DSP_HIGHPASS_RESONANCE;
    }
    private static final int FMOD_DSP_ECHO_DELAY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_DELAY = 0
     * }
     */
    public static int FMOD_DSP_ECHO_DELAY() {
        return FMOD_DSP_ECHO_DELAY;
    }
    private static final int FMOD_DSP_ECHO_FEEDBACK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_FEEDBACK = 1
     * }
     */
    public static int FMOD_DSP_ECHO_FEEDBACK() {
        return FMOD_DSP_ECHO_FEEDBACK;
    }
    private static final int FMOD_DSP_ECHO_DRYLEVEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_DRYLEVEL = 2
     * }
     */
    public static int FMOD_DSP_ECHO_DRYLEVEL() {
        return FMOD_DSP_ECHO_DRYLEVEL;
    }
    private static final int FMOD_DSP_ECHO_WETLEVEL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_WETLEVEL = 3
     * }
     */
    public static int FMOD_DSP_ECHO_WETLEVEL() {
        return FMOD_DSP_ECHO_WETLEVEL;
    }
    private static final int FMOD_DSP_ECHO_DELAYCHANGEMODE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_DELAYCHANGEMODE = 4
     * }
     */
    public static int FMOD_DSP_ECHO_DELAYCHANGEMODE() {
        return FMOD_DSP_ECHO_DELAYCHANGEMODE;
    }
    private static final int FMOD_DSP_ECHO_DELAYCHANGEMODE_FADE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_DELAYCHANGEMODE_FADE = 0
     * }
     */
    public static int FMOD_DSP_ECHO_DELAYCHANGEMODE_FADE() {
        return FMOD_DSP_ECHO_DELAYCHANGEMODE_FADE;
    }
    private static final int FMOD_DSP_ECHO_DELAYCHANGEMODE_LERP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_DELAYCHANGEMODE_LERP = 1
     * }
     */
    public static int FMOD_DSP_ECHO_DELAYCHANGEMODE_LERP() {
        return FMOD_DSP_ECHO_DELAYCHANGEMODE_LERP;
    }
    private static final int FMOD_DSP_ECHO_DELAYCHANGEMODE_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ECHO_DELAYCHANGEMODE_NONE = 2
     * }
     */
    public static int FMOD_DSP_ECHO_DELAYCHANGEMODE_NONE() {
        return FMOD_DSP_ECHO_DELAYCHANGEMODE_NONE;
    }
    private static final int FMOD_DSP_FADER_GAIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_FADER.FMOD_DSP_FADER_GAIN = 0
     * }
     */
    public static int FMOD_DSP_FADER_GAIN() {
        return FMOD_DSP_FADER_GAIN;
    }
    private static final int FMOD_DSP_FADER_OVERALL_GAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_FADER.FMOD_DSP_FADER_OVERALL_GAIN = 1
     * }
     */
    public static int FMOD_DSP_FADER_OVERALL_GAIN() {
        return FMOD_DSP_FADER_OVERALL_GAIN;
    }
    private static final int FMOD_DSP_FLANGE_MIX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FLANGE_MIX = 0
     * }
     */
    public static int FMOD_DSP_FLANGE_MIX() {
        return FMOD_DSP_FLANGE_MIX;
    }
    private static final int FMOD_DSP_FLANGE_DEPTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FLANGE_DEPTH = 1
     * }
     */
    public static int FMOD_DSP_FLANGE_DEPTH() {
        return FMOD_DSP_FLANGE_DEPTH;
    }
    private static final int FMOD_DSP_FLANGE_RATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FLANGE_RATE = 2
     * }
     */
    public static int FMOD_DSP_FLANGE_RATE() {
        return FMOD_DSP_FLANGE_RATE;
    }
    private static final int FMOD_DSP_DISTORTION_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DISTORTION_LEVEL = 0
     * }
     */
    public static int FMOD_DSP_DISTORTION_LEVEL() {
        return FMOD_DSP_DISTORTION_LEVEL;
    }
    private static final int FMOD_DSP_NORMALIZE_FADETIME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_NORMALIZE_FADETIME = 0
     * }
     */
    public static int FMOD_DSP_NORMALIZE_FADETIME() {
        return FMOD_DSP_NORMALIZE_FADETIME;
    }
    private static final int FMOD_DSP_NORMALIZE_THRESHOLD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_NORMALIZE_THRESHOLD = 1
     * }
     */
    public static int FMOD_DSP_NORMALIZE_THRESHOLD() {
        return FMOD_DSP_NORMALIZE_THRESHOLD;
    }
    private static final int FMOD_DSP_NORMALIZE_MAXAMP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_NORMALIZE_MAXAMP = 2
     * }
     */
    public static int FMOD_DSP_NORMALIZE_MAXAMP() {
        return FMOD_DSP_NORMALIZE_MAXAMP;
    }
    private static final int FMOD_DSP_LIMITER_RELEASETIME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LIMITER_RELEASETIME = 0
     * }
     */
    public static int FMOD_DSP_LIMITER_RELEASETIME() {
        return FMOD_DSP_LIMITER_RELEASETIME;
    }
    private static final int FMOD_DSP_LIMITER_CEILING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LIMITER_CEILING = 1
     * }
     */
    public static int FMOD_DSP_LIMITER_CEILING() {
        return FMOD_DSP_LIMITER_CEILING;
    }
    private static final int FMOD_DSP_LIMITER_MAXIMIZERGAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LIMITER_MAXIMIZERGAIN = 2
     * }
     */
    public static int FMOD_DSP_LIMITER_MAXIMIZERGAIN() {
        return FMOD_DSP_LIMITER_MAXIMIZERGAIN;
    }
    private static final int FMOD_DSP_LIMITER_MODE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LIMITER_MODE = 3
     * }
     */
    public static int FMOD_DSP_LIMITER_MODE() {
        return FMOD_DSP_LIMITER_MODE;
    }
    private static final int FMOD_DSP_PARAMEQ_CENTER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMEQ_CENTER = 0
     * }
     */
    public static int FMOD_DSP_PARAMEQ_CENTER() {
        return FMOD_DSP_PARAMEQ_CENTER;
    }
    private static final int FMOD_DSP_PARAMEQ_BANDWIDTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMEQ_BANDWIDTH = 1
     * }
     */
    public static int FMOD_DSP_PARAMEQ_BANDWIDTH() {
        return FMOD_DSP_PARAMEQ_BANDWIDTH;
    }
    private static final int FMOD_DSP_PARAMEQ_GAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMEQ_GAIN = 2
     * }
     */
    public static int FMOD_DSP_PARAMEQ_GAIN() {
        return FMOD_DSP_PARAMEQ_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_A_FILTER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_A_FILTER = 0
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_A_FILTER() {
        return FMOD_DSP_MULTIBAND_EQ_A_FILTER;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY = 1
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY() {
        return FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_A_Q = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_A_Q = 2
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_A_Q() {
        return FMOD_DSP_MULTIBAND_EQ_A_Q;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_A_GAIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_A_GAIN = 3
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_A_GAIN() {
        return FMOD_DSP_MULTIBAND_EQ_A_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_B_FILTER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_B_FILTER = 4
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_B_FILTER() {
        return FMOD_DSP_MULTIBAND_EQ_B_FILTER;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY = 5
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY() {
        return FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_B_Q = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_B_Q = 6
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_B_Q() {
        return FMOD_DSP_MULTIBAND_EQ_B_Q;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_B_GAIN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_B_GAIN = 7
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_B_GAIN() {
        return FMOD_DSP_MULTIBAND_EQ_B_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_C_FILTER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_C_FILTER = 8
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_C_FILTER() {
        return FMOD_DSP_MULTIBAND_EQ_C_FILTER;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY = 9
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY() {
        return FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_C_Q = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_C_Q = 10
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_C_Q() {
        return FMOD_DSP_MULTIBAND_EQ_C_Q;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_C_GAIN = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_C_GAIN = 11
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_C_GAIN() {
        return FMOD_DSP_MULTIBAND_EQ_C_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_D_FILTER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_D_FILTER = 12
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_D_FILTER() {
        return FMOD_DSP_MULTIBAND_EQ_D_FILTER;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY = 13
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY() {
        return FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_D_Q = (int)14L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_D_Q = 14
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_D_Q() {
        return FMOD_DSP_MULTIBAND_EQ_D_Q;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_D_GAIN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_D_GAIN = 15
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_D_GAIN() {
        return FMOD_DSP_MULTIBAND_EQ_D_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_E_FILTER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_E_FILTER = 16
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_E_FILTER() {
        return FMOD_DSP_MULTIBAND_EQ_E_FILTER;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY = (int)17L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY = 17
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY() {
        return FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_E_Q = (int)18L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_E_Q = 18
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_E_Q() {
        return FMOD_DSP_MULTIBAND_EQ_E_Q;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_E_GAIN = (int)19L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ.FMOD_DSP_MULTIBAND_EQ_E_GAIN = 19
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_E_GAIN() {
        return FMOD_DSP_MULTIBAND_EQ_E_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED = 0
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB = 1
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB = 2
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB = 3
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB = 4
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB = 5
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB = 6
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF = 7
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF = 8
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING = 9
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS = 10
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH = 11
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS = 12
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_6DB = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_6DB = 13
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_6DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_6DB;
    }
    private static final int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_6DB = (int)14L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_6DB = 14
     * }
     */
    public static int FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_6DB() {
        return FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_6DB;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_LOWER_FREQUENCY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_LOWER_FREQUENCY = 0
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_LOWER_FREQUENCY() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_LOWER_FREQUENCY;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_UPPER_FREQUENCY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_UPPER_FREQUENCY = 1
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_UPPER_FREQUENCY() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_UPPER_FREQUENCY;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_LINKED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_LINKED = 2
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_LINKED() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_LINKED;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_USE_SIDECHAIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_USE_SIDECHAIN = 3
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_USE_SIDECHAIN() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_USE_SIDECHAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_MODE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_MODE = 4
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_MODE() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_MODE;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN = 5
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_THRESHOLD = (int)6L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_THRESHOLD = 6
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_THRESHOLD() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_THRESHOLD;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_RATIO = (int)7L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_RATIO = 7
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_RATIO() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_RATIO;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_ATTACK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_ATTACK = 8
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_ATTACK() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_ATTACK;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_RELEASE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_RELEASE = 9
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_RELEASE() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_RELEASE;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN_MAKEUP = (int)10L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN_MAKEUP = 10
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN_MAKEUP() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_GAIN_MAKEUP;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_A_RESPONSE_DATA = (int)11L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_A_RESPONSE_DATA = 11
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_A_RESPONSE_DATA() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_A_RESPONSE_DATA;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_MODE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_MODE = 12
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_MODE() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_MODE;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN = 13
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_THRESHOLD = (int)14L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_THRESHOLD = 14
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_THRESHOLD() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_THRESHOLD;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_RATIO = (int)15L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_RATIO = 15
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_RATIO() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_RATIO;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_ATTACK = (int)16L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_ATTACK = 16
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_ATTACK() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_ATTACK;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_RELEASE = (int)17L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_RELEASE = 17
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_RELEASE() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_RELEASE;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN_MAKEUP = (int)18L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN_MAKEUP = 18
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN_MAKEUP() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_GAIN_MAKEUP;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_B_RESPONSE_DATA = (int)19L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_B_RESPONSE_DATA = 19
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_B_RESPONSE_DATA() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_B_RESPONSE_DATA;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_MODE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_MODE = 20
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_MODE() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_MODE;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN = (int)21L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN = 21
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_THRESHOLD = (int)22L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_THRESHOLD = 22
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_THRESHOLD() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_THRESHOLD;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_RATIO = (int)23L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_RATIO = 23
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_RATIO() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_RATIO;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_ATTACK = (int)24L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_ATTACK = 24
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_ATTACK() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_ATTACK;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_RELEASE = (int)25L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_RELEASE = 25
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_RELEASE() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_RELEASE;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN_MAKEUP = (int)26L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN_MAKEUP = 26
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN_MAKEUP() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_GAIN_MAKEUP;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_C_RESPONSE_DATA = (int)27L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS.FMOD_DSP_MULTIBAND_DYNAMICS_C_RESPONSE_DATA = 27
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_C_RESPONSE_DATA() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_C_RESPONSE_DATA;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS_MODE_TYPE.FMOD_DSP_MULTIBAND_DYNAMICS_MODE_DISABLED = 0
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_DISABLED() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_MODE_DISABLED;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_UP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS_MODE_TYPE.FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_UP = 1
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_UP() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_UP;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_DOWN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS_MODE_TYPE.FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_DOWN = 2
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_DOWN() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_MODE_COMPRESS_DOWN;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_UP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS_MODE_TYPE.FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_UP = 3
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_UP() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_UP;
    }
    private static final int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_DOWN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_MULTIBAND_DYNAMICS_MODE_TYPE.FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_DOWN = 4
     * }
     */
    public static int FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_DOWN() {
        return FMOD_DSP_MULTIBAND_DYNAMICS_MODE_EXPAND_DOWN;
    }
    private static final int FMOD_DSP_PITCHSHIFT_PITCH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PITCHSHIFT_PITCH = 0
     * }
     */
    public static int FMOD_DSP_PITCHSHIFT_PITCH() {
        return FMOD_DSP_PITCHSHIFT_PITCH;
    }
    private static final int FMOD_DSP_PITCHSHIFT_FFTSIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PITCHSHIFT_FFTSIZE = 1
     * }
     */
    public static int FMOD_DSP_PITCHSHIFT_FFTSIZE() {
        return FMOD_DSP_PITCHSHIFT_FFTSIZE;
    }
    private static final int FMOD_DSP_PITCHSHIFT_OVERLAP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PITCHSHIFT_OVERLAP = 2
     * }
     */
    public static int FMOD_DSP_PITCHSHIFT_OVERLAP() {
        return FMOD_DSP_PITCHSHIFT_OVERLAP;
    }
    private static final int FMOD_DSP_PITCHSHIFT_MAXCHANNELS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PITCHSHIFT_MAXCHANNELS = 3
     * }
     */
    public static int FMOD_DSP_PITCHSHIFT_MAXCHANNELS() {
        return FMOD_DSP_PITCHSHIFT_MAXCHANNELS;
    }
    private static final int FMOD_DSP_CHORUS_MIX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHORUS_MIX = 0
     * }
     */
    public static int FMOD_DSP_CHORUS_MIX() {
        return FMOD_DSP_CHORUS_MIX;
    }
    private static final int FMOD_DSP_CHORUS_RATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHORUS_RATE = 1
     * }
     */
    public static int FMOD_DSP_CHORUS_RATE() {
        return FMOD_DSP_CHORUS_RATE;
    }
    private static final int FMOD_DSP_CHORUS_DEPTH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHORUS_DEPTH = 2
     * }
     */
    public static int FMOD_DSP_CHORUS_DEPTH() {
        return FMOD_DSP_CHORUS_DEPTH;
    }
    private static final int FMOD_DSP_ITECHO_WETDRYMIX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ITECHO_WETDRYMIX = 0
     * }
     */
    public static int FMOD_DSP_ITECHO_WETDRYMIX() {
        return FMOD_DSP_ITECHO_WETDRYMIX;
    }
    private static final int FMOD_DSP_ITECHO_FEEDBACK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ITECHO_FEEDBACK = 1
     * }
     */
    public static int FMOD_DSP_ITECHO_FEEDBACK() {
        return FMOD_DSP_ITECHO_FEEDBACK;
    }
    private static final int FMOD_DSP_ITECHO_LEFTDELAY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ITECHO_LEFTDELAY = 2
     * }
     */
    public static int FMOD_DSP_ITECHO_LEFTDELAY() {
        return FMOD_DSP_ITECHO_LEFTDELAY;
    }
    private static final int FMOD_DSP_ITECHO_RIGHTDELAY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ITECHO_RIGHTDELAY = 3
     * }
     */
    public static int FMOD_DSP_ITECHO_RIGHTDELAY() {
        return FMOD_DSP_ITECHO_RIGHTDELAY;
    }
    private static final int FMOD_DSP_ITECHO_PANDELAY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_ITECHO_PANDELAY = 4
     * }
     */
    public static int FMOD_DSP_ITECHO_PANDELAY() {
        return FMOD_DSP_ITECHO_PANDELAY;
    }
    private static final int FMOD_DSP_COMPRESSOR_THRESHOLD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_COMPRESSOR_THRESHOLD = 0
     * }
     */
    public static int FMOD_DSP_COMPRESSOR_THRESHOLD() {
        return FMOD_DSP_COMPRESSOR_THRESHOLD;
    }
    private static final int FMOD_DSP_COMPRESSOR_RATIO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_COMPRESSOR_RATIO = 1
     * }
     */
    public static int FMOD_DSP_COMPRESSOR_RATIO() {
        return FMOD_DSP_COMPRESSOR_RATIO;
    }
    private static final int FMOD_DSP_COMPRESSOR_ATTACK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_COMPRESSOR_ATTACK = 2
     * }
     */
    public static int FMOD_DSP_COMPRESSOR_ATTACK() {
        return FMOD_DSP_COMPRESSOR_ATTACK;
    }
    private static final int FMOD_DSP_COMPRESSOR_RELEASE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_COMPRESSOR_RELEASE = 3
     * }
     */
    public static int FMOD_DSP_COMPRESSOR_RELEASE() {
        return FMOD_DSP_COMPRESSOR_RELEASE;
    }
    private static final int FMOD_DSP_COMPRESSOR_GAINMAKEUP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_COMPRESSOR_GAINMAKEUP = 4
     * }
     */
    public static int FMOD_DSP_COMPRESSOR_GAINMAKEUP() {
        return FMOD_DSP_COMPRESSOR_GAINMAKEUP;
    }
    private static final int FMOD_DSP_COMPRESSOR_USESIDECHAIN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_COMPRESSOR_USESIDECHAIN = 5
     * }
     */
    public static int FMOD_DSP_COMPRESSOR_USESIDECHAIN() {
        return FMOD_DSP_COMPRESSOR_USESIDECHAIN;
    }
    private static final int FMOD_DSP_COMPRESSOR_LINKED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_COMPRESSOR_LINKED = 6
     * }
     */
    public static int FMOD_DSP_COMPRESSOR_LINKED() {
        return FMOD_DSP_COMPRESSOR_LINKED;
    }
    private static final int FMOD_DSP_SFXREVERB_DECAYTIME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_DECAYTIME = 0
     * }
     */
    public static int FMOD_DSP_SFXREVERB_DECAYTIME() {
        return FMOD_DSP_SFXREVERB_DECAYTIME;
    }
    private static final int FMOD_DSP_SFXREVERB_EARLYDELAY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_EARLYDELAY = 1
     * }
     */
    public static int FMOD_DSP_SFXREVERB_EARLYDELAY() {
        return FMOD_DSP_SFXREVERB_EARLYDELAY;
    }
    private static final int FMOD_DSP_SFXREVERB_LATEDELAY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_LATEDELAY = 2
     * }
     */
    public static int FMOD_DSP_SFXREVERB_LATEDELAY() {
        return FMOD_DSP_SFXREVERB_LATEDELAY;
    }
    private static final int FMOD_DSP_SFXREVERB_HFREFERENCE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_HFREFERENCE = 3
     * }
     */
    public static int FMOD_DSP_SFXREVERB_HFREFERENCE() {
        return FMOD_DSP_SFXREVERB_HFREFERENCE;
    }
    private static final int FMOD_DSP_SFXREVERB_HFDECAYRATIO = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_HFDECAYRATIO = 4
     * }
     */
    public static int FMOD_DSP_SFXREVERB_HFDECAYRATIO() {
        return FMOD_DSP_SFXREVERB_HFDECAYRATIO;
    }
    private static final int FMOD_DSP_SFXREVERB_DIFFUSION = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_DIFFUSION = 5
     * }
     */
    public static int FMOD_DSP_SFXREVERB_DIFFUSION() {
        return FMOD_DSP_SFXREVERB_DIFFUSION;
    }
    private static final int FMOD_DSP_SFXREVERB_DENSITY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_DENSITY = 6
     * }
     */
    public static int FMOD_DSP_SFXREVERB_DENSITY() {
        return FMOD_DSP_SFXREVERB_DENSITY;
    }
    private static final int FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY = 7
     * }
     */
    public static int FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY() {
        return FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY;
    }
    private static final int FMOD_DSP_SFXREVERB_LOWSHELFGAIN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_LOWSHELFGAIN = 8
     * }
     */
    public static int FMOD_DSP_SFXREVERB_LOWSHELFGAIN() {
        return FMOD_DSP_SFXREVERB_LOWSHELFGAIN;
    }
    private static final int FMOD_DSP_SFXREVERB_HIGHCUT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_HIGHCUT = 9
     * }
     */
    public static int FMOD_DSP_SFXREVERB_HIGHCUT() {
        return FMOD_DSP_SFXREVERB_HIGHCUT;
    }
    private static final int FMOD_DSP_SFXREVERB_EARLYLATEMIX = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_EARLYLATEMIX = 10
     * }
     */
    public static int FMOD_DSP_SFXREVERB_EARLYLATEMIX() {
        return FMOD_DSP_SFXREVERB_EARLYLATEMIX;
    }
    private static final int FMOD_DSP_SFXREVERB_WETLEVEL = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_WETLEVEL = 11
     * }
     */
    public static int FMOD_DSP_SFXREVERB_WETLEVEL() {
        return FMOD_DSP_SFXREVERB_WETLEVEL;
    }
    private static final int FMOD_DSP_SFXREVERB_DRYLEVEL = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SFXREVERB_DRYLEVEL = 12
     * }
     */
    public static int FMOD_DSP_SFXREVERB_DRYLEVEL() {
        return FMOD_DSP_SFXREVERB_DRYLEVEL;
    }
    private static final int FMOD_DSP_LOWPASS_SIMPLE_CUTOFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOWPASS_SIMPLE_CUTOFF = 0
     * }
     */
    public static int FMOD_DSP_LOWPASS_SIMPLE_CUTOFF() {
        return FMOD_DSP_LOWPASS_SIMPLE_CUTOFF;
    }
    private static final int FMOD_DSP_DELAY_CH0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH0 = 0
     * }
     */
    public static int FMOD_DSP_DELAY_CH0() {
        return FMOD_DSP_DELAY_CH0;
    }
    private static final int FMOD_DSP_DELAY_CH1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH1 = 1
     * }
     */
    public static int FMOD_DSP_DELAY_CH1() {
        return FMOD_DSP_DELAY_CH1;
    }
    private static final int FMOD_DSP_DELAY_CH2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH2 = 2
     * }
     */
    public static int FMOD_DSP_DELAY_CH2() {
        return FMOD_DSP_DELAY_CH2;
    }
    private static final int FMOD_DSP_DELAY_CH3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH3 = 3
     * }
     */
    public static int FMOD_DSP_DELAY_CH3() {
        return FMOD_DSP_DELAY_CH3;
    }
    private static final int FMOD_DSP_DELAY_CH4 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH4 = 4
     * }
     */
    public static int FMOD_DSP_DELAY_CH4() {
        return FMOD_DSP_DELAY_CH4;
    }
    private static final int FMOD_DSP_DELAY_CH5 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH5 = 5
     * }
     */
    public static int FMOD_DSP_DELAY_CH5() {
        return FMOD_DSP_DELAY_CH5;
    }
    private static final int FMOD_DSP_DELAY_CH6 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH6 = 6
     * }
     */
    public static int FMOD_DSP_DELAY_CH6() {
        return FMOD_DSP_DELAY_CH6;
    }
    private static final int FMOD_DSP_DELAY_CH7 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH7 = 7
     * }
     */
    public static int FMOD_DSP_DELAY_CH7() {
        return FMOD_DSP_DELAY_CH7;
    }
    private static final int FMOD_DSP_DELAY_CH8 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH8 = 8
     * }
     */
    public static int FMOD_DSP_DELAY_CH8() {
        return FMOD_DSP_DELAY_CH8;
    }
    private static final int FMOD_DSP_DELAY_CH9 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH9 = 9
     * }
     */
    public static int FMOD_DSP_DELAY_CH9() {
        return FMOD_DSP_DELAY_CH9;
    }
    private static final int FMOD_DSP_DELAY_CH10 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH10 = 10
     * }
     */
    public static int FMOD_DSP_DELAY_CH10() {
        return FMOD_DSP_DELAY_CH10;
    }
    private static final int FMOD_DSP_DELAY_CH11 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH11 = 11
     * }
     */
    public static int FMOD_DSP_DELAY_CH11() {
        return FMOD_DSP_DELAY_CH11;
    }
    private static final int FMOD_DSP_DELAY_CH12 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH12 = 12
     * }
     */
    public static int FMOD_DSP_DELAY_CH12() {
        return FMOD_DSP_DELAY_CH12;
    }
    private static final int FMOD_DSP_DELAY_CH13 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH13 = 13
     * }
     */
    public static int FMOD_DSP_DELAY_CH13() {
        return FMOD_DSP_DELAY_CH13;
    }
    private static final int FMOD_DSP_DELAY_CH14 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH14 = 14
     * }
     */
    public static int FMOD_DSP_DELAY_CH14() {
        return FMOD_DSP_DELAY_CH14;
    }
    private static final int FMOD_DSP_DELAY_CH15 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_CH15 = 15
     * }
     */
    public static int FMOD_DSP_DELAY_CH15() {
        return FMOD_DSP_DELAY_CH15;
    }
    private static final int FMOD_DSP_DELAY_MAXDELAY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_DELAY_MAXDELAY = 16
     * }
     */
    public static int FMOD_DSP_DELAY_MAXDELAY() {
        return FMOD_DSP_DELAY_MAXDELAY;
    }
    private static final int FMOD_DSP_TREMOLO_FREQUENCY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_FREQUENCY = 0
     * }
     */
    public static int FMOD_DSP_TREMOLO_FREQUENCY() {
        return FMOD_DSP_TREMOLO_FREQUENCY;
    }
    private static final int FMOD_DSP_TREMOLO_DEPTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_DEPTH = 1
     * }
     */
    public static int FMOD_DSP_TREMOLO_DEPTH() {
        return FMOD_DSP_TREMOLO_DEPTH;
    }
    private static final int FMOD_DSP_TREMOLO_SHAPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_SHAPE = 2
     * }
     */
    public static int FMOD_DSP_TREMOLO_SHAPE() {
        return FMOD_DSP_TREMOLO_SHAPE;
    }
    private static final int FMOD_DSP_TREMOLO_SKEW = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_SKEW = 3
     * }
     */
    public static int FMOD_DSP_TREMOLO_SKEW() {
        return FMOD_DSP_TREMOLO_SKEW;
    }
    private static final int FMOD_DSP_TREMOLO_DUTY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_DUTY = 4
     * }
     */
    public static int FMOD_DSP_TREMOLO_DUTY() {
        return FMOD_DSP_TREMOLO_DUTY;
    }
    private static final int FMOD_DSP_TREMOLO_SQUARE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_SQUARE = 5
     * }
     */
    public static int FMOD_DSP_TREMOLO_SQUARE() {
        return FMOD_DSP_TREMOLO_SQUARE;
    }
    private static final int FMOD_DSP_TREMOLO_PHASE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_PHASE = 6
     * }
     */
    public static int FMOD_DSP_TREMOLO_PHASE() {
        return FMOD_DSP_TREMOLO_PHASE;
    }
    private static final int FMOD_DSP_TREMOLO_SPREAD = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TREMOLO_SPREAD = 7
     * }
     */
    public static int FMOD_DSP_TREMOLO_SPREAD() {
        return FMOD_DSP_TREMOLO_SPREAD;
    }
    private static final int FMOD_DSP_SEND_RETURNID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SEND_RETURNID = 0
     * }
     */
    public static int FMOD_DSP_SEND_RETURNID() {
        return FMOD_DSP_SEND_RETURNID;
    }
    private static final int FMOD_DSP_SEND_LEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_SEND_LEVEL = 1
     * }
     */
    public static int FMOD_DSP_SEND_LEVEL() {
        return FMOD_DSP_SEND_LEVEL;
    }
    private static final int FMOD_DSP_RETURN_ID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_RETURN_ID = 0
     * }
     */
    public static int FMOD_DSP_RETURN_ID() {
        return FMOD_DSP_RETURN_ID;
    }
    private static final int FMOD_DSP_RETURN_INPUT_SPEAKER_MODE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_RETURN_INPUT_SPEAKER_MODE = 1
     * }
     */
    public static int FMOD_DSP_RETURN_INPUT_SPEAKER_MODE() {
        return FMOD_DSP_RETURN_INPUT_SPEAKER_MODE;
    }
    private static final int FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF = 0
     * }
     */
    public static int FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF() {
        return FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF;
    }
    private static final int FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED = 0
     * }
     */
    public static int FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED() {
        return FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED;
    }
    private static final int FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE = 1
     * }
     */
    public static int FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE() {
        return FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE;
    }
    private static final int FMOD_DSP_PAN_MODE_MONO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_MODE_MONO = 0
     * }
     */
    public static int FMOD_DSP_PAN_MODE_MONO() {
        return FMOD_DSP_PAN_MODE_MONO;
    }
    private static final int FMOD_DSP_PAN_MODE_STEREO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_MODE_STEREO = 1
     * }
     */
    public static int FMOD_DSP_PAN_MODE_STEREO() {
        return FMOD_DSP_PAN_MODE_STEREO;
    }
    private static final int FMOD_DSP_PAN_MODE_SURROUND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_MODE_SURROUND = 2
     * }
     */
    public static int FMOD_DSP_PAN_MODE_SURROUND() {
        return FMOD_DSP_PAN_MODE_SURROUND;
    }
    private static final int FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED = 0
     * }
     */
    public static int FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED() {
        return FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED;
    }
    private static final int FMOD_DSP_PAN_3D_ROLLOFF_LINEAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_ROLLOFF_LINEAR = 1
     * }
     */
    public static int FMOD_DSP_PAN_3D_ROLLOFF_LINEAR() {
        return FMOD_DSP_PAN_3D_ROLLOFF_LINEAR;
    }
    private static final int FMOD_DSP_PAN_3D_ROLLOFF_INVERSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_ROLLOFF_INVERSE = 2
     * }
     */
    public static int FMOD_DSP_PAN_3D_ROLLOFF_INVERSE() {
        return FMOD_DSP_PAN_3D_ROLLOFF_INVERSE;
    }
    private static final int FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED = 3
     * }
     */
    public static int FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED() {
        return FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED;
    }
    private static final int FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM = 4
     * }
     */
    public static int FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM() {
        return FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM;
    }
    private static final int FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO = 0
     * }
     */
    public static int FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO() {
        return FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO;
    }
    private static final int FMOD_DSP_PAN_3D_EXTENT_MODE_USER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_EXTENT_MODE_USER = 1
     * }
     */
    public static int FMOD_DSP_PAN_3D_EXTENT_MODE_USER() {
        return FMOD_DSP_PAN_3D_EXTENT_MODE_USER;
    }
    private static final int FMOD_DSP_PAN_3D_EXTENT_MODE_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_EXTENT_MODE_OFF = 2
     * }
     */
    public static int FMOD_DSP_PAN_3D_EXTENT_MODE_OFF() {
        return FMOD_DSP_PAN_3D_EXTENT_MODE_OFF;
    }
    private static final int FMOD_DSP_PAN_MODE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_MODE = 0
     * }
     */
    public static int FMOD_DSP_PAN_MODE() {
        return FMOD_DSP_PAN_MODE;
    }
    private static final int FMOD_DSP_PAN_2D_STEREO_POSITION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_STEREO_POSITION = 1
     * }
     */
    public static int FMOD_DSP_PAN_2D_STEREO_POSITION() {
        return FMOD_DSP_PAN_2D_STEREO_POSITION;
    }
    private static final int FMOD_DSP_PAN_2D_DIRECTION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_DIRECTION = 2
     * }
     */
    public static int FMOD_DSP_PAN_2D_DIRECTION() {
        return FMOD_DSP_PAN_2D_DIRECTION;
    }
    private static final int FMOD_DSP_PAN_2D_EXTENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_EXTENT = 3
     * }
     */
    public static int FMOD_DSP_PAN_2D_EXTENT() {
        return FMOD_DSP_PAN_2D_EXTENT;
    }
    private static final int FMOD_DSP_PAN_2D_ROTATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_ROTATION = 4
     * }
     */
    public static int FMOD_DSP_PAN_2D_ROTATION() {
        return FMOD_DSP_PAN_2D_ROTATION;
    }
    private static final int FMOD_DSP_PAN_2D_LFE_LEVEL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_LFE_LEVEL = 5
     * }
     */
    public static int FMOD_DSP_PAN_2D_LFE_LEVEL() {
        return FMOD_DSP_PAN_2D_LFE_LEVEL;
    }
    private static final int FMOD_DSP_PAN_2D_STEREO_MODE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_STEREO_MODE = 6
     * }
     */
    public static int FMOD_DSP_PAN_2D_STEREO_MODE() {
        return FMOD_DSP_PAN_2D_STEREO_MODE;
    }
    private static final int FMOD_DSP_PAN_2D_STEREO_SEPARATION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_STEREO_SEPARATION = 7
     * }
     */
    public static int FMOD_DSP_PAN_2D_STEREO_SEPARATION() {
        return FMOD_DSP_PAN_2D_STEREO_SEPARATION;
    }
    private static final int FMOD_DSP_PAN_2D_STEREO_AXIS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_STEREO_AXIS = 8
     * }
     */
    public static int FMOD_DSP_PAN_2D_STEREO_AXIS() {
        return FMOD_DSP_PAN_2D_STEREO_AXIS;
    }
    private static final int FMOD_DSP_PAN_ENABLED_SPEAKERS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_ENABLED_SPEAKERS = 9
     * }
     */
    public static int FMOD_DSP_PAN_ENABLED_SPEAKERS() {
        return FMOD_DSP_PAN_ENABLED_SPEAKERS;
    }
    private static final int FMOD_DSP_PAN_3D_POSITION = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_POSITION = 10
     * }
     */
    public static int FMOD_DSP_PAN_3D_POSITION() {
        return FMOD_DSP_PAN_3D_POSITION;
    }
    private static final int FMOD_DSP_PAN_3D_ROLLOFF = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_ROLLOFF = 11
     * }
     */
    public static int FMOD_DSP_PAN_3D_ROLLOFF() {
        return FMOD_DSP_PAN_3D_ROLLOFF;
    }
    private static final int FMOD_DSP_PAN_3D_MIN_DISTANCE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_MIN_DISTANCE = 12
     * }
     */
    public static int FMOD_DSP_PAN_3D_MIN_DISTANCE() {
        return FMOD_DSP_PAN_3D_MIN_DISTANCE;
    }
    private static final int FMOD_DSP_PAN_3D_MAX_DISTANCE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_MAX_DISTANCE = 13
     * }
     */
    public static int FMOD_DSP_PAN_3D_MAX_DISTANCE() {
        return FMOD_DSP_PAN_3D_MAX_DISTANCE;
    }
    private static final int FMOD_DSP_PAN_3D_EXTENT_MODE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_EXTENT_MODE = 14
     * }
     */
    public static int FMOD_DSP_PAN_3D_EXTENT_MODE() {
        return FMOD_DSP_PAN_3D_EXTENT_MODE;
    }
    private static final int FMOD_DSP_PAN_3D_SOUND_SIZE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_SOUND_SIZE = 15
     * }
     */
    public static int FMOD_DSP_PAN_3D_SOUND_SIZE() {
        return FMOD_DSP_PAN_3D_SOUND_SIZE;
    }
    private static final int FMOD_DSP_PAN_3D_MIN_EXTENT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_MIN_EXTENT = 16
     * }
     */
    public static int FMOD_DSP_PAN_3D_MIN_EXTENT() {
        return FMOD_DSP_PAN_3D_MIN_EXTENT;
    }
    private static final int FMOD_DSP_PAN_3D_PAN_BLEND = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_3D_PAN_BLEND = 17
     * }
     */
    public static int FMOD_DSP_PAN_3D_PAN_BLEND() {
        return FMOD_DSP_PAN_3D_PAN_BLEND;
    }
    private static final int FMOD_DSP_PAN_LFE_UPMIX_ENABLED = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_LFE_UPMIX_ENABLED = 18
     * }
     */
    public static int FMOD_DSP_PAN_LFE_UPMIX_ENABLED() {
        return FMOD_DSP_PAN_LFE_UPMIX_ENABLED;
    }
    private static final int FMOD_DSP_PAN_OVERALL_GAIN = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_OVERALL_GAIN = 19
     * }
     */
    public static int FMOD_DSP_PAN_OVERALL_GAIN() {
        return FMOD_DSP_PAN_OVERALL_GAIN;
    }
    private static final int FMOD_DSP_PAN_SURROUND_SPEAKER_MODE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_SURROUND_SPEAKER_MODE = 20
     * }
     */
    public static int FMOD_DSP_PAN_SURROUND_SPEAKER_MODE() {
        return FMOD_DSP_PAN_SURROUND_SPEAKER_MODE;
    }
    private static final int FMOD_DSP_PAN_2D_HEIGHT_BLEND = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_2D_HEIGHT_BLEND = 21
     * }
     */
    public static int FMOD_DSP_PAN_2D_HEIGHT_BLEND() {
        return FMOD_DSP_PAN_2D_HEIGHT_BLEND;
    }
    private static final int FMOD_DSP_PAN_ATTENUATION_RANGE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_ATTENUATION_RANGE = 22
     * }
     */
    public static int FMOD_DSP_PAN_ATTENUATION_RANGE() {
        return FMOD_DSP_PAN_ATTENUATION_RANGE;
    }
    private static final int FMOD_DSP_PAN_OVERRIDE_RANGE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PAN_OVERRIDE_RANGE = 23
     * }
     */
    public static int FMOD_DSP_PAN_OVERRIDE_RANGE() {
        return FMOD_DSP_PAN_OVERRIDE_RANGE;
    }
    private static final int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB = 0
     * }
     */
    public static int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB() {
        return FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB;
    }
    private static final int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB = 1
     * }
     */
    public static int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB() {
        return FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB;
    }
    private static final int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB = 2
     * }
     */
    public static int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB() {
        return FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB;
    }
    private static final int FMOD_DSP_THREE_EQ_LOWGAIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_LOWGAIN = 0
     * }
     */
    public static int FMOD_DSP_THREE_EQ_LOWGAIN() {
        return FMOD_DSP_THREE_EQ_LOWGAIN;
    }
    private static final int FMOD_DSP_THREE_EQ_MIDGAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_MIDGAIN = 1
     * }
     */
    public static int FMOD_DSP_THREE_EQ_MIDGAIN() {
        return FMOD_DSP_THREE_EQ_MIDGAIN;
    }
    private static final int FMOD_DSP_THREE_EQ_HIGHGAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_HIGHGAIN = 2
     * }
     */
    public static int FMOD_DSP_THREE_EQ_HIGHGAIN() {
        return FMOD_DSP_THREE_EQ_HIGHGAIN;
    }
    private static final int FMOD_DSP_THREE_EQ_LOWCROSSOVER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_LOWCROSSOVER = 3
     * }
     */
    public static int FMOD_DSP_THREE_EQ_LOWCROSSOVER() {
        return FMOD_DSP_THREE_EQ_LOWCROSSOVER;
    }
    private static final int FMOD_DSP_THREE_EQ_HIGHCROSSOVER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_HIGHCROSSOVER = 4
     * }
     */
    public static int FMOD_DSP_THREE_EQ_HIGHCROSSOVER() {
        return FMOD_DSP_THREE_EQ_HIGHCROSSOVER;
    }
    private static final int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE = 5
     * }
     */
    public static int FMOD_DSP_THREE_EQ_CROSSOVERSLOPE() {
        return FMOD_DSP_THREE_EQ_CROSSOVERSLOPE;
    }
    private static final int FMOD_DSP_FFT_WINDOW_RECT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOW_RECT = 0
     * }
     */
    public static int FMOD_DSP_FFT_WINDOW_RECT() {
        return FMOD_DSP_FFT_WINDOW_RECT;
    }
    private static final int FMOD_DSP_FFT_WINDOW_TRIANGLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOW_TRIANGLE = 1
     * }
     */
    public static int FMOD_DSP_FFT_WINDOW_TRIANGLE() {
        return FMOD_DSP_FFT_WINDOW_TRIANGLE;
    }
    private static final int FMOD_DSP_FFT_WINDOW_HAMMING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOW_HAMMING = 2
     * }
     */
    public static int FMOD_DSP_FFT_WINDOW_HAMMING() {
        return FMOD_DSP_FFT_WINDOW_HAMMING;
    }
    private static final int FMOD_DSP_FFT_WINDOW_HANNING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOW_HANNING = 3
     * }
     */
    public static int FMOD_DSP_FFT_WINDOW_HANNING() {
        return FMOD_DSP_FFT_WINDOW_HANNING;
    }
    private static final int FMOD_DSP_FFT_WINDOW_BLACKMAN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOW_BLACKMAN = 4
     * }
     */
    public static int FMOD_DSP_FFT_WINDOW_BLACKMAN() {
        return FMOD_DSP_FFT_WINDOW_BLACKMAN;
    }
    private static final int FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS = 5
     * }
     */
    public static int FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS() {
        return FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS;
    }
    private static final int FMOD_DSP_FFT_DOWNMIX_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_DOWNMIX_NONE = 0
     * }
     */
    public static int FMOD_DSP_FFT_DOWNMIX_NONE() {
        return FMOD_DSP_FFT_DOWNMIX_NONE;
    }
    private static final int FMOD_DSP_FFT_DOWNMIX_MONO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_DOWNMIX_MONO = 1
     * }
     */
    public static int FMOD_DSP_FFT_DOWNMIX_MONO() {
        return FMOD_DSP_FFT_DOWNMIX_MONO;
    }
    private static final int FMOD_DSP_FFT_WINDOWSIZE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOWSIZE = 0
     * }
     */
    public static int FMOD_DSP_FFT_WINDOWSIZE() {
        return FMOD_DSP_FFT_WINDOWSIZE;
    }
    private static final int FMOD_DSP_FFT_WINDOW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_WINDOW = 1
     * }
     */
    public static int FMOD_DSP_FFT_WINDOW() {
        return FMOD_DSP_FFT_WINDOW;
    }
    private static final int FMOD_DSP_FFT_BAND_START_FREQ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_BAND_START_FREQ = 2
     * }
     */
    public static int FMOD_DSP_FFT_BAND_START_FREQ() {
        return FMOD_DSP_FFT_BAND_START_FREQ;
    }
    private static final int FMOD_DSP_FFT_BAND_STOP_FREQ = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_BAND_STOP_FREQ = 3
     * }
     */
    public static int FMOD_DSP_FFT_BAND_STOP_FREQ() {
        return FMOD_DSP_FFT_BAND_STOP_FREQ;
    }
    private static final int FMOD_DSP_FFT_SPECTRUMDATA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_SPECTRUMDATA = 4
     * }
     */
    public static int FMOD_DSP_FFT_SPECTRUMDATA() {
        return FMOD_DSP_FFT_SPECTRUMDATA;
    }
    private static final int FMOD_DSP_FFT_RMS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_RMS = 5
     * }
     */
    public static int FMOD_DSP_FFT_RMS() {
        return FMOD_DSP_FFT_RMS;
    }
    private static final int FMOD_DSP_FFT_SPECTRAL_CENTROID = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_SPECTRAL_CENTROID = 6
     * }
     */
    public static int FMOD_DSP_FFT_SPECTRAL_CENTROID() {
        return FMOD_DSP_FFT_SPECTRAL_CENTROID;
    }
    private static final int FMOD_DSP_FFT_IMMEDIATE_MODE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_IMMEDIATE_MODE = 7
     * }
     */
    public static int FMOD_DSP_FFT_IMMEDIATE_MODE() {
        return FMOD_DSP_FFT_IMMEDIATE_MODE;
    }
    private static final int FMOD_DSP_FFT_DOWNMIX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_DOWNMIX = 8
     * }
     */
    public static int FMOD_DSP_FFT_DOWNMIX() {
        return FMOD_DSP_FFT_DOWNMIX;
    }
    private static final int FMOD_DSP_FFT_CHANNEL = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_FFT_CHANNEL = 9
     * }
     */
    public static int FMOD_DSP_FFT_CHANNEL() {
        return FMOD_DSP_FFT_CHANNEL;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_STATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_STATE = 0
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_STATE() {
        return FMOD_DSP_LOUDNESS_METER_STATE;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_WEIGHTING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_WEIGHTING = 1
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_WEIGHTING() {
        return FMOD_DSP_LOUDNESS_METER_WEIGHTING;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_INFO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_INFO = 2
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_INFO() {
        return FMOD_DSP_LOUDNESS_METER_INFO;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_STATE_RESET_INTEGRATED = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_STATE_RESET_INTEGRATED = -3
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_STATE_RESET_INTEGRATED() {
        return FMOD_DSP_LOUDNESS_METER_STATE_RESET_INTEGRATED;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_STATE_RESET_MAXPEAK = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_STATE_RESET_MAXPEAK = -2
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_STATE_RESET_MAXPEAK() {
        return FMOD_DSP_LOUDNESS_METER_STATE_RESET_MAXPEAK;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_STATE_RESET_ALL = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_STATE_RESET_ALL = -1
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_STATE_RESET_ALL() {
        return FMOD_DSP_LOUDNESS_METER_STATE_RESET_ALL;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_STATE_PAUSED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_STATE_PAUSED = 0
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_STATE_PAUSED() {
        return FMOD_DSP_LOUDNESS_METER_STATE_PAUSED;
    }
    private static final int FMOD_DSP_LOUDNESS_METER_STATE_ANALYZING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_LOUDNESS_METER_STATE_ANALYZING = 1
     * }
     */
    public static int FMOD_DSP_LOUDNESS_METER_STATE_ANALYZING() {
        return FMOD_DSP_LOUDNESS_METER_STATE_ANALYZING;
    }
    private static final int FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR = 0
     * }
     */
    public static int FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR() {
        return FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR;
    }
    private static final int FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET = 1
     * }
     */
    public static int FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET() {
        return FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET;
    }
    private static final int FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY = 2
     * }
     */
    public static int FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY() {
        return FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY;
    }
    private static final int FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED = 3
     * }
     */
    public static int FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED() {
        return FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT = 0
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO = 1
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO = 2
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD = 3
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1 = 4
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1 = 5
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE = 6
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4 = 7
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUTGROUPING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUTGROUPING = 0
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUTGROUPING() {
        return FMOD_DSP_CHANNELMIX_OUTPUTGROUPING;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH0 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH0 = 1
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH0() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH0;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH1 = 2
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH1() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH1;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH2 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH2 = 3
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH2() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH2;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH3 = 4
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH3() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH3;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH4 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH4 = 5
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH4() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH4;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH5 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH5 = 6
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH5() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH5;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH6 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH6 = 7
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH6() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH6;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH7 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH7 = 8
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH7() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH7;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH8 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH8 = 9
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH8() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH8;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH9 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH9 = 10
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH9() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH9;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH10 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH10 = 11
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH10() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH10;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH11 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH11 = 12
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH11() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH11;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH12 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH12 = 13
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH12() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH12;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH13 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH13 = 14
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH13() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH13;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH14 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH14 = 15
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH14() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH14;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH15 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH15 = 16
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH15() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH15;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH16 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH16 = 17
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH16() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH16;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH17 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH17 = 18
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH17() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH17;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH18 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH18 = 19
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH18() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH18;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH19 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH19 = 20
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH19() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH19;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH20 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH20 = 21
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH20() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH20;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH21 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH21 = 22
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH21() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH21;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH22 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH22 = 23
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH22() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH22;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH23 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH23 = 24
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH23() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH23;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH24 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH24 = 25
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH24() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH24;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH25 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH25 = 26
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH25() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH25;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH26 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH26 = 27
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH26() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH26;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH27 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH27 = 28
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH27() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH27;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH28 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH28 = 29
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH28() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH28;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH29 = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH29 = 30
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH29() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH29;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH30 = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH30 = 31
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH30() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH30;
    }
    private static final int FMOD_DSP_CHANNELMIX_GAIN_CH31 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_GAIN_CH31 = 32
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_GAIN_CH31() {
        return FMOD_DSP_CHANNELMIX_GAIN_CH31;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH0 = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH0 = 33
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH0() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH0;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH1 = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH1 = 34
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH1() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH1;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH2 = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH2 = 35
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH2() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH2;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH3 = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH3 = 36
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH3() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH3;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH4 = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH4 = 37
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH4() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH4;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH5 = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH5 = 38
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH5() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH5;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH6 = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH6 = 39
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH6() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH6;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH7 = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH7 = 40
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH7() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH7;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH8 = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH8 = 41
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH8() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH8;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH9 = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH9 = 42
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH9() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH9;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH10 = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH10 = 43
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH10() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH10;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH11 = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH11 = 44
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH11() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH11;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH12 = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH12 = 45
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH12() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH12;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH13 = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH13 = 46
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH13() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH13;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH14 = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH14 = 47
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH14() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH14;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH15 = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH15 = 48
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH15() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH15;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH16 = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH16 = 49
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH16() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH16;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH17 = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH17 = 50
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH17() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH17;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH18 = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH18 = 51
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH18() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH18;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH19 = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH19 = 52
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH19() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH19;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH20 = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH20 = 53
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH20() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH20;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH21 = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH21 = 54
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH21() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH21;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH22 = (int)55L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH22 = 55
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH22() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH22;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH23 = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH23 = 56
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH23() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH23;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH24 = (int)57L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH24 = 57
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH24() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH24;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH25 = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH25 = 58
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH25() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH25;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH26 = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH26 = 59
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH26() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH26;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH27 = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH27 = 60
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH27() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH27;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH28 = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH28 = 61
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH28() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH28;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH29 = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH29 = 62
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH29() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH29;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH30 = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH30 = 63
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH30() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH30;
    }
    private static final int FMOD_DSP_CHANNELMIX_OUTPUT_CH31 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_CHANNELMIX_OUTPUT_CH31 = 64
     * }
     */
    public static int FMOD_DSP_CHANNELMIX_OUTPUT_CH31() {
        return FMOD_DSP_CHANNELMIX_OUTPUT_CH31;
    }
    private static final int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO = -1
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO() {
        return FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO;
    }
    private static final int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO = 0
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO() {
        return FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO;
    }
    private static final int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO = 1
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO() {
        return FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO;
    }
    private static final int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND = 2
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND() {
        return FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND;
    }
    private static final int FMOD_DSP_TRANSCEIVER_TRANSMIT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_TRANSMIT = 0
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_TRANSMIT() {
        return FMOD_DSP_TRANSCEIVER_TRANSMIT;
    }
    private static final int FMOD_DSP_TRANSCEIVER_GAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_GAIN = 1
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_GAIN() {
        return FMOD_DSP_TRANSCEIVER_GAIN;
    }
    private static final int FMOD_DSP_TRANSCEIVER_CHANNEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_CHANNEL = 2
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_CHANNEL() {
        return FMOD_DSP_TRANSCEIVER_CHANNEL;
    }
    private static final int FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE = 3
     * }
     */
    public static int FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE() {
        return FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE;
    }
    private static final int FMOD_DSP_OBJECTPAN_3D_POSITION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_3D_POSITION = 0
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_3D_POSITION() {
        return FMOD_DSP_OBJECTPAN_3D_POSITION;
    }
    private static final int FMOD_DSP_OBJECTPAN_3D_ROLLOFF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_3D_ROLLOFF = 1
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_3D_ROLLOFF() {
        return FMOD_DSP_OBJECTPAN_3D_ROLLOFF;
    }
    private static final int FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE = 2
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE() {
        return FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE;
    }
    private static final int FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE = 3
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE() {
        return FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE;
    }
    private static final int FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE = 4
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE() {
        return FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE;
    }
    private static final int FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE = 5
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE() {
        return FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE;
    }
    private static final int FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT = 6
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT() {
        return FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT;
    }
    private static final int FMOD_DSP_OBJECTPAN_OVERALL_GAIN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_OVERALL_GAIN = 7
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_OVERALL_GAIN() {
        return FMOD_DSP_OBJECTPAN_OVERALL_GAIN;
    }
    private static final int FMOD_DSP_OBJECTPAN_OUTPUTGAIN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_OUTPUTGAIN = 8
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_OUTPUTGAIN() {
        return FMOD_DSP_OBJECTPAN_OUTPUTGAIN;
    }
    private static final int FMOD_DSP_OBJECTPAN_ATTENUATION_RANGE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_ATTENUATION_RANGE = 9
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_ATTENUATION_RANGE() {
        return FMOD_DSP_OBJECTPAN_ATTENUATION_RANGE;
    }
    private static final int FMOD_DSP_OBJECTPAN_OVERRIDE_RANGE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_OBJECTPAN_OVERRIDE_RANGE = 10
     * }
     */
    public static int FMOD_DSP_OBJECTPAN_OVERRIDE_RANGE() {
        return FMOD_DSP_OBJECTPAN_OVERRIDE_RANGE;
    }
    private static final int FMOD_DSP_PROCESS_PERFORM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PROCESS_PERFORM = 0
     * }
     */
    public static int FMOD_DSP_PROCESS_PERFORM() {
        return FMOD_DSP_PROCESS_PERFORM;
    }
    private static final int FMOD_DSP_PROCESS_QUERY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PROCESS_QUERY = 1
     * }
     */
    public static int FMOD_DSP_PROCESS_QUERY() {
        return FMOD_DSP_PROCESS_QUERY;
    }
    private static final int FMOD_DSP_PAN_SURROUND_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_PAN_SURROUND_FLAGS.FMOD_DSP_PAN_SURROUND_DEFAULT = 0
     * }
     */
    public static int FMOD_DSP_PAN_SURROUND_DEFAULT() {
        return FMOD_DSP_PAN_SURROUND_DEFAULT;
    }
    private static final int FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_PAN_SURROUND_FLAGS.FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED = 1
     * }
     */
    public static int FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED() {
        return FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED;
    }
    private static final int FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum FMOD_DSP_PAN_SURROUND_FLAGS.FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT = 65536
     * }
     */
    public static int FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT() {
        return FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT;
    }
    private static final int FMOD_DSP_PARAMETER_TYPE_FLOAT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_TYPE_FLOAT = 0
     * }
     */
    public static int FMOD_DSP_PARAMETER_TYPE_FLOAT() {
        return FMOD_DSP_PARAMETER_TYPE_FLOAT;
    }
    private static final int FMOD_DSP_PARAMETER_TYPE_INT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_TYPE_INT = 1
     * }
     */
    public static int FMOD_DSP_PARAMETER_TYPE_INT() {
        return FMOD_DSP_PARAMETER_TYPE_INT;
    }
    private static final int FMOD_DSP_PARAMETER_TYPE_BOOL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_TYPE_BOOL = 2
     * }
     */
    public static int FMOD_DSP_PARAMETER_TYPE_BOOL() {
        return FMOD_DSP_PARAMETER_TYPE_BOOL;
    }
    private static final int FMOD_DSP_PARAMETER_TYPE_DATA = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_TYPE_DATA = 3
     * }
     */
    public static int FMOD_DSP_PARAMETER_TYPE_DATA() {
        return FMOD_DSP_PARAMETER_TYPE_DATA;
    }
    private static final int FMOD_DSP_PARAMETER_TYPE_MAX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_TYPE_MAX = 4
     * }
     */
    public static int FMOD_DSP_PARAMETER_TYPE_MAX() {
        return FMOD_DSP_PARAMETER_TYPE_MAX;
    }
    private static final int FMOD_DSP_PARAMETER_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_DSP_PARAMETER_TYPE_FORCEINT() {
        return FMOD_DSP_PARAMETER_TYPE_FORCEINT;
    }
    private static final int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR = 0
     * }
     */
    public static int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR() {
        return FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR;
    }
    private static final int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO = 1
     * }
     */
    public static int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO() {
        return FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO;
    }
    private static final int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR = 2
     * }
     */
    public static int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR() {
        return FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR;
    }
    private static final int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT = 65536
     * }
     */
    public static int FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT() {
        return FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_USER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_USER = 0
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_USER() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_USER;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = -1
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = -2
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN = -3
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_FFT = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_FFT = -4
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_FFT() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_FFT;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = (int)-5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = -5
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_ATTENUATION_RANGE = (int)-6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_ATTENUATION_RANGE = -6
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_ATTENUATION_RANGE() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_ATTENUATION_RANGE;
    }
    private static final int FMOD_DSP_PARAMETER_DATA_TYPE_DYNAMIC_RESPONSE = (int)-7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FMOD_DSP_PARAMETER_DATA_TYPE_DYNAMIC_RESPONSE = -7
     * }
     */
    public static int FMOD_DSP_PARAMETER_DATA_TYPE_DYNAMIC_RESPONSE() {
        return FMOD_DSP_PARAMETER_DATA_TYPE_DYNAMIC_RESPONSE;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned int FMOD_OUTPUT_METHOD
     * }
     */
    public static final OfInt FMOD_OUTPUT_METHOD = FmodCore.C_INT;

    private static class FMOD_Memory_Initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Memory_Initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_Initialize(void *poolmem, int poollen, FMOD_MEMORY_ALLOC_CALLBACK useralloc, FMOD_MEMORY_REALLOC_CALLBACK userrealloc, FMOD_MEMORY_FREE_CALLBACK userfree, FMOD_MEMORY_TYPE memtypeflags)
     * }
     */
    public static FunctionDescriptor FMOD_Memory_Initialize$descriptor() {
        return FMOD_Memory_Initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_Initialize(void *poolmem, int poollen, FMOD_MEMORY_ALLOC_CALLBACK useralloc, FMOD_MEMORY_REALLOC_CALLBACK userrealloc, FMOD_MEMORY_FREE_CALLBACK userfree, FMOD_MEMORY_TYPE memtypeflags)
     * }
     */
    public static MethodHandle FMOD_Memory_Initialize$handle() {
        return FMOD_Memory_Initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_Initialize(void *poolmem, int poollen, FMOD_MEMORY_ALLOC_CALLBACK useralloc, FMOD_MEMORY_REALLOC_CALLBACK userrealloc, FMOD_MEMORY_FREE_CALLBACK userfree, FMOD_MEMORY_TYPE memtypeflags)
     * }
     */
    public static MemorySegment FMOD_Memory_Initialize$address() {
        return FMOD_Memory_Initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_Initialize(void *poolmem, int poollen, FMOD_MEMORY_ALLOC_CALLBACK useralloc, FMOD_MEMORY_REALLOC_CALLBACK userrealloc, FMOD_MEMORY_FREE_CALLBACK userfree, FMOD_MEMORY_TYPE memtypeflags)
     * }
     */
    public static int FMOD_Memory_Initialize(MemorySegment poolmem, int poollen, MemorySegment useralloc, MemorySegment userrealloc, MemorySegment userfree, int memtypeflags) {
        var mh$ = FMOD_Memory_Initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Memory_Initialize", poolmem, poollen, useralloc, userrealloc, userfree, memtypeflags);
            }
            return (int)mh$.invokeExact(poolmem, poollen, useralloc, userrealloc, userfree, memtypeflags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Memory_GetStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Memory_GetStats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_GetStats(int *currentalloced, int *maxalloced, FMOD_BOOL blocking)
     * }
     */
    public static FunctionDescriptor FMOD_Memory_GetStats$descriptor() {
        return FMOD_Memory_GetStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_GetStats(int *currentalloced, int *maxalloced, FMOD_BOOL blocking)
     * }
     */
    public static MethodHandle FMOD_Memory_GetStats$handle() {
        return FMOD_Memory_GetStats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_GetStats(int *currentalloced, int *maxalloced, FMOD_BOOL blocking)
     * }
     */
    public static MemorySegment FMOD_Memory_GetStats$address() {
        return FMOD_Memory_GetStats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Memory_GetStats(int *currentalloced, int *maxalloced, FMOD_BOOL blocking)
     * }
     */
    public static int FMOD_Memory_GetStats(MemorySegment currentalloced, MemorySegment maxalloced, int blocking) {
        var mh$ = FMOD_Memory_GetStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Memory_GetStats", currentalloced, maxalloced, blocking);
            }
            return (int)mh$.invokeExact(currentalloced, maxalloced, blocking);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Debug_Initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Debug_Initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Debug_Initialize(FMOD_DEBUG_FLAGS flags, FMOD_DEBUG_MODE mode, FMOD_DEBUG_CALLBACK callback, const char *filename)
     * }
     */
    public static FunctionDescriptor FMOD_Debug_Initialize$descriptor() {
        return FMOD_Debug_Initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Debug_Initialize(FMOD_DEBUG_FLAGS flags, FMOD_DEBUG_MODE mode, FMOD_DEBUG_CALLBACK callback, const char *filename)
     * }
     */
    public static MethodHandle FMOD_Debug_Initialize$handle() {
        return FMOD_Debug_Initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Debug_Initialize(FMOD_DEBUG_FLAGS flags, FMOD_DEBUG_MODE mode, FMOD_DEBUG_CALLBACK callback, const char *filename)
     * }
     */
    public static MemorySegment FMOD_Debug_Initialize$address() {
        return FMOD_Debug_Initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Debug_Initialize(FMOD_DEBUG_FLAGS flags, FMOD_DEBUG_MODE mode, FMOD_DEBUG_CALLBACK callback, const char *filename)
     * }
     */
    public static int FMOD_Debug_Initialize(int flags, int mode, MemorySegment callback, MemorySegment filename) {
        var mh$ = FMOD_Debug_Initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Debug_Initialize", flags, mode, callback, filename);
            }
            return (int)mh$.invokeExact(flags, mode, callback, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_File_SetDiskBusy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_File_SetDiskBusy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_SetDiskBusy(int busy)
     * }
     */
    public static FunctionDescriptor FMOD_File_SetDiskBusy$descriptor() {
        return FMOD_File_SetDiskBusy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_SetDiskBusy(int busy)
     * }
     */
    public static MethodHandle FMOD_File_SetDiskBusy$handle() {
        return FMOD_File_SetDiskBusy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_SetDiskBusy(int busy)
     * }
     */
    public static MemorySegment FMOD_File_SetDiskBusy$address() {
        return FMOD_File_SetDiskBusy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_SetDiskBusy(int busy)
     * }
     */
    public static int FMOD_File_SetDiskBusy(int busy) {
        var mh$ = FMOD_File_SetDiskBusy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_File_SetDiskBusy", busy);
            }
            return (int)mh$.invokeExact(busy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_File_GetDiskBusy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_File_GetDiskBusy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_GetDiskBusy(int *busy)
     * }
     */
    public static FunctionDescriptor FMOD_File_GetDiskBusy$descriptor() {
        return FMOD_File_GetDiskBusy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_GetDiskBusy(int *busy)
     * }
     */
    public static MethodHandle FMOD_File_GetDiskBusy$handle() {
        return FMOD_File_GetDiskBusy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_GetDiskBusy(int *busy)
     * }
     */
    public static MemorySegment FMOD_File_GetDiskBusy$address() {
        return FMOD_File_GetDiskBusy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_File_GetDiskBusy(int *busy)
     * }
     */
    public static int FMOD_File_GetDiskBusy(MemorySegment busy) {
        var mh$ = FMOD_File_GetDiskBusy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_File_GetDiskBusy", busy);
            }
            return (int)mh$.invokeExact(busy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Thread_SetAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_LONG_LONG,
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Thread_SetAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Thread_SetAttributes(FMOD_THREAD_TYPE type, FMOD_THREAD_AFFINITY affinity, FMOD_THREAD_PRIORITY priority, FMOD_THREAD_STACK_SIZE stacksize)
     * }
     */
    public static FunctionDescriptor FMOD_Thread_SetAttributes$descriptor() {
        return FMOD_Thread_SetAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Thread_SetAttributes(FMOD_THREAD_TYPE type, FMOD_THREAD_AFFINITY affinity, FMOD_THREAD_PRIORITY priority, FMOD_THREAD_STACK_SIZE stacksize)
     * }
     */
    public static MethodHandle FMOD_Thread_SetAttributes$handle() {
        return FMOD_Thread_SetAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Thread_SetAttributes(FMOD_THREAD_TYPE type, FMOD_THREAD_AFFINITY affinity, FMOD_THREAD_PRIORITY priority, FMOD_THREAD_STACK_SIZE stacksize)
     * }
     */
    public static MemorySegment FMOD_Thread_SetAttributes$address() {
        return FMOD_Thread_SetAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Thread_SetAttributes(FMOD_THREAD_TYPE type, FMOD_THREAD_AFFINITY affinity, FMOD_THREAD_PRIORITY priority, FMOD_THREAD_STACK_SIZE stacksize)
     * }
     */
    public static int FMOD_Thread_SetAttributes(int type, long affinity, int priority, int stacksize) {
        var mh$ = FMOD_Thread_SetAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Thread_SetAttributes", type, affinity, priority, stacksize);
            }
            return (int)mh$.invokeExact(type, affinity, priority, stacksize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Create(FMOD_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static FunctionDescriptor FMOD_System_Create$descriptor() {
        return FMOD_System_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Create(FMOD_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static MethodHandle FMOD_System_Create$handle() {
        return FMOD_System_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Create(FMOD_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static MemorySegment FMOD_System_Create$address() {
        return FMOD_System_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Create(FMOD_SYSTEM **system, unsigned int headerversion)
     * }
     */
    public static int FMOD_System_Create(MemorySegment system, int headerversion) {
        var mh$ = FMOD_System_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Create", system, headerversion);
            }
            return (int)mh$.invokeExact(system, headerversion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Release(FMOD_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_System_Release$descriptor() {
        return FMOD_System_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Release(FMOD_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_System_Release$handle() {
        return FMOD_System_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Release(FMOD_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_System_Release$address() {
        return FMOD_System_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Release(FMOD_SYSTEM *system)
     * }
     */
    public static int FMOD_System_Release(MemorySegment system) {
        var mh$ = FMOD_System_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Release", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE output)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetOutput$descriptor() {
        return FMOD_System_SetOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE output)
     * }
     */
    public static MethodHandle FMOD_System_SetOutput$handle() {
        return FMOD_System_SetOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE output)
     * }
     */
    public static MemorySegment FMOD_System_SetOutput$address() {
        return FMOD_System_SetOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE output)
     * }
     */
    public static int FMOD_System_SetOutput(MemorySegment system, int output) {
        var mh$ = FMOD_System_SetOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetOutput", system, output);
            }
            return (int)mh$.invokeExact(system, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE *output)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetOutput$descriptor() {
        return FMOD_System_GetOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE *output)
     * }
     */
    public static MethodHandle FMOD_System_GetOutput$handle() {
        return FMOD_System_GetOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE *output)
     * }
     */
    public static MemorySegment FMOD_System_GetOutput$address() {
        return FMOD_System_GetOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutput(FMOD_SYSTEM *system, FMOD_OUTPUTTYPE *output)
     * }
     */
    public static int FMOD_System_GetOutput(MemorySegment system, MemorySegment output) {
        var mh$ = FMOD_System_GetOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetOutput", system, output);
            }
            return (int)mh$.invokeExact(system, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetNumDrivers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetNumDrivers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumDrivers(FMOD_SYSTEM *system, int *numdrivers)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetNumDrivers$descriptor() {
        return FMOD_System_GetNumDrivers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumDrivers(FMOD_SYSTEM *system, int *numdrivers)
     * }
     */
    public static MethodHandle FMOD_System_GetNumDrivers$handle() {
        return FMOD_System_GetNumDrivers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumDrivers(FMOD_SYSTEM *system, int *numdrivers)
     * }
     */
    public static MemorySegment FMOD_System_GetNumDrivers$address() {
        return FMOD_System_GetNumDrivers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumDrivers(FMOD_SYSTEM *system, int *numdrivers)
     * }
     */
    public static int FMOD_System_GetNumDrivers(MemorySegment system, MemorySegment numdrivers) {
        var mh$ = FMOD_System_GetNumDrivers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetNumDrivers", system, numdrivers);
            }
            return (int)mh$.invokeExact(system, numdrivers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetDriverInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetDriverInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetDriverInfo$descriptor() {
        return FMOD_System_GetDriverInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels)
     * }
     */
    public static MethodHandle FMOD_System_GetDriverInfo$handle() {
        return FMOD_System_GetDriverInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels)
     * }
     */
    public static MemorySegment FMOD_System_GetDriverInfo$address() {
        return FMOD_System_GetDriverInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels)
     * }
     */
    public static int FMOD_System_GetDriverInfo(MemorySegment system, int id, MemorySegment name, int namelen, MemorySegment guid, MemorySegment systemrate, MemorySegment speakermode, MemorySegment speakermodechannels) {
        var mh$ = FMOD_System_GetDriverInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetDriverInfo", system, id, name, namelen, guid, systemrate, speakermode, speakermodechannels);
            }
            return (int)mh$.invokeExact(system, id, name, namelen, guid, systemrate, speakermode, speakermodechannels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetDriver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetDriver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDriver(FMOD_SYSTEM *system, int driver)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetDriver$descriptor() {
        return FMOD_System_SetDriver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDriver(FMOD_SYSTEM *system, int driver)
     * }
     */
    public static MethodHandle FMOD_System_SetDriver$handle() {
        return FMOD_System_SetDriver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDriver(FMOD_SYSTEM *system, int driver)
     * }
     */
    public static MemorySegment FMOD_System_SetDriver$address() {
        return FMOD_System_SetDriver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDriver(FMOD_SYSTEM *system, int driver)
     * }
     */
    public static int FMOD_System_SetDriver(MemorySegment system, int driver) {
        var mh$ = FMOD_System_SetDriver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetDriver", system, driver);
            }
            return (int)mh$.invokeExact(system, driver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetDriver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetDriver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriver(FMOD_SYSTEM *system, int *driver)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetDriver$descriptor() {
        return FMOD_System_GetDriver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriver(FMOD_SYSTEM *system, int *driver)
     * }
     */
    public static MethodHandle FMOD_System_GetDriver$handle() {
        return FMOD_System_GetDriver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriver(FMOD_SYSTEM *system, int *driver)
     * }
     */
    public static MemorySegment FMOD_System_GetDriver$address() {
        return FMOD_System_GetDriver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDriver(FMOD_SYSTEM *system, int *driver)
     * }
     */
    public static int FMOD_System_GetDriver(MemorySegment system, MemorySegment driver) {
        var mh$ = FMOD_System_GetDriver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetDriver", system, driver);
            }
            return (int)mh$.invokeExact(system, driver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetSoftwareChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetSoftwareChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareChannels(FMOD_SYSTEM *system, int numsoftwarechannels)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetSoftwareChannels$descriptor() {
        return FMOD_System_SetSoftwareChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareChannels(FMOD_SYSTEM *system, int numsoftwarechannels)
     * }
     */
    public static MethodHandle FMOD_System_SetSoftwareChannels$handle() {
        return FMOD_System_SetSoftwareChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareChannels(FMOD_SYSTEM *system, int numsoftwarechannels)
     * }
     */
    public static MemorySegment FMOD_System_SetSoftwareChannels$address() {
        return FMOD_System_SetSoftwareChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareChannels(FMOD_SYSTEM *system, int numsoftwarechannels)
     * }
     */
    public static int FMOD_System_SetSoftwareChannels(MemorySegment system, int numsoftwarechannels) {
        var mh$ = FMOD_System_SetSoftwareChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetSoftwareChannels", system, numsoftwarechannels);
            }
            return (int)mh$.invokeExact(system, numsoftwarechannels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetSoftwareChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetSoftwareChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareChannels(FMOD_SYSTEM *system, int *numsoftwarechannels)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetSoftwareChannels$descriptor() {
        return FMOD_System_GetSoftwareChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareChannels(FMOD_SYSTEM *system, int *numsoftwarechannels)
     * }
     */
    public static MethodHandle FMOD_System_GetSoftwareChannels$handle() {
        return FMOD_System_GetSoftwareChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareChannels(FMOD_SYSTEM *system, int *numsoftwarechannels)
     * }
     */
    public static MemorySegment FMOD_System_GetSoftwareChannels$address() {
        return FMOD_System_GetSoftwareChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareChannels(FMOD_SYSTEM *system, int *numsoftwarechannels)
     * }
     */
    public static int FMOD_System_GetSoftwareChannels(MemorySegment system, MemorySegment numsoftwarechannels) {
        var mh$ = FMOD_System_GetSoftwareChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetSoftwareChannels", system, numsoftwarechannels);
            }
            return (int)mh$.invokeExact(system, numsoftwarechannels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetSoftwareFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetSoftwareFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareFormat(FMOD_SYSTEM *system, int samplerate, FMOD_SPEAKERMODE speakermode, int numrawspeakers)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetSoftwareFormat$descriptor() {
        return FMOD_System_SetSoftwareFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareFormat(FMOD_SYSTEM *system, int samplerate, FMOD_SPEAKERMODE speakermode, int numrawspeakers)
     * }
     */
    public static MethodHandle FMOD_System_SetSoftwareFormat$handle() {
        return FMOD_System_SetSoftwareFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareFormat(FMOD_SYSTEM *system, int samplerate, FMOD_SPEAKERMODE speakermode, int numrawspeakers)
     * }
     */
    public static MemorySegment FMOD_System_SetSoftwareFormat$address() {
        return FMOD_System_SetSoftwareFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSoftwareFormat(FMOD_SYSTEM *system, int samplerate, FMOD_SPEAKERMODE speakermode, int numrawspeakers)
     * }
     */
    public static int FMOD_System_SetSoftwareFormat(MemorySegment system, int samplerate, int speakermode, int numrawspeakers) {
        var mh$ = FMOD_System_SetSoftwareFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetSoftwareFormat", system, samplerate, speakermode, numrawspeakers);
            }
            return (int)mh$.invokeExact(system, samplerate, speakermode, numrawspeakers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetSoftwareFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetSoftwareFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareFormat(FMOD_SYSTEM *system, int *samplerate, FMOD_SPEAKERMODE *speakermode, int *numrawspeakers)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetSoftwareFormat$descriptor() {
        return FMOD_System_GetSoftwareFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareFormat(FMOD_SYSTEM *system, int *samplerate, FMOD_SPEAKERMODE *speakermode, int *numrawspeakers)
     * }
     */
    public static MethodHandle FMOD_System_GetSoftwareFormat$handle() {
        return FMOD_System_GetSoftwareFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareFormat(FMOD_SYSTEM *system, int *samplerate, FMOD_SPEAKERMODE *speakermode, int *numrawspeakers)
     * }
     */
    public static MemorySegment FMOD_System_GetSoftwareFormat$address() {
        return FMOD_System_GetSoftwareFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSoftwareFormat(FMOD_SYSTEM *system, int *samplerate, FMOD_SPEAKERMODE *speakermode, int *numrawspeakers)
     * }
     */
    public static int FMOD_System_GetSoftwareFormat(MemorySegment system, MemorySegment samplerate, MemorySegment speakermode, MemorySegment numrawspeakers) {
        var mh$ = FMOD_System_GetSoftwareFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetSoftwareFormat", system, samplerate, speakermode, numrawspeakers);
            }
            return (int)mh$.invokeExact(system, samplerate, speakermode, numrawspeakers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetDSPBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetDSPBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDSPBufferSize(FMOD_SYSTEM *system, unsigned int bufferlength, int numbuffers)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetDSPBufferSize$descriptor() {
        return FMOD_System_SetDSPBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDSPBufferSize(FMOD_SYSTEM *system, unsigned int bufferlength, int numbuffers)
     * }
     */
    public static MethodHandle FMOD_System_SetDSPBufferSize$handle() {
        return FMOD_System_SetDSPBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDSPBufferSize(FMOD_SYSTEM *system, unsigned int bufferlength, int numbuffers)
     * }
     */
    public static MemorySegment FMOD_System_SetDSPBufferSize$address() {
        return FMOD_System_SetDSPBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetDSPBufferSize(FMOD_SYSTEM *system, unsigned int bufferlength, int numbuffers)
     * }
     */
    public static int FMOD_System_SetDSPBufferSize(MemorySegment system, int bufferlength, int numbuffers) {
        var mh$ = FMOD_System_SetDSPBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetDSPBufferSize", system, bufferlength, numbuffers);
            }
            return (int)mh$.invokeExact(system, bufferlength, numbuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetDSPBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetDSPBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPBufferSize(FMOD_SYSTEM *system, unsigned int *bufferlength, int *numbuffers)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetDSPBufferSize$descriptor() {
        return FMOD_System_GetDSPBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPBufferSize(FMOD_SYSTEM *system, unsigned int *bufferlength, int *numbuffers)
     * }
     */
    public static MethodHandle FMOD_System_GetDSPBufferSize$handle() {
        return FMOD_System_GetDSPBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPBufferSize(FMOD_SYSTEM *system, unsigned int *bufferlength, int *numbuffers)
     * }
     */
    public static MemorySegment FMOD_System_GetDSPBufferSize$address() {
        return FMOD_System_GetDSPBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPBufferSize(FMOD_SYSTEM *system, unsigned int *bufferlength, int *numbuffers)
     * }
     */
    public static int FMOD_System_GetDSPBufferSize(MemorySegment system, MemorySegment bufferlength, MemorySegment numbuffers) {
        var mh$ = FMOD_System_GetDSPBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetDSPBufferSize", system, bufferlength, numbuffers);
            }
            return (int)mh$.invokeExact(system, bufferlength, numbuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetFileSystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetFileSystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek, FMOD_FILE_ASYNCREAD_CALLBACK userasyncread, FMOD_FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetFileSystem$descriptor() {
        return FMOD_System_SetFileSystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek, FMOD_FILE_ASYNCREAD_CALLBACK userasyncread, FMOD_FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign)
     * }
     */
    public static MethodHandle FMOD_System_SetFileSystem$handle() {
        return FMOD_System_SetFileSystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek, FMOD_FILE_ASYNCREAD_CALLBACK userasyncread, FMOD_FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign)
     * }
     */
    public static MemorySegment FMOD_System_SetFileSystem$address() {
        return FMOD_System_SetFileSystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek, FMOD_FILE_ASYNCREAD_CALLBACK userasyncread, FMOD_FILE_ASYNCCANCEL_CALLBACK userasynccancel, int blockalign)
     * }
     */
    public static int FMOD_System_SetFileSystem(MemorySegment system, MemorySegment useropen, MemorySegment userclose, MemorySegment userread, MemorySegment userseek, MemorySegment userasyncread, MemorySegment userasynccancel, int blockalign) {
        var mh$ = FMOD_System_SetFileSystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetFileSystem", system, useropen, userclose, userread, userseek, userasyncread, userasynccancel, blockalign);
            }
            return (int)mh$.invokeExact(system, useropen, userclose, userread, userseek, userasyncread, userasynccancel, blockalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_AttachFileSystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_AttachFileSystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek)
     * }
     */
    public static FunctionDescriptor FMOD_System_AttachFileSystem$descriptor() {
        return FMOD_System_AttachFileSystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek)
     * }
     */
    public static MethodHandle FMOD_System_AttachFileSystem$handle() {
        return FMOD_System_AttachFileSystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek)
     * }
     */
    public static MemorySegment FMOD_System_AttachFileSystem$address() {
        return FMOD_System_AttachFileSystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachFileSystem(FMOD_SYSTEM *system, FMOD_FILE_OPEN_CALLBACK useropen, FMOD_FILE_CLOSE_CALLBACK userclose, FMOD_FILE_READ_CALLBACK userread, FMOD_FILE_SEEK_CALLBACK userseek)
     * }
     */
    public static int FMOD_System_AttachFileSystem(MemorySegment system, MemorySegment useropen, MemorySegment userclose, MemorySegment userread, MemorySegment userseek) {
        var mh$ = FMOD_System_AttachFileSystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_AttachFileSystem", system, useropen, userclose, userread, userseek);
            }
            return (int)mh$.invokeExact(system, useropen, userclose, userread, userseek);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetAdvancedSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetAdvancedSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetAdvancedSettings$descriptor() {
        return FMOD_System_SetAdvancedSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MethodHandle FMOD_System_SetAdvancedSettings$handle() {
        return FMOD_System_SetAdvancedSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MemorySegment FMOD_System_SetAdvancedSettings$address() {
        return FMOD_System_SetAdvancedSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static int FMOD_System_SetAdvancedSettings(MemorySegment system, MemorySegment settings) {
        var mh$ = FMOD_System_SetAdvancedSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetAdvancedSettings", system, settings);
            }
            return (int)mh$.invokeExact(system, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetAdvancedSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetAdvancedSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetAdvancedSettings$descriptor() {
        return FMOD_System_GetAdvancedSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MethodHandle FMOD_System_GetAdvancedSettings$handle() {
        return FMOD_System_GetAdvancedSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static MemorySegment FMOD_System_GetAdvancedSettings$address() {
        return FMOD_System_GetAdvancedSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetAdvancedSettings(FMOD_SYSTEM *system, FMOD_ADVANCEDSETTINGS *settings)
     * }
     */
    public static int FMOD_System_GetAdvancedSettings(MemorySegment system, MemorySegment settings) {
        var mh$ = FMOD_System_GetAdvancedSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetAdvancedSettings", system, settings);
            }
            return (int)mh$.invokeExact(system, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetCallback(FMOD_SYSTEM *system, FMOD_SYSTEM_CALLBACK callback, FMOD_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetCallback$descriptor() {
        return FMOD_System_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetCallback(FMOD_SYSTEM *system, FMOD_SYSTEM_CALLBACK callback, FMOD_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MethodHandle FMOD_System_SetCallback$handle() {
        return FMOD_System_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetCallback(FMOD_SYSTEM *system, FMOD_SYSTEM_CALLBACK callback, FMOD_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static MemorySegment FMOD_System_SetCallback$address() {
        return FMOD_System_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetCallback(FMOD_SYSTEM *system, FMOD_SYSTEM_CALLBACK callback, FMOD_SYSTEM_CALLBACK_TYPE callbackmask)
     * }
     */
    public static int FMOD_System_SetCallback(MemorySegment system, MemorySegment callback, int callbackmask) {
        var mh$ = FMOD_System_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetCallback", system, callback, callbackmask);
            }
            return (int)mh$.invokeExact(system, callback, callbackmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetPluginPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetPluginPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetPluginPath(FMOD_SYSTEM *system, const char *path)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetPluginPath$descriptor() {
        return FMOD_System_SetPluginPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetPluginPath(FMOD_SYSTEM *system, const char *path)
     * }
     */
    public static MethodHandle FMOD_System_SetPluginPath$handle() {
        return FMOD_System_SetPluginPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetPluginPath(FMOD_SYSTEM *system, const char *path)
     * }
     */
    public static MemorySegment FMOD_System_SetPluginPath$address() {
        return FMOD_System_SetPluginPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetPluginPath(FMOD_SYSTEM *system, const char *path)
     * }
     */
    public static int FMOD_System_SetPluginPath(MemorySegment system, MemorySegment path) {
        var mh$ = FMOD_System_SetPluginPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetPluginPath", system, path);
            }
            return (int)mh$.invokeExact(system, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_LoadPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_LoadPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadPlugin(FMOD_SYSTEM *system, const char *filename, unsigned int *handle, unsigned int priority)
     * }
     */
    public static FunctionDescriptor FMOD_System_LoadPlugin$descriptor() {
        return FMOD_System_LoadPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadPlugin(FMOD_SYSTEM *system, const char *filename, unsigned int *handle, unsigned int priority)
     * }
     */
    public static MethodHandle FMOD_System_LoadPlugin$handle() {
        return FMOD_System_LoadPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadPlugin(FMOD_SYSTEM *system, const char *filename, unsigned int *handle, unsigned int priority)
     * }
     */
    public static MemorySegment FMOD_System_LoadPlugin$address() {
        return FMOD_System_LoadPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadPlugin(FMOD_SYSTEM *system, const char *filename, unsigned int *handle, unsigned int priority)
     * }
     */
    public static int FMOD_System_LoadPlugin(MemorySegment system, MemorySegment filename, MemorySegment handle, int priority) {
        var mh$ = FMOD_System_LoadPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_LoadPlugin", system, filename, handle, priority);
            }
            return (int)mh$.invokeExact(system, filename, handle, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_UnloadPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_UnloadPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnloadPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static FunctionDescriptor FMOD_System_UnloadPlugin$descriptor() {
        return FMOD_System_UnloadPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnloadPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static MethodHandle FMOD_System_UnloadPlugin$handle() {
        return FMOD_System_UnloadPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnloadPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static MemorySegment FMOD_System_UnloadPlugin$address() {
        return FMOD_System_UnloadPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnloadPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static int FMOD_System_UnloadPlugin(MemorySegment system, int handle) {
        var mh$ = FMOD_System_UnloadPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_UnloadPlugin", system, handle);
            }
            return (int)mh$.invokeExact(system, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetNumNestedPlugins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetNumNestedPlugins");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumNestedPlugins(FMOD_SYSTEM *system, unsigned int handle, int *count)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetNumNestedPlugins$descriptor() {
        return FMOD_System_GetNumNestedPlugins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumNestedPlugins(FMOD_SYSTEM *system, unsigned int handle, int *count)
     * }
     */
    public static MethodHandle FMOD_System_GetNumNestedPlugins$handle() {
        return FMOD_System_GetNumNestedPlugins.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumNestedPlugins(FMOD_SYSTEM *system, unsigned int handle, int *count)
     * }
     */
    public static MemorySegment FMOD_System_GetNumNestedPlugins$address() {
        return FMOD_System_GetNumNestedPlugins.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumNestedPlugins(FMOD_SYSTEM *system, unsigned int handle, int *count)
     * }
     */
    public static int FMOD_System_GetNumNestedPlugins(MemorySegment system, int handle, MemorySegment count) {
        var mh$ = FMOD_System_GetNumNestedPlugins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetNumNestedPlugins", system, handle, count);
            }
            return (int)mh$.invokeExact(system, handle, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetNestedPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetNestedPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNestedPlugin(FMOD_SYSTEM *system, unsigned int handle, int index, unsigned int *nestedhandle)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetNestedPlugin$descriptor() {
        return FMOD_System_GetNestedPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNestedPlugin(FMOD_SYSTEM *system, unsigned int handle, int index, unsigned int *nestedhandle)
     * }
     */
    public static MethodHandle FMOD_System_GetNestedPlugin$handle() {
        return FMOD_System_GetNestedPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNestedPlugin(FMOD_SYSTEM *system, unsigned int handle, int index, unsigned int *nestedhandle)
     * }
     */
    public static MemorySegment FMOD_System_GetNestedPlugin$address() {
        return FMOD_System_GetNestedPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNestedPlugin(FMOD_SYSTEM *system, unsigned int handle, int index, unsigned int *nestedhandle)
     * }
     */
    public static int FMOD_System_GetNestedPlugin(MemorySegment system, int handle, int index, MemorySegment nestedhandle) {
        var mh$ = FMOD_System_GetNestedPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetNestedPlugin", system, handle, index, nestedhandle);
            }
            return (int)mh$.invokeExact(system, handle, index, nestedhandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetNumPlugins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetNumPlugins");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumPlugins(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int *numplugins)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetNumPlugins$descriptor() {
        return FMOD_System_GetNumPlugins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumPlugins(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int *numplugins)
     * }
     */
    public static MethodHandle FMOD_System_GetNumPlugins$handle() {
        return FMOD_System_GetNumPlugins.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumPlugins(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int *numplugins)
     * }
     */
    public static MemorySegment FMOD_System_GetNumPlugins$address() {
        return FMOD_System_GetNumPlugins.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNumPlugins(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int *numplugins)
     * }
     */
    public static int FMOD_System_GetNumPlugins(MemorySegment system, int plugintype, MemorySegment numplugins) {
        var mh$ = FMOD_System_GetNumPlugins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetNumPlugins", system, plugintype, numplugins);
            }
            return (int)mh$.invokeExact(system, plugintype, numplugins);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetPluginHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetPluginHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginHandle(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int index, unsigned int *handle)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetPluginHandle$descriptor() {
        return FMOD_System_GetPluginHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginHandle(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int index, unsigned int *handle)
     * }
     */
    public static MethodHandle FMOD_System_GetPluginHandle$handle() {
        return FMOD_System_GetPluginHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginHandle(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int index, unsigned int *handle)
     * }
     */
    public static MemorySegment FMOD_System_GetPluginHandle$address() {
        return FMOD_System_GetPluginHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginHandle(FMOD_SYSTEM *system, FMOD_PLUGINTYPE plugintype, int index, unsigned int *handle)
     * }
     */
    public static int FMOD_System_GetPluginHandle(MemorySegment system, int plugintype, int index, MemorySegment handle) {
        var mh$ = FMOD_System_GetPluginHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetPluginHandle", system, plugintype, index, handle);
            }
            return (int)mh$.invokeExact(system, plugintype, index, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetPluginInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetPluginInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginInfo(FMOD_SYSTEM *system, unsigned int handle, FMOD_PLUGINTYPE *plugintype, char *name, int namelen, unsigned int *version)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetPluginInfo$descriptor() {
        return FMOD_System_GetPluginInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginInfo(FMOD_SYSTEM *system, unsigned int handle, FMOD_PLUGINTYPE *plugintype, char *name, int namelen, unsigned int *version)
     * }
     */
    public static MethodHandle FMOD_System_GetPluginInfo$handle() {
        return FMOD_System_GetPluginInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginInfo(FMOD_SYSTEM *system, unsigned int handle, FMOD_PLUGINTYPE *plugintype, char *name, int namelen, unsigned int *version)
     * }
     */
    public static MemorySegment FMOD_System_GetPluginInfo$address() {
        return FMOD_System_GetPluginInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetPluginInfo(FMOD_SYSTEM *system, unsigned int handle, FMOD_PLUGINTYPE *plugintype, char *name, int namelen, unsigned int *version)
     * }
     */
    public static int FMOD_System_GetPluginInfo(MemorySegment system, int handle, MemorySegment plugintype, MemorySegment name, int namelen, MemorySegment version) {
        var mh$ = FMOD_System_GetPluginInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetPluginInfo", system, handle, plugintype, name, namelen, version);
            }
            return (int)mh$.invokeExact(system, handle, plugintype, name, namelen, version);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetOutputByPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetOutputByPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutputByPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetOutputByPlugin$descriptor() {
        return FMOD_System_SetOutputByPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutputByPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static MethodHandle FMOD_System_SetOutputByPlugin$handle() {
        return FMOD_System_SetOutputByPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutputByPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static MemorySegment FMOD_System_SetOutputByPlugin$address() {
        return FMOD_System_SetOutputByPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetOutputByPlugin(FMOD_SYSTEM *system, unsigned int handle)
     * }
     */
    public static int FMOD_System_SetOutputByPlugin(MemorySegment system, int handle) {
        var mh$ = FMOD_System_SetOutputByPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetOutputByPlugin", system, handle);
            }
            return (int)mh$.invokeExact(system, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetOutputByPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetOutputByPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputByPlugin(FMOD_SYSTEM *system, unsigned int *handle)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetOutputByPlugin$descriptor() {
        return FMOD_System_GetOutputByPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputByPlugin(FMOD_SYSTEM *system, unsigned int *handle)
     * }
     */
    public static MethodHandle FMOD_System_GetOutputByPlugin$handle() {
        return FMOD_System_GetOutputByPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputByPlugin(FMOD_SYSTEM *system, unsigned int *handle)
     * }
     */
    public static MemorySegment FMOD_System_GetOutputByPlugin$address() {
        return FMOD_System_GetOutputByPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputByPlugin(FMOD_SYSTEM *system, unsigned int *handle)
     * }
     */
    public static int FMOD_System_GetOutputByPlugin(MemorySegment system, MemorySegment handle) {
        var mh$ = FMOD_System_GetOutputByPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetOutputByPlugin", system, handle);
            }
            return (int)mh$.invokeExact(system, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateDSPByPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateDSPByPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByPlugin(FMOD_SYSTEM *system, unsigned int handle, FMOD_DSP **dsp)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateDSPByPlugin$descriptor() {
        return FMOD_System_CreateDSPByPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByPlugin(FMOD_SYSTEM *system, unsigned int handle, FMOD_DSP **dsp)
     * }
     */
    public static MethodHandle FMOD_System_CreateDSPByPlugin$handle() {
        return FMOD_System_CreateDSPByPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByPlugin(FMOD_SYSTEM *system, unsigned int handle, FMOD_DSP **dsp)
     * }
     */
    public static MemorySegment FMOD_System_CreateDSPByPlugin$address() {
        return FMOD_System_CreateDSPByPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByPlugin(FMOD_SYSTEM *system, unsigned int handle, FMOD_DSP **dsp)
     * }
     */
    public static int FMOD_System_CreateDSPByPlugin(MemorySegment system, int handle, MemorySegment dsp) {
        var mh$ = FMOD_System_CreateDSPByPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateDSPByPlugin", system, handle, dsp);
            }
            return (int)mh$.invokeExact(system, handle, dsp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetDSPInfoByPlugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetDSPInfoByPlugin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByPlugin(FMOD_SYSTEM *system, unsigned int handle, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetDSPInfoByPlugin$descriptor() {
        return FMOD_System_GetDSPInfoByPlugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByPlugin(FMOD_SYSTEM *system, unsigned int handle, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static MethodHandle FMOD_System_GetDSPInfoByPlugin$handle() {
        return FMOD_System_GetDSPInfoByPlugin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByPlugin(FMOD_SYSTEM *system, unsigned int handle, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static MemorySegment FMOD_System_GetDSPInfoByPlugin$address() {
        return FMOD_System_GetDSPInfoByPlugin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByPlugin(FMOD_SYSTEM *system, unsigned int handle, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static int FMOD_System_GetDSPInfoByPlugin(MemorySegment system, int handle, MemorySegment description) {
        var mh$ = FMOD_System_GetDSPInfoByPlugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetDSPInfoByPlugin", system, handle, description);
            }
            return (int)mh$.invokeExact(system, handle, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_RegisterCodec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_RegisterCodec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterCodec(FMOD_SYSTEM *system, FMOD_CODEC_DESCRIPTION *description, unsigned int *handle, unsigned int priority)
     * }
     */
    public static FunctionDescriptor FMOD_System_RegisterCodec$descriptor() {
        return FMOD_System_RegisterCodec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterCodec(FMOD_SYSTEM *system, FMOD_CODEC_DESCRIPTION *description, unsigned int *handle, unsigned int priority)
     * }
     */
    public static MethodHandle FMOD_System_RegisterCodec$handle() {
        return FMOD_System_RegisterCodec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterCodec(FMOD_SYSTEM *system, FMOD_CODEC_DESCRIPTION *description, unsigned int *handle, unsigned int priority)
     * }
     */
    public static MemorySegment FMOD_System_RegisterCodec$address() {
        return FMOD_System_RegisterCodec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterCodec(FMOD_SYSTEM *system, FMOD_CODEC_DESCRIPTION *description, unsigned int *handle, unsigned int priority)
     * }
     */
    public static int FMOD_System_RegisterCodec(MemorySegment system, MemorySegment description, MemorySegment handle, int priority) {
        var mh$ = FMOD_System_RegisterCodec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_RegisterCodec", system, description, handle, priority);
            }
            return (int)mh$.invokeExact(system, description, handle, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_RegisterDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_RegisterDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static FunctionDescriptor FMOD_System_RegisterDSP$descriptor() {
        return FMOD_System_RegisterDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static MethodHandle FMOD_System_RegisterDSP$handle() {
        return FMOD_System_RegisterDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static MemorySegment FMOD_System_RegisterDSP$address() {
        return FMOD_System_RegisterDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static int FMOD_System_RegisterDSP(MemorySegment system, MemorySegment description, MemorySegment handle) {
        var mh$ = FMOD_System_RegisterDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_RegisterDSP", system, description, handle);
            }
            return (int)mh$.invokeExact(system, description, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_RegisterOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_RegisterOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterOutput(FMOD_SYSTEM *system, const FMOD_OUTPUT_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static FunctionDescriptor FMOD_System_RegisterOutput$descriptor() {
        return FMOD_System_RegisterOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterOutput(FMOD_SYSTEM *system, const FMOD_OUTPUT_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static MethodHandle FMOD_System_RegisterOutput$handle() {
        return FMOD_System_RegisterOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterOutput(FMOD_SYSTEM *system, const FMOD_OUTPUT_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static MemorySegment FMOD_System_RegisterOutput$address() {
        return FMOD_System_RegisterOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RegisterOutput(FMOD_SYSTEM *system, const FMOD_OUTPUT_DESCRIPTION *description, unsigned int *handle)
     * }
     */
    public static int FMOD_System_RegisterOutput(MemorySegment system, MemorySegment description, MemorySegment handle) {
        var mh$ = FMOD_System_RegisterOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_RegisterOutput", system, description, handle);
            }
            return (int)mh$.invokeExact(system, description, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Init(FMOD_SYSTEM *system, int maxchannels, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static FunctionDescriptor FMOD_System_Init$descriptor() {
        return FMOD_System_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Init(FMOD_SYSTEM *system, int maxchannels, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static MethodHandle FMOD_System_Init$handle() {
        return FMOD_System_Init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Init(FMOD_SYSTEM *system, int maxchannels, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static MemorySegment FMOD_System_Init$address() {
        return FMOD_System_Init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Init(FMOD_SYSTEM *system, int maxchannels, FMOD_INITFLAGS flags, void *extradriverdata)
     * }
     */
    public static int FMOD_System_Init(MemorySegment system, int maxchannels, int flags, MemorySegment extradriverdata) {
        var mh$ = FMOD_System_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Init", system, maxchannels, flags, extradriverdata);
            }
            return (int)mh$.invokeExact(system, maxchannels, flags, extradriverdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Close(FMOD_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_System_Close$descriptor() {
        return FMOD_System_Close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Close(FMOD_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_System_Close$handle() {
        return FMOD_System_Close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Close(FMOD_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_System_Close$address() {
        return FMOD_System_Close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Close(FMOD_SYSTEM *system)
     * }
     */
    public static int FMOD_System_Close(MemorySegment system) {
        var mh$ = FMOD_System_Close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Close", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Update(FMOD_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_System_Update$descriptor() {
        return FMOD_System_Update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Update(FMOD_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_System_Update$handle() {
        return FMOD_System_Update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Update(FMOD_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_System_Update$address() {
        return FMOD_System_Update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Update(FMOD_SYSTEM *system)
     * }
     */
    public static int FMOD_System_Update(MemorySegment system) {
        var mh$ = FMOD_System_Update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Update", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetSpeakerPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetSpeakerPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float x, float y, FMOD_BOOL active)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetSpeakerPosition$descriptor() {
        return FMOD_System_SetSpeakerPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float x, float y, FMOD_BOOL active)
     * }
     */
    public static MethodHandle FMOD_System_SetSpeakerPosition$handle() {
        return FMOD_System_SetSpeakerPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float x, float y, FMOD_BOOL active)
     * }
     */
    public static MemorySegment FMOD_System_SetSpeakerPosition$address() {
        return FMOD_System_SetSpeakerPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float x, float y, FMOD_BOOL active)
     * }
     */
    public static int FMOD_System_SetSpeakerPosition(MemorySegment system, int speaker, float x, float y, int active) {
        var mh$ = FMOD_System_SetSpeakerPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetSpeakerPosition", system, speaker, x, y, active);
            }
            return (int)mh$.invokeExact(system, speaker, x, y, active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetSpeakerPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetSpeakerPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float *x, float *y, FMOD_BOOL *active)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetSpeakerPosition$descriptor() {
        return FMOD_System_GetSpeakerPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float *x, float *y, FMOD_BOOL *active)
     * }
     */
    public static MethodHandle FMOD_System_GetSpeakerPosition$handle() {
        return FMOD_System_GetSpeakerPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float *x, float *y, FMOD_BOOL *active)
     * }
     */
    public static MemorySegment FMOD_System_GetSpeakerPosition$address() {
        return FMOD_System_GetSpeakerPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerPosition(FMOD_SYSTEM *system, FMOD_SPEAKER speaker, float *x, float *y, FMOD_BOOL *active)
     * }
     */
    public static int FMOD_System_GetSpeakerPosition(MemorySegment system, int speaker, MemorySegment x, MemorySegment y, MemorySegment active) {
        var mh$ = FMOD_System_GetSpeakerPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetSpeakerPosition", system, speaker, x, y, active);
            }
            return (int)mh$.invokeExact(system, speaker, x, y, active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetStreamBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetStreamBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetStreamBufferSize(FMOD_SYSTEM *system, unsigned int filebuffersize, FMOD_TIMEUNIT filebuffersizetype)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetStreamBufferSize$descriptor() {
        return FMOD_System_SetStreamBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetStreamBufferSize(FMOD_SYSTEM *system, unsigned int filebuffersize, FMOD_TIMEUNIT filebuffersizetype)
     * }
     */
    public static MethodHandle FMOD_System_SetStreamBufferSize$handle() {
        return FMOD_System_SetStreamBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetStreamBufferSize(FMOD_SYSTEM *system, unsigned int filebuffersize, FMOD_TIMEUNIT filebuffersizetype)
     * }
     */
    public static MemorySegment FMOD_System_SetStreamBufferSize$address() {
        return FMOD_System_SetStreamBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetStreamBufferSize(FMOD_SYSTEM *system, unsigned int filebuffersize, FMOD_TIMEUNIT filebuffersizetype)
     * }
     */
    public static int FMOD_System_SetStreamBufferSize(MemorySegment system, int filebuffersize, int filebuffersizetype) {
        var mh$ = FMOD_System_SetStreamBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetStreamBufferSize", system, filebuffersize, filebuffersizetype);
            }
            return (int)mh$.invokeExact(system, filebuffersize, filebuffersizetype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetStreamBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetStreamBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetStreamBufferSize(FMOD_SYSTEM *system, unsigned int *filebuffersize, FMOD_TIMEUNIT *filebuffersizetype)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetStreamBufferSize$descriptor() {
        return FMOD_System_GetStreamBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetStreamBufferSize(FMOD_SYSTEM *system, unsigned int *filebuffersize, FMOD_TIMEUNIT *filebuffersizetype)
     * }
     */
    public static MethodHandle FMOD_System_GetStreamBufferSize$handle() {
        return FMOD_System_GetStreamBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetStreamBufferSize(FMOD_SYSTEM *system, unsigned int *filebuffersize, FMOD_TIMEUNIT *filebuffersizetype)
     * }
     */
    public static MemorySegment FMOD_System_GetStreamBufferSize$address() {
        return FMOD_System_GetStreamBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetStreamBufferSize(FMOD_SYSTEM *system, unsigned int *filebuffersize, FMOD_TIMEUNIT *filebuffersizetype)
     * }
     */
    public static int FMOD_System_GetStreamBufferSize(MemorySegment system, MemorySegment filebuffersize, MemorySegment filebuffersizetype) {
        var mh$ = FMOD_System_GetStreamBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetStreamBufferSize", system, filebuffersize, filebuffersizetype);
            }
            return (int)mh$.invokeExact(system, filebuffersize, filebuffersizetype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Set3DSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Set3DSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DSettings(FMOD_SYSTEM *system, float dopplerscale, float distancefactor, float rolloffscale)
     * }
     */
    public static FunctionDescriptor FMOD_System_Set3DSettings$descriptor() {
        return FMOD_System_Set3DSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DSettings(FMOD_SYSTEM *system, float dopplerscale, float distancefactor, float rolloffscale)
     * }
     */
    public static MethodHandle FMOD_System_Set3DSettings$handle() {
        return FMOD_System_Set3DSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DSettings(FMOD_SYSTEM *system, float dopplerscale, float distancefactor, float rolloffscale)
     * }
     */
    public static MemorySegment FMOD_System_Set3DSettings$address() {
        return FMOD_System_Set3DSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DSettings(FMOD_SYSTEM *system, float dopplerscale, float distancefactor, float rolloffscale)
     * }
     */
    public static int FMOD_System_Set3DSettings(MemorySegment system, float dopplerscale, float distancefactor, float rolloffscale) {
        var mh$ = FMOD_System_Set3DSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Set3DSettings", system, dopplerscale, distancefactor, rolloffscale);
            }
            return (int)mh$.invokeExact(system, dopplerscale, distancefactor, rolloffscale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Get3DSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Get3DSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DSettings(FMOD_SYSTEM *system, float *dopplerscale, float *distancefactor, float *rolloffscale)
     * }
     */
    public static FunctionDescriptor FMOD_System_Get3DSettings$descriptor() {
        return FMOD_System_Get3DSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DSettings(FMOD_SYSTEM *system, float *dopplerscale, float *distancefactor, float *rolloffscale)
     * }
     */
    public static MethodHandle FMOD_System_Get3DSettings$handle() {
        return FMOD_System_Get3DSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DSettings(FMOD_SYSTEM *system, float *dopplerscale, float *distancefactor, float *rolloffscale)
     * }
     */
    public static MemorySegment FMOD_System_Get3DSettings$address() {
        return FMOD_System_Get3DSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DSettings(FMOD_SYSTEM *system, float *dopplerscale, float *distancefactor, float *rolloffscale)
     * }
     */
    public static int FMOD_System_Get3DSettings(MemorySegment system, MemorySegment dopplerscale, MemorySegment distancefactor, MemorySegment rolloffscale) {
        var mh$ = FMOD_System_Get3DSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Get3DSettings", system, dopplerscale, distancefactor, rolloffscale);
            }
            return (int)mh$.invokeExact(system, dopplerscale, distancefactor, rolloffscale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Set3DNumListeners {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Set3DNumListeners");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DNumListeners(FMOD_SYSTEM *system, int numlisteners)
     * }
     */
    public static FunctionDescriptor FMOD_System_Set3DNumListeners$descriptor() {
        return FMOD_System_Set3DNumListeners.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DNumListeners(FMOD_SYSTEM *system, int numlisteners)
     * }
     */
    public static MethodHandle FMOD_System_Set3DNumListeners$handle() {
        return FMOD_System_Set3DNumListeners.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DNumListeners(FMOD_SYSTEM *system, int numlisteners)
     * }
     */
    public static MemorySegment FMOD_System_Set3DNumListeners$address() {
        return FMOD_System_Set3DNumListeners.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DNumListeners(FMOD_SYSTEM *system, int numlisteners)
     * }
     */
    public static int FMOD_System_Set3DNumListeners(MemorySegment system, int numlisteners) {
        var mh$ = FMOD_System_Set3DNumListeners.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Set3DNumListeners", system, numlisteners);
            }
            return (int)mh$.invokeExact(system, numlisteners);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Get3DNumListeners {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Get3DNumListeners");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DNumListeners(FMOD_SYSTEM *system, int *numlisteners)
     * }
     */
    public static FunctionDescriptor FMOD_System_Get3DNumListeners$descriptor() {
        return FMOD_System_Get3DNumListeners.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DNumListeners(FMOD_SYSTEM *system, int *numlisteners)
     * }
     */
    public static MethodHandle FMOD_System_Get3DNumListeners$handle() {
        return FMOD_System_Get3DNumListeners.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DNumListeners(FMOD_SYSTEM *system, int *numlisteners)
     * }
     */
    public static MemorySegment FMOD_System_Get3DNumListeners$address() {
        return FMOD_System_Get3DNumListeners.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DNumListeners(FMOD_SYSTEM *system, int *numlisteners)
     * }
     */
    public static int FMOD_System_Get3DNumListeners(MemorySegment system, MemorySegment numlisteners) {
        var mh$ = FMOD_System_Get3DNumListeners.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Get3DNumListeners", system, numlisteners);
            }
            return (int)mh$.invokeExact(system, numlisteners);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Set3DListenerAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Set3DListenerAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DListenerAttributes(FMOD_SYSTEM *system, int listener, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static FunctionDescriptor FMOD_System_Set3DListenerAttributes$descriptor() {
        return FMOD_System_Set3DListenerAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DListenerAttributes(FMOD_SYSTEM *system, int listener, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static MethodHandle FMOD_System_Set3DListenerAttributes$handle() {
        return FMOD_System_Set3DListenerAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DListenerAttributes(FMOD_SYSTEM *system, int listener, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static MemorySegment FMOD_System_Set3DListenerAttributes$address() {
        return FMOD_System_Set3DListenerAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DListenerAttributes(FMOD_SYSTEM *system, int listener, const FMOD_VECTOR *pos, const FMOD_VECTOR *vel, const FMOD_VECTOR *forward, const FMOD_VECTOR *up)
     * }
     */
    public static int FMOD_System_Set3DListenerAttributes(MemorySegment system, int listener, MemorySegment pos, MemorySegment vel, MemorySegment forward, MemorySegment up) {
        var mh$ = FMOD_System_Set3DListenerAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Set3DListenerAttributes", system, listener, pos, vel, forward, up);
            }
            return (int)mh$.invokeExact(system, listener, pos, vel, forward, up);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Get3DListenerAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Get3DListenerAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DListenerAttributes(FMOD_SYSTEM *system, int listener, FMOD_VECTOR *pos, FMOD_VECTOR *vel, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static FunctionDescriptor FMOD_System_Get3DListenerAttributes$descriptor() {
        return FMOD_System_Get3DListenerAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DListenerAttributes(FMOD_SYSTEM *system, int listener, FMOD_VECTOR *pos, FMOD_VECTOR *vel, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static MethodHandle FMOD_System_Get3DListenerAttributes$handle() {
        return FMOD_System_Get3DListenerAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DListenerAttributes(FMOD_SYSTEM *system, int listener, FMOD_VECTOR *pos, FMOD_VECTOR *vel, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static MemorySegment FMOD_System_Get3DListenerAttributes$address() {
        return FMOD_System_Get3DListenerAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Get3DListenerAttributes(FMOD_SYSTEM *system, int listener, FMOD_VECTOR *pos, FMOD_VECTOR *vel, FMOD_VECTOR *forward, FMOD_VECTOR *up)
     * }
     */
    public static int FMOD_System_Get3DListenerAttributes(MemorySegment system, int listener, MemorySegment pos, MemorySegment vel, MemorySegment forward, MemorySegment up) {
        var mh$ = FMOD_System_Get3DListenerAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Get3DListenerAttributes", system, listener, pos, vel, forward, up);
            }
            return (int)mh$.invokeExact(system, listener, pos, vel, forward, up);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_Set3DRolloffCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_Set3DRolloffCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DRolloffCallback(FMOD_SYSTEM *system, FMOD_3D_ROLLOFF_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_System_Set3DRolloffCallback$descriptor() {
        return FMOD_System_Set3DRolloffCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DRolloffCallback(FMOD_SYSTEM *system, FMOD_3D_ROLLOFF_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_System_Set3DRolloffCallback$handle() {
        return FMOD_System_Set3DRolloffCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DRolloffCallback(FMOD_SYSTEM *system, FMOD_3D_ROLLOFF_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_System_Set3DRolloffCallback$address() {
        return FMOD_System_Set3DRolloffCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_Set3DRolloffCallback(FMOD_SYSTEM *system, FMOD_3D_ROLLOFF_CALLBACK callback)
     * }
     */
    public static int FMOD_System_Set3DRolloffCallback(MemorySegment system, MemorySegment callback) {
        var mh$ = FMOD_System_Set3DRolloffCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_Set3DRolloffCallback", system, callback);
            }
            return (int)mh$.invokeExact(system, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_MixerSuspend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_MixerSuspend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerSuspend(FMOD_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_System_MixerSuspend$descriptor() {
        return FMOD_System_MixerSuspend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerSuspend(FMOD_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_System_MixerSuspend$handle() {
        return FMOD_System_MixerSuspend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerSuspend(FMOD_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_System_MixerSuspend$address() {
        return FMOD_System_MixerSuspend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerSuspend(FMOD_SYSTEM *system)
     * }
     */
    public static int FMOD_System_MixerSuspend(MemorySegment system) {
        var mh$ = FMOD_System_MixerSuspend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_MixerSuspend", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_MixerResume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_MixerResume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerResume(FMOD_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_System_MixerResume$descriptor() {
        return FMOD_System_MixerResume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerResume(FMOD_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_System_MixerResume$handle() {
        return FMOD_System_MixerResume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerResume(FMOD_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_System_MixerResume$address() {
        return FMOD_System_MixerResume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_MixerResume(FMOD_SYSTEM *system)
     * }
     */
    public static int FMOD_System_MixerResume(MemorySegment system) {
        var mh$ = FMOD_System_MixerResume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_MixerResume", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetDefaultMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetDefaultMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDefaultMixMatrix(FMOD_SYSTEM *system, FMOD_SPEAKERMODE sourcespeakermode, FMOD_SPEAKERMODE targetspeakermode, float *matrix, int matrixhop)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetDefaultMixMatrix$descriptor() {
        return FMOD_System_GetDefaultMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDefaultMixMatrix(FMOD_SYSTEM *system, FMOD_SPEAKERMODE sourcespeakermode, FMOD_SPEAKERMODE targetspeakermode, float *matrix, int matrixhop)
     * }
     */
    public static MethodHandle FMOD_System_GetDefaultMixMatrix$handle() {
        return FMOD_System_GetDefaultMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDefaultMixMatrix(FMOD_SYSTEM *system, FMOD_SPEAKERMODE sourcespeakermode, FMOD_SPEAKERMODE targetspeakermode, float *matrix, int matrixhop)
     * }
     */
    public static MemorySegment FMOD_System_GetDefaultMixMatrix$address() {
        return FMOD_System_GetDefaultMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDefaultMixMatrix(FMOD_SYSTEM *system, FMOD_SPEAKERMODE sourcespeakermode, FMOD_SPEAKERMODE targetspeakermode, float *matrix, int matrixhop)
     * }
     */
    public static int FMOD_System_GetDefaultMixMatrix(MemorySegment system, int sourcespeakermode, int targetspeakermode, MemorySegment matrix, int matrixhop) {
        var mh$ = FMOD_System_GetDefaultMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetDefaultMixMatrix", system, sourcespeakermode, targetspeakermode, matrix, matrixhop);
            }
            return (int)mh$.invokeExact(system, sourcespeakermode, targetspeakermode, matrix, matrixhop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetSpeakerModeChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetSpeakerModeChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerModeChannels(FMOD_SYSTEM *system, FMOD_SPEAKERMODE mode, int *channels)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetSpeakerModeChannels$descriptor() {
        return FMOD_System_GetSpeakerModeChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerModeChannels(FMOD_SYSTEM *system, FMOD_SPEAKERMODE mode, int *channels)
     * }
     */
    public static MethodHandle FMOD_System_GetSpeakerModeChannels$handle() {
        return FMOD_System_GetSpeakerModeChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerModeChannels(FMOD_SYSTEM *system, FMOD_SPEAKERMODE mode, int *channels)
     * }
     */
    public static MemorySegment FMOD_System_GetSpeakerModeChannels$address() {
        return FMOD_System_GetSpeakerModeChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetSpeakerModeChannels(FMOD_SYSTEM *system, FMOD_SPEAKERMODE mode, int *channels)
     * }
     */
    public static int FMOD_System_GetSpeakerModeChannels(MemorySegment system, int mode, MemorySegment channels) {
        var mh$ = FMOD_System_GetSpeakerModeChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetSpeakerModeChannels", system, mode, channels);
            }
            return (int)mh$.invokeExact(system, mode, channels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetVersion(FMOD_SYSTEM *system, unsigned int *version, unsigned int *buildnumber)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetVersion$descriptor() {
        return FMOD_System_GetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetVersion(FMOD_SYSTEM *system, unsigned int *version, unsigned int *buildnumber)
     * }
     */
    public static MethodHandle FMOD_System_GetVersion$handle() {
        return FMOD_System_GetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetVersion(FMOD_SYSTEM *system, unsigned int *version, unsigned int *buildnumber)
     * }
     */
    public static MemorySegment FMOD_System_GetVersion$address() {
        return FMOD_System_GetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetVersion(FMOD_SYSTEM *system, unsigned int *version, unsigned int *buildnumber)
     * }
     */
    public static int FMOD_System_GetVersion(MemorySegment system, MemorySegment version, MemorySegment buildnumber) {
        var mh$ = FMOD_System_GetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetVersion", system, version, buildnumber);
            }
            return (int)mh$.invokeExact(system, version, buildnumber);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetOutputHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetOutputHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputHandle(FMOD_SYSTEM *system, void **handle)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetOutputHandle$descriptor() {
        return FMOD_System_GetOutputHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputHandle(FMOD_SYSTEM *system, void **handle)
     * }
     */
    public static MethodHandle FMOD_System_GetOutputHandle$handle() {
        return FMOD_System_GetOutputHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputHandle(FMOD_SYSTEM *system, void **handle)
     * }
     */
    public static MemorySegment FMOD_System_GetOutputHandle$address() {
        return FMOD_System_GetOutputHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetOutputHandle(FMOD_SYSTEM *system, void **handle)
     * }
     */
    public static int FMOD_System_GetOutputHandle(MemorySegment system, MemorySegment handle) {
        var mh$ = FMOD_System_GetOutputHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetOutputHandle", system, handle);
            }
            return (int)mh$.invokeExact(system, handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetChannelsPlaying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetChannelsPlaying");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannelsPlaying(FMOD_SYSTEM *system, int *channels, int *realchannels)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetChannelsPlaying$descriptor() {
        return FMOD_System_GetChannelsPlaying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannelsPlaying(FMOD_SYSTEM *system, int *channels, int *realchannels)
     * }
     */
    public static MethodHandle FMOD_System_GetChannelsPlaying$handle() {
        return FMOD_System_GetChannelsPlaying.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannelsPlaying(FMOD_SYSTEM *system, int *channels, int *realchannels)
     * }
     */
    public static MemorySegment FMOD_System_GetChannelsPlaying$address() {
        return FMOD_System_GetChannelsPlaying.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannelsPlaying(FMOD_SYSTEM *system, int *channels, int *realchannels)
     * }
     */
    public static int FMOD_System_GetChannelsPlaying(MemorySegment system, MemorySegment channels, MemorySegment realchannels) {
        var mh$ = FMOD_System_GetChannelsPlaying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetChannelsPlaying", system, channels, realchannels);
            }
            return (int)mh$.invokeExact(system, channels, realchannels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetCPUUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetCPUUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetCPUUsage(FMOD_SYSTEM *system, FMOD_CPU_USAGE *usage)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetCPUUsage$descriptor() {
        return FMOD_System_GetCPUUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetCPUUsage(FMOD_SYSTEM *system, FMOD_CPU_USAGE *usage)
     * }
     */
    public static MethodHandle FMOD_System_GetCPUUsage$handle() {
        return FMOD_System_GetCPUUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetCPUUsage(FMOD_SYSTEM *system, FMOD_CPU_USAGE *usage)
     * }
     */
    public static MemorySegment FMOD_System_GetCPUUsage$address() {
        return FMOD_System_GetCPUUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetCPUUsage(FMOD_SYSTEM *system, FMOD_CPU_USAGE *usage)
     * }
     */
    public static int FMOD_System_GetCPUUsage(MemorySegment system, MemorySegment usage) {
        var mh$ = FMOD_System_GetCPUUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetCPUUsage", system, usage);
            }
            return (int)mh$.invokeExact(system, usage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetFileUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetFileUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetFileUsage(FMOD_SYSTEM *system, long long *sampleBytesRead, long long *streamBytesRead, long long *otherBytesRead)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetFileUsage$descriptor() {
        return FMOD_System_GetFileUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetFileUsage(FMOD_SYSTEM *system, long long *sampleBytesRead, long long *streamBytesRead, long long *otherBytesRead)
     * }
     */
    public static MethodHandle FMOD_System_GetFileUsage$handle() {
        return FMOD_System_GetFileUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetFileUsage(FMOD_SYSTEM *system, long long *sampleBytesRead, long long *streamBytesRead, long long *otherBytesRead)
     * }
     */
    public static MemorySegment FMOD_System_GetFileUsage$address() {
        return FMOD_System_GetFileUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetFileUsage(FMOD_SYSTEM *system, long long *sampleBytesRead, long long *streamBytesRead, long long *otherBytesRead)
     * }
     */
    public static int FMOD_System_GetFileUsage(MemorySegment system, MemorySegment sampleBytesRead, MemorySegment streamBytesRead, MemorySegment otherBytesRead) {
        var mh$ = FMOD_System_GetFileUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetFileUsage", system, sampleBytesRead, streamBytesRead, otherBytesRead);
            }
            return (int)mh$.invokeExact(system, sampleBytesRead, streamBytesRead, otherBytesRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateSound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateSound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSound(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateSound$descriptor() {
        return FMOD_System_CreateSound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSound(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static MethodHandle FMOD_System_CreateSound$handle() {
        return FMOD_System_CreateSound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSound(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static MemorySegment FMOD_System_CreateSound$address() {
        return FMOD_System_CreateSound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSound(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static int FMOD_System_CreateSound(MemorySegment system, MemorySegment name_or_data, int mode, MemorySegment exinfo, MemorySegment sound) {
        var mh$ = FMOD_System_CreateSound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateSound", system, name_or_data, mode, exinfo, sound);
            }
            return (int)mh$.invokeExact(system, name_or_data, mode, exinfo, sound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateStream(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateStream$descriptor() {
        return FMOD_System_CreateStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateStream(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static MethodHandle FMOD_System_CreateStream$handle() {
        return FMOD_System_CreateStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateStream(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static MemorySegment FMOD_System_CreateStream$address() {
        return FMOD_System_CreateStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateStream(FMOD_SYSTEM *system, const char *name_or_data, FMOD_MODE mode, FMOD_CREATESOUNDEXINFO *exinfo, FMOD_SOUND **sound)
     * }
     */
    public static int FMOD_System_CreateStream(MemorySegment system, MemorySegment name_or_data, int mode, MemorySegment exinfo, MemorySegment sound) {
        var mh$ = FMOD_System_CreateStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateStream", system, name_or_data, mode, exinfo, sound);
            }
            return (int)mh$.invokeExact(system, name_or_data, mode, exinfo, sound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, FMOD_DSP **dsp)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateDSP$descriptor() {
        return FMOD_System_CreateDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, FMOD_DSP **dsp)
     * }
     */
    public static MethodHandle FMOD_System_CreateDSP$handle() {
        return FMOD_System_CreateDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, FMOD_DSP **dsp)
     * }
     */
    public static MemorySegment FMOD_System_CreateDSP$address() {
        return FMOD_System_CreateDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSP(FMOD_SYSTEM *system, const FMOD_DSP_DESCRIPTION *description, FMOD_DSP **dsp)
     * }
     */
    public static int FMOD_System_CreateDSP(MemorySegment system, MemorySegment description, MemorySegment dsp) {
        var mh$ = FMOD_System_CreateDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateDSP", system, description, dsp);
            }
            return (int)mh$.invokeExact(system, description, dsp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateDSPByType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateDSPByType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, FMOD_DSP **dsp)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateDSPByType$descriptor() {
        return FMOD_System_CreateDSPByType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, FMOD_DSP **dsp)
     * }
     */
    public static MethodHandle FMOD_System_CreateDSPByType$handle() {
        return FMOD_System_CreateDSPByType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, FMOD_DSP **dsp)
     * }
     */
    public static MemorySegment FMOD_System_CreateDSPByType$address() {
        return FMOD_System_CreateDSPByType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, FMOD_DSP **dsp)
     * }
     */
    public static int FMOD_System_CreateDSPByType(MemorySegment system, int type, MemorySegment dsp) {
        var mh$ = FMOD_System_CreateDSPByType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateDSPByType", system, type, dsp);
            }
            return (int)mh$.invokeExact(system, type, dsp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateDSPConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateDSPConnection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPConnection(FMOD_SYSTEM *system, FMOD_DSPCONNECTION_TYPE type, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateDSPConnection$descriptor() {
        return FMOD_System_CreateDSPConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPConnection(FMOD_SYSTEM *system, FMOD_DSPCONNECTION_TYPE type, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static MethodHandle FMOD_System_CreateDSPConnection$handle() {
        return FMOD_System_CreateDSPConnection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPConnection(FMOD_SYSTEM *system, FMOD_DSPCONNECTION_TYPE type, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static MemorySegment FMOD_System_CreateDSPConnection$address() {
        return FMOD_System_CreateDSPConnection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateDSPConnection(FMOD_SYSTEM *system, FMOD_DSPCONNECTION_TYPE type, FMOD_DSPCONNECTION **connection)
     * }
     */
    public static int FMOD_System_CreateDSPConnection(MemorySegment system, int type, MemorySegment connection) {
        var mh$ = FMOD_System_CreateDSPConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateDSPConnection", system, type, connection);
            }
            return (int)mh$.invokeExact(system, type, connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateChannelGroup(FMOD_SYSTEM *system, const char *name, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateChannelGroup$descriptor() {
        return FMOD_System_CreateChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateChannelGroup(FMOD_SYSTEM *system, const char *name, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static MethodHandle FMOD_System_CreateChannelGroup$handle() {
        return FMOD_System_CreateChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateChannelGroup(FMOD_SYSTEM *system, const char *name, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static MemorySegment FMOD_System_CreateChannelGroup$address() {
        return FMOD_System_CreateChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateChannelGroup(FMOD_SYSTEM *system, const char *name, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static int FMOD_System_CreateChannelGroup(MemorySegment system, MemorySegment name, MemorySegment channelgroup) {
        var mh$ = FMOD_System_CreateChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateChannelGroup", system, name, channelgroup);
            }
            return (int)mh$.invokeExact(system, name, channelgroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateSoundGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateSoundGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSoundGroup(FMOD_SYSTEM *system, const char *name, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateSoundGroup$descriptor() {
        return FMOD_System_CreateSoundGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSoundGroup(FMOD_SYSTEM *system, const char *name, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static MethodHandle FMOD_System_CreateSoundGroup$handle() {
        return FMOD_System_CreateSoundGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSoundGroup(FMOD_SYSTEM *system, const char *name, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static MemorySegment FMOD_System_CreateSoundGroup$address() {
        return FMOD_System_CreateSoundGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateSoundGroup(FMOD_SYSTEM *system, const char *name, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static int FMOD_System_CreateSoundGroup(MemorySegment system, MemorySegment name, MemorySegment soundgroup) {
        var mh$ = FMOD_System_CreateSoundGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateSoundGroup", system, name, soundgroup);
            }
            return (int)mh$.invokeExact(system, name, soundgroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateReverb3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateReverb3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateReverb3D(FMOD_SYSTEM *system, FMOD_REVERB3D **reverb)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateReverb3D$descriptor() {
        return FMOD_System_CreateReverb3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateReverb3D(FMOD_SYSTEM *system, FMOD_REVERB3D **reverb)
     * }
     */
    public static MethodHandle FMOD_System_CreateReverb3D$handle() {
        return FMOD_System_CreateReverb3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateReverb3D(FMOD_SYSTEM *system, FMOD_REVERB3D **reverb)
     * }
     */
    public static MemorySegment FMOD_System_CreateReverb3D$address() {
        return FMOD_System_CreateReverb3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateReverb3D(FMOD_SYSTEM *system, FMOD_REVERB3D **reverb)
     * }
     */
    public static int FMOD_System_CreateReverb3D(MemorySegment system, MemorySegment reverb) {
        var mh$ = FMOD_System_CreateReverb3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateReverb3D", system, reverb);
            }
            return (int)mh$.invokeExact(system, reverb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_PlaySound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_PlaySound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlaySound(FMOD_SYSTEM *system, FMOD_SOUND *sound, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static FunctionDescriptor FMOD_System_PlaySound$descriptor() {
        return FMOD_System_PlaySound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlaySound(FMOD_SYSTEM *system, FMOD_SOUND *sound, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static MethodHandle FMOD_System_PlaySound$handle() {
        return FMOD_System_PlaySound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlaySound(FMOD_SYSTEM *system, FMOD_SOUND *sound, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static MemorySegment FMOD_System_PlaySound$address() {
        return FMOD_System_PlaySound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlaySound(FMOD_SYSTEM *system, FMOD_SOUND *sound, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static int FMOD_System_PlaySound(MemorySegment system, MemorySegment sound, MemorySegment channelgroup, int paused, MemorySegment channel) {
        var mh$ = FMOD_System_PlaySound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_PlaySound", system, sound, channelgroup, paused, channel);
            }
            return (int)mh$.invokeExact(system, sound, channelgroup, paused, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_PlayDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_PlayDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlayDSP(FMOD_SYSTEM *system, FMOD_DSP *dsp, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static FunctionDescriptor FMOD_System_PlayDSP$descriptor() {
        return FMOD_System_PlayDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlayDSP(FMOD_SYSTEM *system, FMOD_DSP *dsp, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static MethodHandle FMOD_System_PlayDSP$handle() {
        return FMOD_System_PlayDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlayDSP(FMOD_SYSTEM *system, FMOD_DSP *dsp, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static MemorySegment FMOD_System_PlayDSP$address() {
        return FMOD_System_PlayDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_PlayDSP(FMOD_SYSTEM *system, FMOD_DSP *dsp, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL paused, FMOD_CHANNEL **channel)
     * }
     */
    public static int FMOD_System_PlayDSP(MemorySegment system, MemorySegment dsp, MemorySegment channelgroup, int paused, MemorySegment channel) {
        var mh$ = FMOD_System_PlayDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_PlayDSP", system, dsp, channelgroup, paused, channel);
            }
            return (int)mh$.invokeExact(system, dsp, channelgroup, paused, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannel(FMOD_SYSTEM *system, int channelid, FMOD_CHANNEL **channel)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetChannel$descriptor() {
        return FMOD_System_GetChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannel(FMOD_SYSTEM *system, int channelid, FMOD_CHANNEL **channel)
     * }
     */
    public static MethodHandle FMOD_System_GetChannel$handle() {
        return FMOD_System_GetChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannel(FMOD_SYSTEM *system, int channelid, FMOD_CHANNEL **channel)
     * }
     */
    public static MemorySegment FMOD_System_GetChannel$address() {
        return FMOD_System_GetChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetChannel(FMOD_SYSTEM *system, int channelid, FMOD_CHANNEL **channel)
     * }
     */
    public static int FMOD_System_GetChannel(MemorySegment system, int channelid, MemorySegment channel) {
        var mh$ = FMOD_System_GetChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetChannel", system, channelid, channel);
            }
            return (int)mh$.invokeExact(system, channelid, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetDSPInfoByType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetDSPInfoByType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetDSPInfoByType$descriptor() {
        return FMOD_System_GetDSPInfoByType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static MethodHandle FMOD_System_GetDSPInfoByType$handle() {
        return FMOD_System_GetDSPInfoByType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static MemorySegment FMOD_System_GetDSPInfoByType$address() {
        return FMOD_System_GetDSPInfoByType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetDSPInfoByType(FMOD_SYSTEM *system, FMOD_DSP_TYPE type, const FMOD_DSP_DESCRIPTION **description)
     * }
     */
    public static int FMOD_System_GetDSPInfoByType(MemorySegment system, int type, MemorySegment description) {
        var mh$ = FMOD_System_GetDSPInfoByType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetDSPInfoByType", system, type, description);
            }
            return (int)mh$.invokeExact(system, type, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetMasterChannelGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetMasterChannelGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterChannelGroup(FMOD_SYSTEM *system, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetMasterChannelGroup$descriptor() {
        return FMOD_System_GetMasterChannelGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterChannelGroup(FMOD_SYSTEM *system, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static MethodHandle FMOD_System_GetMasterChannelGroup$handle() {
        return FMOD_System_GetMasterChannelGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterChannelGroup(FMOD_SYSTEM *system, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static MemorySegment FMOD_System_GetMasterChannelGroup$address() {
        return FMOD_System_GetMasterChannelGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterChannelGroup(FMOD_SYSTEM *system, FMOD_CHANNELGROUP **channelgroup)
     * }
     */
    public static int FMOD_System_GetMasterChannelGroup(MemorySegment system, MemorySegment channelgroup) {
        var mh$ = FMOD_System_GetMasterChannelGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetMasterChannelGroup", system, channelgroup);
            }
            return (int)mh$.invokeExact(system, channelgroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetMasterSoundGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetMasterSoundGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterSoundGroup(FMOD_SYSTEM *system, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetMasterSoundGroup$descriptor() {
        return FMOD_System_GetMasterSoundGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterSoundGroup(FMOD_SYSTEM *system, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static MethodHandle FMOD_System_GetMasterSoundGroup$handle() {
        return FMOD_System_GetMasterSoundGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterSoundGroup(FMOD_SYSTEM *system, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static MemorySegment FMOD_System_GetMasterSoundGroup$address() {
        return FMOD_System_GetMasterSoundGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetMasterSoundGroup(FMOD_SYSTEM *system, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static int FMOD_System_GetMasterSoundGroup(MemorySegment system, MemorySegment soundgroup) {
        var mh$ = FMOD_System_GetMasterSoundGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetMasterSoundGroup", system, soundgroup);
            }
            return (int)mh$.invokeExact(system, soundgroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_AttachChannelGroupToPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_LONG_LONG,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_AttachChannelGroupToPort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachChannelGroupToPort(FMOD_SYSTEM *system, FMOD_PORT_TYPE portType, FMOD_PORT_INDEX portIndex, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL passThru)
     * }
     */
    public static FunctionDescriptor FMOD_System_AttachChannelGroupToPort$descriptor() {
        return FMOD_System_AttachChannelGroupToPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachChannelGroupToPort(FMOD_SYSTEM *system, FMOD_PORT_TYPE portType, FMOD_PORT_INDEX portIndex, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL passThru)
     * }
     */
    public static MethodHandle FMOD_System_AttachChannelGroupToPort$handle() {
        return FMOD_System_AttachChannelGroupToPort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachChannelGroupToPort(FMOD_SYSTEM *system, FMOD_PORT_TYPE portType, FMOD_PORT_INDEX portIndex, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL passThru)
     * }
     */
    public static MemorySegment FMOD_System_AttachChannelGroupToPort$address() {
        return FMOD_System_AttachChannelGroupToPort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_AttachChannelGroupToPort(FMOD_SYSTEM *system, FMOD_PORT_TYPE portType, FMOD_PORT_INDEX portIndex, FMOD_CHANNELGROUP *channelgroup, FMOD_BOOL passThru)
     * }
     */
    public static int FMOD_System_AttachChannelGroupToPort(MemorySegment system, int portType, long portIndex, MemorySegment channelgroup, int passThru) {
        var mh$ = FMOD_System_AttachChannelGroupToPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_AttachChannelGroupToPort", system, portType, portIndex, channelgroup, passThru);
            }
            return (int)mh$.invokeExact(system, portType, portIndex, channelgroup, passThru);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_DetachChannelGroupFromPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_DetachChannelGroupFromPort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_DetachChannelGroupFromPort(FMOD_SYSTEM *system, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static FunctionDescriptor FMOD_System_DetachChannelGroupFromPort$descriptor() {
        return FMOD_System_DetachChannelGroupFromPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_DetachChannelGroupFromPort(FMOD_SYSTEM *system, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MethodHandle FMOD_System_DetachChannelGroupFromPort$handle() {
        return FMOD_System_DetachChannelGroupFromPort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_DetachChannelGroupFromPort(FMOD_SYSTEM *system, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static MemorySegment FMOD_System_DetachChannelGroupFromPort$address() {
        return FMOD_System_DetachChannelGroupFromPort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_DetachChannelGroupFromPort(FMOD_SYSTEM *system, FMOD_CHANNELGROUP *channelgroup)
     * }
     */
    public static int FMOD_System_DetachChannelGroupFromPort(MemorySegment system, MemorySegment channelgroup) {
        var mh$ = FMOD_System_DetachChannelGroupFromPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_DetachChannelGroupFromPort", system, channelgroup);
            }
            return (int)mh$.invokeExact(system, channelgroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetReverbProperties(FMOD_SYSTEM *system, int instance, const FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetReverbProperties$descriptor() {
        return FMOD_System_SetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetReverbProperties(FMOD_SYSTEM *system, int instance, const FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static MethodHandle FMOD_System_SetReverbProperties$handle() {
        return FMOD_System_SetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetReverbProperties(FMOD_SYSTEM *system, int instance, const FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static MemorySegment FMOD_System_SetReverbProperties$address() {
        return FMOD_System_SetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetReverbProperties(FMOD_SYSTEM *system, int instance, const FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static int FMOD_System_SetReverbProperties(MemorySegment system, int instance, MemorySegment prop) {
        var mh$ = FMOD_System_SetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetReverbProperties", system, instance, prop);
            }
            return (int)mh$.invokeExact(system, instance, prop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetReverbProperties(FMOD_SYSTEM *system, int instance, FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetReverbProperties$descriptor() {
        return FMOD_System_GetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetReverbProperties(FMOD_SYSTEM *system, int instance, FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static MethodHandle FMOD_System_GetReverbProperties$handle() {
        return FMOD_System_GetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetReverbProperties(FMOD_SYSTEM *system, int instance, FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static MemorySegment FMOD_System_GetReverbProperties$address() {
        return FMOD_System_GetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetReverbProperties(FMOD_SYSTEM *system, int instance, FMOD_REVERB_PROPERTIES *prop)
     * }
     */
    public static int FMOD_System_GetReverbProperties(MemorySegment system, int instance, MemorySegment prop) {
        var mh$ = FMOD_System_GetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetReverbProperties", system, instance, prop);
            }
            return (int)mh$.invokeExact(system, instance, prop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_LockDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_LockDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_System_LockDSP$descriptor() {
        return FMOD_System_LockDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_System_LockDSP$handle() {
        return FMOD_System_LockDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_System_LockDSP$address() {
        return FMOD_System_LockDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static int FMOD_System_LockDSP(MemorySegment system) {
        var mh$ = FMOD_System_LockDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_LockDSP", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_UnlockDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_UnlockDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnlockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static FunctionDescriptor FMOD_System_UnlockDSP$descriptor() {
        return FMOD_System_UnlockDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnlockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static MethodHandle FMOD_System_UnlockDSP$handle() {
        return FMOD_System_UnlockDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnlockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static MemorySegment FMOD_System_UnlockDSP$address() {
        return FMOD_System_UnlockDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_UnlockDSP(FMOD_SYSTEM *system)
     * }
     */
    public static int FMOD_System_UnlockDSP(MemorySegment system) {
        var mh$ = FMOD_System_UnlockDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_UnlockDSP", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetRecordNumDrivers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetRecordNumDrivers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordNumDrivers(FMOD_SYSTEM *system, int *numdrivers, int *numconnected)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetRecordNumDrivers$descriptor() {
        return FMOD_System_GetRecordNumDrivers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordNumDrivers(FMOD_SYSTEM *system, int *numdrivers, int *numconnected)
     * }
     */
    public static MethodHandle FMOD_System_GetRecordNumDrivers$handle() {
        return FMOD_System_GetRecordNumDrivers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordNumDrivers(FMOD_SYSTEM *system, int *numdrivers, int *numconnected)
     * }
     */
    public static MemorySegment FMOD_System_GetRecordNumDrivers$address() {
        return FMOD_System_GetRecordNumDrivers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordNumDrivers(FMOD_SYSTEM *system, int *numdrivers, int *numconnected)
     * }
     */
    public static int FMOD_System_GetRecordNumDrivers(MemorySegment system, MemorySegment numdrivers, MemorySegment numconnected) {
        var mh$ = FMOD_System_GetRecordNumDrivers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetRecordNumDrivers", system, numdrivers, numconnected);
            }
            return (int)mh$.invokeExact(system, numdrivers, numconnected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetRecordDriverInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetRecordDriverInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels, FMOD_DRIVER_STATE *state)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetRecordDriverInfo$descriptor() {
        return FMOD_System_GetRecordDriverInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels, FMOD_DRIVER_STATE *state)
     * }
     */
    public static MethodHandle FMOD_System_GetRecordDriverInfo$handle() {
        return FMOD_System_GetRecordDriverInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels, FMOD_DRIVER_STATE *state)
     * }
     */
    public static MemorySegment FMOD_System_GetRecordDriverInfo$address() {
        return FMOD_System_GetRecordDriverInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordDriverInfo(FMOD_SYSTEM *system, int id, char *name, int namelen, FMOD_GUID *guid, int *systemrate, FMOD_SPEAKERMODE *speakermode, int *speakermodechannels, FMOD_DRIVER_STATE *state)
     * }
     */
    public static int FMOD_System_GetRecordDriverInfo(MemorySegment system, int id, MemorySegment name, int namelen, MemorySegment guid, MemorySegment systemrate, MemorySegment speakermode, MemorySegment speakermodechannels, MemorySegment state) {
        var mh$ = FMOD_System_GetRecordDriverInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetRecordDriverInfo", system, id, name, namelen, guid, systemrate, speakermode, speakermodechannels, state);
            }
            return (int)mh$.invokeExact(system, id, name, namelen, guid, systemrate, speakermode, speakermodechannels, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetRecordPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetRecordPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordPosition(FMOD_SYSTEM *system, int id, unsigned int *position)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetRecordPosition$descriptor() {
        return FMOD_System_GetRecordPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordPosition(FMOD_SYSTEM *system, int id, unsigned int *position)
     * }
     */
    public static MethodHandle FMOD_System_GetRecordPosition$handle() {
        return FMOD_System_GetRecordPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordPosition(FMOD_SYSTEM *system, int id, unsigned int *position)
     * }
     */
    public static MemorySegment FMOD_System_GetRecordPosition$address() {
        return FMOD_System_GetRecordPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetRecordPosition(FMOD_SYSTEM *system, int id, unsigned int *position)
     * }
     */
    public static int FMOD_System_GetRecordPosition(MemorySegment system, int id, MemorySegment position) {
        var mh$ = FMOD_System_GetRecordPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetRecordPosition", system, id, position);
            }
            return (int)mh$.invokeExact(system, id, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_RecordStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_RecordStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStart(FMOD_SYSTEM *system, int id, FMOD_SOUND *sound, FMOD_BOOL loop)
     * }
     */
    public static FunctionDescriptor FMOD_System_RecordStart$descriptor() {
        return FMOD_System_RecordStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStart(FMOD_SYSTEM *system, int id, FMOD_SOUND *sound, FMOD_BOOL loop)
     * }
     */
    public static MethodHandle FMOD_System_RecordStart$handle() {
        return FMOD_System_RecordStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStart(FMOD_SYSTEM *system, int id, FMOD_SOUND *sound, FMOD_BOOL loop)
     * }
     */
    public static MemorySegment FMOD_System_RecordStart$address() {
        return FMOD_System_RecordStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStart(FMOD_SYSTEM *system, int id, FMOD_SOUND *sound, FMOD_BOOL loop)
     * }
     */
    public static int FMOD_System_RecordStart(MemorySegment system, int id, MemorySegment sound, int loop) {
        var mh$ = FMOD_System_RecordStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_RecordStart", system, id, sound, loop);
            }
            return (int)mh$.invokeExact(system, id, sound, loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_RecordStop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_RecordStop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStop(FMOD_SYSTEM *system, int id)
     * }
     */
    public static FunctionDescriptor FMOD_System_RecordStop$descriptor() {
        return FMOD_System_RecordStop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStop(FMOD_SYSTEM *system, int id)
     * }
     */
    public static MethodHandle FMOD_System_RecordStop$handle() {
        return FMOD_System_RecordStop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStop(FMOD_SYSTEM *system, int id)
     * }
     */
    public static MemorySegment FMOD_System_RecordStop$address() {
        return FMOD_System_RecordStop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_RecordStop(FMOD_SYSTEM *system, int id)
     * }
     */
    public static int FMOD_System_RecordStop(MemorySegment system, int id) {
        var mh$ = FMOD_System_RecordStop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_RecordStop", system, id);
            }
            return (int)mh$.invokeExact(system, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_IsRecording {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_IsRecording");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_IsRecording(FMOD_SYSTEM *system, int id, FMOD_BOOL *recording)
     * }
     */
    public static FunctionDescriptor FMOD_System_IsRecording$descriptor() {
        return FMOD_System_IsRecording.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_IsRecording(FMOD_SYSTEM *system, int id, FMOD_BOOL *recording)
     * }
     */
    public static MethodHandle FMOD_System_IsRecording$handle() {
        return FMOD_System_IsRecording.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_IsRecording(FMOD_SYSTEM *system, int id, FMOD_BOOL *recording)
     * }
     */
    public static MemorySegment FMOD_System_IsRecording$address() {
        return FMOD_System_IsRecording.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_IsRecording(FMOD_SYSTEM *system, int id, FMOD_BOOL *recording)
     * }
     */
    public static int FMOD_System_IsRecording(MemorySegment system, int id, MemorySegment recording) {
        var mh$ = FMOD_System_IsRecording.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_IsRecording", system, id, recording);
            }
            return (int)mh$.invokeExact(system, id, recording);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_CreateGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_CreateGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateGeometry(FMOD_SYSTEM *system, int maxpolygons, int maxvertices, FMOD_GEOMETRY **geometry)
     * }
     */
    public static FunctionDescriptor FMOD_System_CreateGeometry$descriptor() {
        return FMOD_System_CreateGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateGeometry(FMOD_SYSTEM *system, int maxpolygons, int maxvertices, FMOD_GEOMETRY **geometry)
     * }
     */
    public static MethodHandle FMOD_System_CreateGeometry$handle() {
        return FMOD_System_CreateGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateGeometry(FMOD_SYSTEM *system, int maxpolygons, int maxvertices, FMOD_GEOMETRY **geometry)
     * }
     */
    public static MemorySegment FMOD_System_CreateGeometry$address() {
        return FMOD_System_CreateGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_CreateGeometry(FMOD_SYSTEM *system, int maxpolygons, int maxvertices, FMOD_GEOMETRY **geometry)
     * }
     */
    public static int FMOD_System_CreateGeometry(MemorySegment system, int maxpolygons, int maxvertices, MemorySegment geometry) {
        var mh$ = FMOD_System_CreateGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_CreateGeometry", system, maxpolygons, maxvertices, geometry);
            }
            return (int)mh$.invokeExact(system, maxpolygons, maxvertices, geometry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetGeometrySettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetGeometrySettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetGeometrySettings(FMOD_SYSTEM *system, float maxworldsize)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetGeometrySettings$descriptor() {
        return FMOD_System_SetGeometrySettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetGeometrySettings(FMOD_SYSTEM *system, float maxworldsize)
     * }
     */
    public static MethodHandle FMOD_System_SetGeometrySettings$handle() {
        return FMOD_System_SetGeometrySettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetGeometrySettings(FMOD_SYSTEM *system, float maxworldsize)
     * }
     */
    public static MemorySegment FMOD_System_SetGeometrySettings$address() {
        return FMOD_System_SetGeometrySettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetGeometrySettings(FMOD_SYSTEM *system, float maxworldsize)
     * }
     */
    public static int FMOD_System_SetGeometrySettings(MemorySegment system, float maxworldsize) {
        var mh$ = FMOD_System_SetGeometrySettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetGeometrySettings", system, maxworldsize);
            }
            return (int)mh$.invokeExact(system, maxworldsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetGeometrySettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetGeometrySettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometrySettings(FMOD_SYSTEM *system, float *maxworldsize)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetGeometrySettings$descriptor() {
        return FMOD_System_GetGeometrySettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometrySettings(FMOD_SYSTEM *system, float *maxworldsize)
     * }
     */
    public static MethodHandle FMOD_System_GetGeometrySettings$handle() {
        return FMOD_System_GetGeometrySettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometrySettings(FMOD_SYSTEM *system, float *maxworldsize)
     * }
     */
    public static MemorySegment FMOD_System_GetGeometrySettings$address() {
        return FMOD_System_GetGeometrySettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometrySettings(FMOD_SYSTEM *system, float *maxworldsize)
     * }
     */
    public static int FMOD_System_GetGeometrySettings(MemorySegment system, MemorySegment maxworldsize) {
        var mh$ = FMOD_System_GetGeometrySettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetGeometrySettings", system, maxworldsize);
            }
            return (int)mh$.invokeExact(system, maxworldsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_LoadGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_LoadGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadGeometry(FMOD_SYSTEM *system, const void *data, int datasize, FMOD_GEOMETRY **geometry)
     * }
     */
    public static FunctionDescriptor FMOD_System_LoadGeometry$descriptor() {
        return FMOD_System_LoadGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadGeometry(FMOD_SYSTEM *system, const void *data, int datasize, FMOD_GEOMETRY **geometry)
     * }
     */
    public static MethodHandle FMOD_System_LoadGeometry$handle() {
        return FMOD_System_LoadGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadGeometry(FMOD_SYSTEM *system, const void *data, int datasize, FMOD_GEOMETRY **geometry)
     * }
     */
    public static MemorySegment FMOD_System_LoadGeometry$address() {
        return FMOD_System_LoadGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_LoadGeometry(FMOD_SYSTEM *system, const void *data, int datasize, FMOD_GEOMETRY **geometry)
     * }
     */
    public static int FMOD_System_LoadGeometry(MemorySegment system, MemorySegment data, int datasize, MemorySegment geometry) {
        var mh$ = FMOD_System_LoadGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_LoadGeometry", system, data, datasize, geometry);
            }
            return (int)mh$.invokeExact(system, data, datasize, geometry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetGeometryOcclusion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetGeometryOcclusion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometryOcclusion(FMOD_SYSTEM *system, const FMOD_VECTOR *listener, const FMOD_VECTOR *source, float *direct, float *reverb)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetGeometryOcclusion$descriptor() {
        return FMOD_System_GetGeometryOcclusion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometryOcclusion(FMOD_SYSTEM *system, const FMOD_VECTOR *listener, const FMOD_VECTOR *source, float *direct, float *reverb)
     * }
     */
    public static MethodHandle FMOD_System_GetGeometryOcclusion$handle() {
        return FMOD_System_GetGeometryOcclusion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometryOcclusion(FMOD_SYSTEM *system, const FMOD_VECTOR *listener, const FMOD_VECTOR *source, float *direct, float *reverb)
     * }
     */
    public static MemorySegment FMOD_System_GetGeometryOcclusion$address() {
        return FMOD_System_GetGeometryOcclusion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetGeometryOcclusion(FMOD_SYSTEM *system, const FMOD_VECTOR *listener, const FMOD_VECTOR *source, float *direct, float *reverb)
     * }
     */
    public static int FMOD_System_GetGeometryOcclusion(MemorySegment system, MemorySegment listener, MemorySegment source, MemorySegment direct, MemorySegment reverb) {
        var mh$ = FMOD_System_GetGeometryOcclusion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetGeometryOcclusion", system, listener, source, direct, reverb);
            }
            return (int)mh$.invokeExact(system, listener, source, direct, reverb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetNetworkProxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetNetworkProxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkProxy(FMOD_SYSTEM *system, const char *proxy)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetNetworkProxy$descriptor() {
        return FMOD_System_SetNetworkProxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkProxy(FMOD_SYSTEM *system, const char *proxy)
     * }
     */
    public static MethodHandle FMOD_System_SetNetworkProxy$handle() {
        return FMOD_System_SetNetworkProxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkProxy(FMOD_SYSTEM *system, const char *proxy)
     * }
     */
    public static MemorySegment FMOD_System_SetNetworkProxy$address() {
        return FMOD_System_SetNetworkProxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkProxy(FMOD_SYSTEM *system, const char *proxy)
     * }
     */
    public static int FMOD_System_SetNetworkProxy(MemorySegment system, MemorySegment proxy) {
        var mh$ = FMOD_System_SetNetworkProxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetNetworkProxy", system, proxy);
            }
            return (int)mh$.invokeExact(system, proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetNetworkProxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetNetworkProxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkProxy(FMOD_SYSTEM *system, char *proxy, int proxylen)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetNetworkProxy$descriptor() {
        return FMOD_System_GetNetworkProxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkProxy(FMOD_SYSTEM *system, char *proxy, int proxylen)
     * }
     */
    public static MethodHandle FMOD_System_GetNetworkProxy$handle() {
        return FMOD_System_GetNetworkProxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkProxy(FMOD_SYSTEM *system, char *proxy, int proxylen)
     * }
     */
    public static MemorySegment FMOD_System_GetNetworkProxy$address() {
        return FMOD_System_GetNetworkProxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkProxy(FMOD_SYSTEM *system, char *proxy, int proxylen)
     * }
     */
    public static int FMOD_System_GetNetworkProxy(MemorySegment system, MemorySegment proxy, int proxylen) {
        var mh$ = FMOD_System_GetNetworkProxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetNetworkProxy", system, proxy, proxylen);
            }
            return (int)mh$.invokeExact(system, proxy, proxylen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetNetworkTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetNetworkTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkTimeout(FMOD_SYSTEM *system, int timeout)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetNetworkTimeout$descriptor() {
        return FMOD_System_SetNetworkTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkTimeout(FMOD_SYSTEM *system, int timeout)
     * }
     */
    public static MethodHandle FMOD_System_SetNetworkTimeout$handle() {
        return FMOD_System_SetNetworkTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkTimeout(FMOD_SYSTEM *system, int timeout)
     * }
     */
    public static MemorySegment FMOD_System_SetNetworkTimeout$address() {
        return FMOD_System_SetNetworkTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetNetworkTimeout(FMOD_SYSTEM *system, int timeout)
     * }
     */
    public static int FMOD_System_SetNetworkTimeout(MemorySegment system, int timeout) {
        var mh$ = FMOD_System_SetNetworkTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetNetworkTimeout", system, timeout);
            }
            return (int)mh$.invokeExact(system, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetNetworkTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetNetworkTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkTimeout(FMOD_SYSTEM *system, int *timeout)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetNetworkTimeout$descriptor() {
        return FMOD_System_GetNetworkTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkTimeout(FMOD_SYSTEM *system, int *timeout)
     * }
     */
    public static MethodHandle FMOD_System_GetNetworkTimeout$handle() {
        return FMOD_System_GetNetworkTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkTimeout(FMOD_SYSTEM *system, int *timeout)
     * }
     */
    public static MemorySegment FMOD_System_GetNetworkTimeout$address() {
        return FMOD_System_GetNetworkTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetNetworkTimeout(FMOD_SYSTEM *system, int *timeout)
     * }
     */
    public static int FMOD_System_GetNetworkTimeout(MemorySegment system, MemorySegment timeout) {
        var mh$ = FMOD_System_GetNetworkTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetNetworkTimeout", system, timeout);
            }
            return (int)mh$.invokeExact(system, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetUserData(FMOD_SYSTEM *system, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_System_SetUserData$descriptor() {
        return FMOD_System_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetUserData(FMOD_SYSTEM *system, void *userdata)
     * }
     */
    public static MethodHandle FMOD_System_SetUserData$handle() {
        return FMOD_System_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetUserData(FMOD_SYSTEM *system, void *userdata)
     * }
     */
    public static MemorySegment FMOD_System_SetUserData$address() {
        return FMOD_System_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_SetUserData(FMOD_SYSTEM *system, void *userdata)
     * }
     */
    public static int FMOD_System_SetUserData(MemorySegment system, MemorySegment userdata) {
        var mh$ = FMOD_System_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_SetUserData", system, userdata);
            }
            return (int)mh$.invokeExact(system, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_System_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_System_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetUserData(FMOD_SYSTEM *system, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_System_GetUserData$descriptor() {
        return FMOD_System_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetUserData(FMOD_SYSTEM *system, void **userdata)
     * }
     */
    public static MethodHandle FMOD_System_GetUserData$handle() {
        return FMOD_System_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetUserData(FMOD_SYSTEM *system, void **userdata)
     * }
     */
    public static MemorySegment FMOD_System_GetUserData$address() {
        return FMOD_System_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_System_GetUserData(FMOD_SYSTEM *system, void **userdata)
     * }
     */
    public static int FMOD_System_GetUserData(MemorySegment system, MemorySegment userdata) {
        var mh$ = FMOD_System_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_System_GetUserData", system, userdata);
            }
            return (int)mh$.invokeExact(system, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Release(FMOD_SOUND *sound)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Release$descriptor() {
        return FMOD_Sound_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Release(FMOD_SOUND *sound)
     * }
     */
    public static MethodHandle FMOD_Sound_Release$handle() {
        return FMOD_Sound_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Release(FMOD_SOUND *sound)
     * }
     */
    public static MemorySegment FMOD_Sound_Release$address() {
        return FMOD_Sound_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Release(FMOD_SOUND *sound)
     * }
     */
    public static int FMOD_Sound_Release(MemorySegment sound) {
        var mh$ = FMOD_Sound_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Release", sound);
            }
            return (int)mh$.invokeExact(sound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetSystemObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetSystemObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSystemObject(FMOD_SOUND *sound, FMOD_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetSystemObject$descriptor() {
        return FMOD_Sound_GetSystemObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSystemObject(FMOD_SOUND *sound, FMOD_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_Sound_GetSystemObject$handle() {
        return FMOD_Sound_GetSystemObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSystemObject(FMOD_SOUND *sound, FMOD_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_Sound_GetSystemObject$address() {
        return FMOD_Sound_GetSystemObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSystemObject(FMOD_SOUND *sound, FMOD_SYSTEM **system)
     * }
     */
    public static int FMOD_Sound_GetSystemObject(MemorySegment sound, MemorySegment system) {
        var mh$ = FMOD_Sound_GetSystemObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetSystemObject", sound, system);
            }
            return (int)mh$.invokeExact(sound, system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Lock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Lock(FMOD_SOUND *sound, unsigned int offset, unsigned int length, void **ptr1, void **ptr2, unsigned int *len1, unsigned int *len2)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Lock$descriptor() {
        return FMOD_Sound_Lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Lock(FMOD_SOUND *sound, unsigned int offset, unsigned int length, void **ptr1, void **ptr2, unsigned int *len1, unsigned int *len2)
     * }
     */
    public static MethodHandle FMOD_Sound_Lock$handle() {
        return FMOD_Sound_Lock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Lock(FMOD_SOUND *sound, unsigned int offset, unsigned int length, void **ptr1, void **ptr2, unsigned int *len1, unsigned int *len2)
     * }
     */
    public static MemorySegment FMOD_Sound_Lock$address() {
        return FMOD_Sound_Lock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Lock(FMOD_SOUND *sound, unsigned int offset, unsigned int length, void **ptr1, void **ptr2, unsigned int *len1, unsigned int *len2)
     * }
     */
    public static int FMOD_Sound_Lock(MemorySegment sound, int offset, int length, MemorySegment ptr1, MemorySegment ptr2, MemorySegment len1, MemorySegment len2) {
        var mh$ = FMOD_Sound_Lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Lock", sound, offset, length, ptr1, ptr2, len1, len2);
            }
            return (int)mh$.invokeExact(sound, offset, length, ptr1, ptr2, len1, len2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Unlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Unlock(FMOD_SOUND *sound, void *ptr1, void *ptr2, unsigned int len1, unsigned int len2)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Unlock$descriptor() {
        return FMOD_Sound_Unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Unlock(FMOD_SOUND *sound, void *ptr1, void *ptr2, unsigned int len1, unsigned int len2)
     * }
     */
    public static MethodHandle FMOD_Sound_Unlock$handle() {
        return FMOD_Sound_Unlock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Unlock(FMOD_SOUND *sound, void *ptr1, void *ptr2, unsigned int len1, unsigned int len2)
     * }
     */
    public static MemorySegment FMOD_Sound_Unlock$address() {
        return FMOD_Sound_Unlock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Unlock(FMOD_SOUND *sound, void *ptr1, void *ptr2, unsigned int len1, unsigned int len2)
     * }
     */
    public static int FMOD_Sound_Unlock(MemorySegment sound, MemorySegment ptr1, MemorySegment ptr2, int len1, int len2) {
        var mh$ = FMOD_Sound_Unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Unlock", sound, ptr1, ptr2, len1, len2);
            }
            return (int)mh$.invokeExact(sound, ptr1, ptr2, len1, len2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetDefaults {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetDefaults");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetDefaults(FMOD_SOUND *sound, float frequency, int priority)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetDefaults$descriptor() {
        return FMOD_Sound_SetDefaults.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetDefaults(FMOD_SOUND *sound, float frequency, int priority)
     * }
     */
    public static MethodHandle FMOD_Sound_SetDefaults$handle() {
        return FMOD_Sound_SetDefaults.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetDefaults(FMOD_SOUND *sound, float frequency, int priority)
     * }
     */
    public static MemorySegment FMOD_Sound_SetDefaults$address() {
        return FMOD_Sound_SetDefaults.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetDefaults(FMOD_SOUND *sound, float frequency, int priority)
     * }
     */
    public static int FMOD_Sound_SetDefaults(MemorySegment sound, float frequency, int priority) {
        var mh$ = FMOD_Sound_SetDefaults.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetDefaults", sound, frequency, priority);
            }
            return (int)mh$.invokeExact(sound, frequency, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetDefaults {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetDefaults");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetDefaults(FMOD_SOUND *sound, float *frequency, int *priority)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetDefaults$descriptor() {
        return FMOD_Sound_GetDefaults.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetDefaults(FMOD_SOUND *sound, float *frequency, int *priority)
     * }
     */
    public static MethodHandle FMOD_Sound_GetDefaults$handle() {
        return FMOD_Sound_GetDefaults.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetDefaults(FMOD_SOUND *sound, float *frequency, int *priority)
     * }
     */
    public static MemorySegment FMOD_Sound_GetDefaults$address() {
        return FMOD_Sound_GetDefaults.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetDefaults(FMOD_SOUND *sound, float *frequency, int *priority)
     * }
     */
    public static int FMOD_Sound_GetDefaults(MemorySegment sound, MemorySegment frequency, MemorySegment priority) {
        var mh$ = FMOD_Sound_GetDefaults.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetDefaults", sound, frequency, priority);
            }
            return (int)mh$.invokeExact(sound, frequency, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Set3DMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Set3DMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DMinMaxDistance(FMOD_SOUND *sound, float min, float max)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Set3DMinMaxDistance$descriptor() {
        return FMOD_Sound_Set3DMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DMinMaxDistance(FMOD_SOUND *sound, float min, float max)
     * }
     */
    public static MethodHandle FMOD_Sound_Set3DMinMaxDistance$handle() {
        return FMOD_Sound_Set3DMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DMinMaxDistance(FMOD_SOUND *sound, float min, float max)
     * }
     */
    public static MemorySegment FMOD_Sound_Set3DMinMaxDistance$address() {
        return FMOD_Sound_Set3DMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DMinMaxDistance(FMOD_SOUND *sound, float min, float max)
     * }
     */
    public static int FMOD_Sound_Set3DMinMaxDistance(MemorySegment sound, float min, float max) {
        var mh$ = FMOD_Sound_Set3DMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Set3DMinMaxDistance", sound, min, max);
            }
            return (int)mh$.invokeExact(sound, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Get3DMinMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Get3DMinMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DMinMaxDistance(FMOD_SOUND *sound, float *min, float *max)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Get3DMinMaxDistance$descriptor() {
        return FMOD_Sound_Get3DMinMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DMinMaxDistance(FMOD_SOUND *sound, float *min, float *max)
     * }
     */
    public static MethodHandle FMOD_Sound_Get3DMinMaxDistance$handle() {
        return FMOD_Sound_Get3DMinMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DMinMaxDistance(FMOD_SOUND *sound, float *min, float *max)
     * }
     */
    public static MemorySegment FMOD_Sound_Get3DMinMaxDistance$address() {
        return FMOD_Sound_Get3DMinMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DMinMaxDistance(FMOD_SOUND *sound, float *min, float *max)
     * }
     */
    public static int FMOD_Sound_Get3DMinMaxDistance(MemorySegment sound, MemorySegment min, MemorySegment max) {
        var mh$ = FMOD_Sound_Get3DMinMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Get3DMinMaxDistance", sound, min, max);
            }
            return (int)mh$.invokeExact(sound, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Set3DConeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Set3DConeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DConeSettings(FMOD_SOUND *sound, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Set3DConeSettings$descriptor() {
        return FMOD_Sound_Set3DConeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DConeSettings(FMOD_SOUND *sound, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static MethodHandle FMOD_Sound_Set3DConeSettings$handle() {
        return FMOD_Sound_Set3DConeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DConeSettings(FMOD_SOUND *sound, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static MemorySegment FMOD_Sound_Set3DConeSettings$address() {
        return FMOD_Sound_Set3DConeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DConeSettings(FMOD_SOUND *sound, float insideconeangle, float outsideconeangle, float outsidevolume)
     * }
     */
    public static int FMOD_Sound_Set3DConeSettings(MemorySegment sound, float insideconeangle, float outsideconeangle, float outsidevolume) {
        var mh$ = FMOD_Sound_Set3DConeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Set3DConeSettings", sound, insideconeangle, outsideconeangle, outsidevolume);
            }
            return (int)mh$.invokeExact(sound, insideconeangle, outsideconeangle, outsidevolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Get3DConeSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Get3DConeSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DConeSettings(FMOD_SOUND *sound, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Get3DConeSettings$descriptor() {
        return FMOD_Sound_Get3DConeSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DConeSettings(FMOD_SOUND *sound, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static MethodHandle FMOD_Sound_Get3DConeSettings$handle() {
        return FMOD_Sound_Get3DConeSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DConeSettings(FMOD_SOUND *sound, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static MemorySegment FMOD_Sound_Get3DConeSettings$address() {
        return FMOD_Sound_Get3DConeSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DConeSettings(FMOD_SOUND *sound, float *insideconeangle, float *outsideconeangle, float *outsidevolume)
     * }
     */
    public static int FMOD_Sound_Get3DConeSettings(MemorySegment sound, MemorySegment insideconeangle, MemorySegment outsideconeangle, MemorySegment outsidevolume) {
        var mh$ = FMOD_Sound_Get3DConeSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Get3DConeSettings", sound, insideconeangle, outsideconeangle, outsidevolume);
            }
            return (int)mh$.invokeExact(sound, insideconeangle, outsideconeangle, outsidevolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Set3DCustomRolloff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Set3DCustomRolloff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Set3DCustomRolloff$descriptor() {
        return FMOD_Sound_Set3DCustomRolloff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static MethodHandle FMOD_Sound_Set3DCustomRolloff$handle() {
        return FMOD_Sound_Set3DCustomRolloff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static MemorySegment FMOD_Sound_Set3DCustomRolloff$address() {
        return FMOD_Sound_Set3DCustomRolloff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Set3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR *points, int numpoints)
     * }
     */
    public static int FMOD_Sound_Set3DCustomRolloff(MemorySegment sound, MemorySegment points, int numpoints) {
        var mh$ = FMOD_Sound_Set3DCustomRolloff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Set3DCustomRolloff", sound, points, numpoints);
            }
            return (int)mh$.invokeExact(sound, points, numpoints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_Get3DCustomRolloff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_Get3DCustomRolloff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_Get3DCustomRolloff$descriptor() {
        return FMOD_Sound_Get3DCustomRolloff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static MethodHandle FMOD_Sound_Get3DCustomRolloff$handle() {
        return FMOD_Sound_Get3DCustomRolloff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static MemorySegment FMOD_Sound_Get3DCustomRolloff$address() {
        return FMOD_Sound_Get3DCustomRolloff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_Get3DCustomRolloff(FMOD_SOUND *sound, FMOD_VECTOR **points, int *numpoints)
     * }
     */
    public static int FMOD_Sound_Get3DCustomRolloff(MemorySegment sound, MemorySegment points, MemorySegment numpoints) {
        var mh$ = FMOD_Sound_Get3DCustomRolloff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_Get3DCustomRolloff", sound, points, numpoints);
            }
            return (int)mh$.invokeExact(sound, points, numpoints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetSubSound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetSubSound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSound(FMOD_SOUND *sound, int index, FMOD_SOUND **subsound)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetSubSound$descriptor() {
        return FMOD_Sound_GetSubSound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSound(FMOD_SOUND *sound, int index, FMOD_SOUND **subsound)
     * }
     */
    public static MethodHandle FMOD_Sound_GetSubSound$handle() {
        return FMOD_Sound_GetSubSound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSound(FMOD_SOUND *sound, int index, FMOD_SOUND **subsound)
     * }
     */
    public static MemorySegment FMOD_Sound_GetSubSound$address() {
        return FMOD_Sound_GetSubSound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSound(FMOD_SOUND *sound, int index, FMOD_SOUND **subsound)
     * }
     */
    public static int FMOD_Sound_GetSubSound(MemorySegment sound, int index, MemorySegment subsound) {
        var mh$ = FMOD_Sound_GetSubSound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetSubSound", sound, index, subsound);
            }
            return (int)mh$.invokeExact(sound, index, subsound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetSubSoundParent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetSubSoundParent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSoundParent(FMOD_SOUND *sound, FMOD_SOUND **parentsound)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetSubSoundParent$descriptor() {
        return FMOD_Sound_GetSubSoundParent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSoundParent(FMOD_SOUND *sound, FMOD_SOUND **parentsound)
     * }
     */
    public static MethodHandle FMOD_Sound_GetSubSoundParent$handle() {
        return FMOD_Sound_GetSubSoundParent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSoundParent(FMOD_SOUND *sound, FMOD_SOUND **parentsound)
     * }
     */
    public static MemorySegment FMOD_Sound_GetSubSoundParent$address() {
        return FMOD_Sound_GetSubSoundParent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSubSoundParent(FMOD_SOUND *sound, FMOD_SOUND **parentsound)
     * }
     */
    public static int FMOD_Sound_GetSubSoundParent(MemorySegment sound, MemorySegment parentsound) {
        var mh$ = FMOD_Sound_GetSubSoundParent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetSubSoundParent", sound, parentsound);
            }
            return (int)mh$.invokeExact(sound, parentsound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetName(FMOD_SOUND *sound, char *name, int namelen)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetName$descriptor() {
        return FMOD_Sound_GetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetName(FMOD_SOUND *sound, char *name, int namelen)
     * }
     */
    public static MethodHandle FMOD_Sound_GetName$handle() {
        return FMOD_Sound_GetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetName(FMOD_SOUND *sound, char *name, int namelen)
     * }
     */
    public static MemorySegment FMOD_Sound_GetName$address() {
        return FMOD_Sound_GetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetName(FMOD_SOUND *sound, char *name, int namelen)
     * }
     */
    public static int FMOD_Sound_GetName(MemorySegment sound, MemorySegment name, int namelen) {
        var mh$ = FMOD_Sound_GetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetName", sound, name, namelen);
            }
            return (int)mh$.invokeExact(sound, name, namelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLength(FMOD_SOUND *sound, unsigned int *length, FMOD_TIMEUNIT lengthtype)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetLength$descriptor() {
        return FMOD_Sound_GetLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLength(FMOD_SOUND *sound, unsigned int *length, FMOD_TIMEUNIT lengthtype)
     * }
     */
    public static MethodHandle FMOD_Sound_GetLength$handle() {
        return FMOD_Sound_GetLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLength(FMOD_SOUND *sound, unsigned int *length, FMOD_TIMEUNIT lengthtype)
     * }
     */
    public static MemorySegment FMOD_Sound_GetLength$address() {
        return FMOD_Sound_GetLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLength(FMOD_SOUND *sound, unsigned int *length, FMOD_TIMEUNIT lengthtype)
     * }
     */
    public static int FMOD_Sound_GetLength(MemorySegment sound, MemorySegment length, int lengthtype) {
        var mh$ = FMOD_Sound_GetLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetLength", sound, length, lengthtype);
            }
            return (int)mh$.invokeExact(sound, length, lengthtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetFormat(FMOD_SOUND *sound, FMOD_SOUND_TYPE *type, FMOD_SOUND_FORMAT *format, int *channels, int *bits)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetFormat$descriptor() {
        return FMOD_Sound_GetFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetFormat(FMOD_SOUND *sound, FMOD_SOUND_TYPE *type, FMOD_SOUND_FORMAT *format, int *channels, int *bits)
     * }
     */
    public static MethodHandle FMOD_Sound_GetFormat$handle() {
        return FMOD_Sound_GetFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetFormat(FMOD_SOUND *sound, FMOD_SOUND_TYPE *type, FMOD_SOUND_FORMAT *format, int *channels, int *bits)
     * }
     */
    public static MemorySegment FMOD_Sound_GetFormat$address() {
        return FMOD_Sound_GetFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetFormat(FMOD_SOUND *sound, FMOD_SOUND_TYPE *type, FMOD_SOUND_FORMAT *format, int *channels, int *bits)
     * }
     */
    public static int FMOD_Sound_GetFormat(MemorySegment sound, MemorySegment type, MemorySegment format, MemorySegment channels, MemorySegment bits) {
        var mh$ = FMOD_Sound_GetFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetFormat", sound, type, format, channels, bits);
            }
            return (int)mh$.invokeExact(sound, type, format, channels, bits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetNumSubSounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetNumSubSounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSubSounds(FMOD_SOUND *sound, int *numsubsounds)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetNumSubSounds$descriptor() {
        return FMOD_Sound_GetNumSubSounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSubSounds(FMOD_SOUND *sound, int *numsubsounds)
     * }
     */
    public static MethodHandle FMOD_Sound_GetNumSubSounds$handle() {
        return FMOD_Sound_GetNumSubSounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSubSounds(FMOD_SOUND *sound, int *numsubsounds)
     * }
     */
    public static MemorySegment FMOD_Sound_GetNumSubSounds$address() {
        return FMOD_Sound_GetNumSubSounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSubSounds(FMOD_SOUND *sound, int *numsubsounds)
     * }
     */
    public static int FMOD_Sound_GetNumSubSounds(MemorySegment sound, MemorySegment numsubsounds) {
        var mh$ = FMOD_Sound_GetNumSubSounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetNumSubSounds", sound, numsubsounds);
            }
            return (int)mh$.invokeExact(sound, numsubsounds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetNumTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetNumTags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumTags(FMOD_SOUND *sound, int *numtags, int *numtagsupdated)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetNumTags$descriptor() {
        return FMOD_Sound_GetNumTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumTags(FMOD_SOUND *sound, int *numtags, int *numtagsupdated)
     * }
     */
    public static MethodHandle FMOD_Sound_GetNumTags$handle() {
        return FMOD_Sound_GetNumTags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumTags(FMOD_SOUND *sound, int *numtags, int *numtagsupdated)
     * }
     */
    public static MemorySegment FMOD_Sound_GetNumTags$address() {
        return FMOD_Sound_GetNumTags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumTags(FMOD_SOUND *sound, int *numtags, int *numtagsupdated)
     * }
     */
    public static int FMOD_Sound_GetNumTags(MemorySegment sound, MemorySegment numtags, MemorySegment numtagsupdated) {
        var mh$ = FMOD_Sound_GetNumTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetNumTags", sound, numtags, numtagsupdated);
            }
            return (int)mh$.invokeExact(sound, numtags, numtagsupdated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetTag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetTag(FMOD_SOUND *sound, const char *name, int index, FMOD_TAG *tag)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetTag$descriptor() {
        return FMOD_Sound_GetTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetTag(FMOD_SOUND *sound, const char *name, int index, FMOD_TAG *tag)
     * }
     */
    public static MethodHandle FMOD_Sound_GetTag$handle() {
        return FMOD_Sound_GetTag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetTag(FMOD_SOUND *sound, const char *name, int index, FMOD_TAG *tag)
     * }
     */
    public static MemorySegment FMOD_Sound_GetTag$address() {
        return FMOD_Sound_GetTag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetTag(FMOD_SOUND *sound, const char *name, int index, FMOD_TAG *tag)
     * }
     */
    public static int FMOD_Sound_GetTag(MemorySegment sound, MemorySegment name, int index, MemorySegment tag) {
        var mh$ = FMOD_Sound_GetTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetTag", sound, name, index, tag);
            }
            return (int)mh$.invokeExact(sound, name, index, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetOpenState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetOpenState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetOpenState(FMOD_SOUND *sound, FMOD_OPENSTATE *openstate, unsigned int *percentbuffered, FMOD_BOOL *starving, FMOD_BOOL *diskbusy)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetOpenState$descriptor() {
        return FMOD_Sound_GetOpenState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetOpenState(FMOD_SOUND *sound, FMOD_OPENSTATE *openstate, unsigned int *percentbuffered, FMOD_BOOL *starving, FMOD_BOOL *diskbusy)
     * }
     */
    public static MethodHandle FMOD_Sound_GetOpenState$handle() {
        return FMOD_Sound_GetOpenState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetOpenState(FMOD_SOUND *sound, FMOD_OPENSTATE *openstate, unsigned int *percentbuffered, FMOD_BOOL *starving, FMOD_BOOL *diskbusy)
     * }
     */
    public static MemorySegment FMOD_Sound_GetOpenState$address() {
        return FMOD_Sound_GetOpenState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetOpenState(FMOD_SOUND *sound, FMOD_OPENSTATE *openstate, unsigned int *percentbuffered, FMOD_BOOL *starving, FMOD_BOOL *diskbusy)
     * }
     */
    public static int FMOD_Sound_GetOpenState(MemorySegment sound, MemorySegment openstate, MemorySegment percentbuffered, MemorySegment starving, MemorySegment diskbusy) {
        var mh$ = FMOD_Sound_GetOpenState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetOpenState", sound, openstate, percentbuffered, starving, diskbusy);
            }
            return (int)mh$.invokeExact(sound, openstate, percentbuffered, starving, diskbusy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_ReadData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_ReadData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_ReadData(FMOD_SOUND *sound, void *buffer, unsigned int length, unsigned int *read)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_ReadData$descriptor() {
        return FMOD_Sound_ReadData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_ReadData(FMOD_SOUND *sound, void *buffer, unsigned int length, unsigned int *read)
     * }
     */
    public static MethodHandle FMOD_Sound_ReadData$handle() {
        return FMOD_Sound_ReadData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_ReadData(FMOD_SOUND *sound, void *buffer, unsigned int length, unsigned int *read)
     * }
     */
    public static MemorySegment FMOD_Sound_ReadData$address() {
        return FMOD_Sound_ReadData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_ReadData(FMOD_SOUND *sound, void *buffer, unsigned int length, unsigned int *read)
     * }
     */
    public static int FMOD_Sound_ReadData(MemorySegment sound, MemorySegment buffer, int length, MemorySegment read) {
        var mh$ = FMOD_Sound_ReadData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_ReadData", sound, buffer, length, read);
            }
            return (int)mh$.invokeExact(sound, buffer, length, read);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SeekData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SeekData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SeekData(FMOD_SOUND *sound, unsigned int pcm)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SeekData$descriptor() {
        return FMOD_Sound_SeekData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SeekData(FMOD_SOUND *sound, unsigned int pcm)
     * }
     */
    public static MethodHandle FMOD_Sound_SeekData$handle() {
        return FMOD_Sound_SeekData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SeekData(FMOD_SOUND *sound, unsigned int pcm)
     * }
     */
    public static MemorySegment FMOD_Sound_SeekData$address() {
        return FMOD_Sound_SeekData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SeekData(FMOD_SOUND *sound, unsigned int pcm)
     * }
     */
    public static int FMOD_Sound_SeekData(MemorySegment sound, int pcm) {
        var mh$ = FMOD_Sound_SeekData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SeekData", sound, pcm);
            }
            return (int)mh$.invokeExact(sound, pcm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetSoundGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetSoundGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetSoundGroup$descriptor() {
        return FMOD_Sound_SetSoundGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static MethodHandle FMOD_Sound_SetSoundGroup$handle() {
        return FMOD_Sound_SetSoundGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static MemorySegment FMOD_Sound_SetSoundGroup$address() {
        return FMOD_Sound_SetSoundGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP *soundgroup)
     * }
     */
    public static int FMOD_Sound_SetSoundGroup(MemorySegment sound, MemorySegment soundgroup) {
        var mh$ = FMOD_Sound_SetSoundGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetSoundGroup", sound, soundgroup);
            }
            return (int)mh$.invokeExact(sound, soundgroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetSoundGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetSoundGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetSoundGroup$descriptor() {
        return FMOD_Sound_GetSoundGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static MethodHandle FMOD_Sound_GetSoundGroup$handle() {
        return FMOD_Sound_GetSoundGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static MemorySegment FMOD_Sound_GetSoundGroup$address() {
        return FMOD_Sound_GetSoundGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSoundGroup(FMOD_SOUND *sound, FMOD_SOUNDGROUP **soundgroup)
     * }
     */
    public static int FMOD_Sound_GetSoundGroup(MemorySegment sound, MemorySegment soundgroup) {
        var mh$ = FMOD_Sound_GetSoundGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetSoundGroup", sound, soundgroup);
            }
            return (int)mh$.invokeExact(sound, soundgroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetNumSyncPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetNumSyncPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSyncPoints(FMOD_SOUND *sound, int *numsyncpoints)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetNumSyncPoints$descriptor() {
        return FMOD_Sound_GetNumSyncPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSyncPoints(FMOD_SOUND *sound, int *numsyncpoints)
     * }
     */
    public static MethodHandle FMOD_Sound_GetNumSyncPoints$handle() {
        return FMOD_Sound_GetNumSyncPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSyncPoints(FMOD_SOUND *sound, int *numsyncpoints)
     * }
     */
    public static MemorySegment FMOD_Sound_GetNumSyncPoints$address() {
        return FMOD_Sound_GetNumSyncPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetNumSyncPoints(FMOD_SOUND *sound, int *numsyncpoints)
     * }
     */
    public static int FMOD_Sound_GetNumSyncPoints(MemorySegment sound, MemorySegment numsyncpoints) {
        var mh$ = FMOD_Sound_GetNumSyncPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetNumSyncPoints", sound, numsyncpoints);
            }
            return (int)mh$.invokeExact(sound, numsyncpoints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetSyncPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetSyncPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPoint(FMOD_SOUND *sound, int index, FMOD_SYNCPOINT **point)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetSyncPoint$descriptor() {
        return FMOD_Sound_GetSyncPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPoint(FMOD_SOUND *sound, int index, FMOD_SYNCPOINT **point)
     * }
     */
    public static MethodHandle FMOD_Sound_GetSyncPoint$handle() {
        return FMOD_Sound_GetSyncPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPoint(FMOD_SOUND *sound, int index, FMOD_SYNCPOINT **point)
     * }
     */
    public static MemorySegment FMOD_Sound_GetSyncPoint$address() {
        return FMOD_Sound_GetSyncPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPoint(FMOD_SOUND *sound, int index, FMOD_SYNCPOINT **point)
     * }
     */
    public static int FMOD_Sound_GetSyncPoint(MemorySegment sound, int index, MemorySegment point) {
        var mh$ = FMOD_Sound_GetSyncPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetSyncPoint", sound, index, point);
            }
            return (int)mh$.invokeExact(sound, index, point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetSyncPointInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetSyncPointInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPointInfo(FMOD_SOUND *sound, FMOD_SYNCPOINT *point, char *name, int namelen, unsigned int *offset, FMOD_TIMEUNIT offsettype)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetSyncPointInfo$descriptor() {
        return FMOD_Sound_GetSyncPointInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPointInfo(FMOD_SOUND *sound, FMOD_SYNCPOINT *point, char *name, int namelen, unsigned int *offset, FMOD_TIMEUNIT offsettype)
     * }
     */
    public static MethodHandle FMOD_Sound_GetSyncPointInfo$handle() {
        return FMOD_Sound_GetSyncPointInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPointInfo(FMOD_SOUND *sound, FMOD_SYNCPOINT *point, char *name, int namelen, unsigned int *offset, FMOD_TIMEUNIT offsettype)
     * }
     */
    public static MemorySegment FMOD_Sound_GetSyncPointInfo$address() {
        return FMOD_Sound_GetSyncPointInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetSyncPointInfo(FMOD_SOUND *sound, FMOD_SYNCPOINT *point, char *name, int namelen, unsigned int *offset, FMOD_TIMEUNIT offsettype)
     * }
     */
    public static int FMOD_Sound_GetSyncPointInfo(MemorySegment sound, MemorySegment point, MemorySegment name, int namelen, MemorySegment offset, int offsettype) {
        var mh$ = FMOD_Sound_GetSyncPointInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetSyncPointInfo", sound, point, name, namelen, offset, offsettype);
            }
            return (int)mh$.invokeExact(sound, point, name, namelen, offset, offsettype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_AddSyncPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_AddSyncPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_AddSyncPoint(FMOD_SOUND *sound, unsigned int offset, FMOD_TIMEUNIT offsettype, const char *name, FMOD_SYNCPOINT **point)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_AddSyncPoint$descriptor() {
        return FMOD_Sound_AddSyncPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_AddSyncPoint(FMOD_SOUND *sound, unsigned int offset, FMOD_TIMEUNIT offsettype, const char *name, FMOD_SYNCPOINT **point)
     * }
     */
    public static MethodHandle FMOD_Sound_AddSyncPoint$handle() {
        return FMOD_Sound_AddSyncPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_AddSyncPoint(FMOD_SOUND *sound, unsigned int offset, FMOD_TIMEUNIT offsettype, const char *name, FMOD_SYNCPOINT **point)
     * }
     */
    public static MemorySegment FMOD_Sound_AddSyncPoint$address() {
        return FMOD_Sound_AddSyncPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_AddSyncPoint(FMOD_SOUND *sound, unsigned int offset, FMOD_TIMEUNIT offsettype, const char *name, FMOD_SYNCPOINT **point)
     * }
     */
    public static int FMOD_Sound_AddSyncPoint(MemorySegment sound, int offset, int offsettype, MemorySegment name, MemorySegment point) {
        var mh$ = FMOD_Sound_AddSyncPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_AddSyncPoint", sound, offset, offsettype, name, point);
            }
            return (int)mh$.invokeExact(sound, offset, offsettype, name, point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_DeleteSyncPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_DeleteSyncPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_DeleteSyncPoint(FMOD_SOUND *sound, FMOD_SYNCPOINT *point)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_DeleteSyncPoint$descriptor() {
        return FMOD_Sound_DeleteSyncPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_DeleteSyncPoint(FMOD_SOUND *sound, FMOD_SYNCPOINT *point)
     * }
     */
    public static MethodHandle FMOD_Sound_DeleteSyncPoint$handle() {
        return FMOD_Sound_DeleteSyncPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_DeleteSyncPoint(FMOD_SOUND *sound, FMOD_SYNCPOINT *point)
     * }
     */
    public static MemorySegment FMOD_Sound_DeleteSyncPoint$address() {
        return FMOD_Sound_DeleteSyncPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_DeleteSyncPoint(FMOD_SOUND *sound, FMOD_SYNCPOINT *point)
     * }
     */
    public static int FMOD_Sound_DeleteSyncPoint(MemorySegment sound, MemorySegment point) {
        var mh$ = FMOD_Sound_DeleteSyncPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_DeleteSyncPoint", sound, point);
            }
            return (int)mh$.invokeExact(sound, point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMode(FMOD_SOUND *sound, FMOD_MODE mode)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetMode$descriptor() {
        return FMOD_Sound_SetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMode(FMOD_SOUND *sound, FMOD_MODE mode)
     * }
     */
    public static MethodHandle FMOD_Sound_SetMode$handle() {
        return FMOD_Sound_SetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMode(FMOD_SOUND *sound, FMOD_MODE mode)
     * }
     */
    public static MemorySegment FMOD_Sound_SetMode$address() {
        return FMOD_Sound_SetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMode(FMOD_SOUND *sound, FMOD_MODE mode)
     * }
     */
    public static int FMOD_Sound_SetMode(MemorySegment sound, int mode) {
        var mh$ = FMOD_Sound_SetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetMode", sound, mode);
            }
            return (int)mh$.invokeExact(sound, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMode(FMOD_SOUND *sound, FMOD_MODE *mode)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetMode$descriptor() {
        return FMOD_Sound_GetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMode(FMOD_SOUND *sound, FMOD_MODE *mode)
     * }
     */
    public static MethodHandle FMOD_Sound_GetMode$handle() {
        return FMOD_Sound_GetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMode(FMOD_SOUND *sound, FMOD_MODE *mode)
     * }
     */
    public static MemorySegment FMOD_Sound_GetMode$address() {
        return FMOD_Sound_GetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMode(FMOD_SOUND *sound, FMOD_MODE *mode)
     * }
     */
    public static int FMOD_Sound_GetMode(MemorySegment sound, MemorySegment mode) {
        var mh$ = FMOD_Sound_GetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetMode", sound, mode);
            }
            return (int)mh$.invokeExact(sound, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetLoopCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetLoopCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopCount(FMOD_SOUND *sound, int loopcount)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetLoopCount$descriptor() {
        return FMOD_Sound_SetLoopCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopCount(FMOD_SOUND *sound, int loopcount)
     * }
     */
    public static MethodHandle FMOD_Sound_SetLoopCount$handle() {
        return FMOD_Sound_SetLoopCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopCount(FMOD_SOUND *sound, int loopcount)
     * }
     */
    public static MemorySegment FMOD_Sound_SetLoopCount$address() {
        return FMOD_Sound_SetLoopCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopCount(FMOD_SOUND *sound, int loopcount)
     * }
     */
    public static int FMOD_Sound_SetLoopCount(MemorySegment sound, int loopcount) {
        var mh$ = FMOD_Sound_SetLoopCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetLoopCount", sound, loopcount);
            }
            return (int)mh$.invokeExact(sound, loopcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetLoopCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetLoopCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopCount(FMOD_SOUND *sound, int *loopcount)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetLoopCount$descriptor() {
        return FMOD_Sound_GetLoopCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopCount(FMOD_SOUND *sound, int *loopcount)
     * }
     */
    public static MethodHandle FMOD_Sound_GetLoopCount$handle() {
        return FMOD_Sound_GetLoopCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopCount(FMOD_SOUND *sound, int *loopcount)
     * }
     */
    public static MemorySegment FMOD_Sound_GetLoopCount$address() {
        return FMOD_Sound_GetLoopCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopCount(FMOD_SOUND *sound, int *loopcount)
     * }
     */
    public static int FMOD_Sound_GetLoopCount(MemorySegment sound, MemorySegment loopcount) {
        var mh$ = FMOD_Sound_GetLoopCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetLoopCount", sound, loopcount);
            }
            return (int)mh$.invokeExact(sound, loopcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetLoopPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetLoopPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopPoints(FMOD_SOUND *sound, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetLoopPoints$descriptor() {
        return FMOD_Sound_SetLoopPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopPoints(FMOD_SOUND *sound, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MethodHandle FMOD_Sound_SetLoopPoints$handle() {
        return FMOD_Sound_SetLoopPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopPoints(FMOD_SOUND *sound, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MemorySegment FMOD_Sound_SetLoopPoints$address() {
        return FMOD_Sound_SetLoopPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetLoopPoints(FMOD_SOUND *sound, unsigned int loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static int FMOD_Sound_SetLoopPoints(MemorySegment sound, int loopstart, int loopstarttype, int loopend, int loopendtype) {
        var mh$ = FMOD_Sound_SetLoopPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetLoopPoints", sound, loopstart, loopstarttype, loopend, loopendtype);
            }
            return (int)mh$.invokeExact(sound, loopstart, loopstarttype, loopend, loopendtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetLoopPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetLoopPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopPoints(FMOD_SOUND *sound, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetLoopPoints$descriptor() {
        return FMOD_Sound_GetLoopPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopPoints(FMOD_SOUND *sound, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MethodHandle FMOD_Sound_GetLoopPoints$handle() {
        return FMOD_Sound_GetLoopPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopPoints(FMOD_SOUND *sound, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static MemorySegment FMOD_Sound_GetLoopPoints$address() {
        return FMOD_Sound_GetLoopPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetLoopPoints(FMOD_SOUND *sound, unsigned int *loopstart, FMOD_TIMEUNIT loopstarttype, unsigned int *loopend, FMOD_TIMEUNIT loopendtype)
     * }
     */
    public static int FMOD_Sound_GetLoopPoints(MemorySegment sound, MemorySegment loopstart, int loopstarttype, MemorySegment loopend, int loopendtype) {
        var mh$ = FMOD_Sound_GetLoopPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetLoopPoints", sound, loopstart, loopstarttype, loopend, loopendtype);
            }
            return (int)mh$.invokeExact(sound, loopstart, loopstarttype, loopend, loopendtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetMusicNumChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetMusicNumChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetMusicNumChannels$descriptor() {
        return FMOD_Sound_GetMusicNumChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static MethodHandle FMOD_Sound_GetMusicNumChannels$handle() {
        return FMOD_Sound_GetMusicNumChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static MemorySegment FMOD_Sound_GetMusicNumChannels$address() {
        return FMOD_Sound_GetMusicNumChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicNumChannels(FMOD_SOUND *sound, int *numchannels)
     * }
     */
    public static int FMOD_Sound_GetMusicNumChannels(MemorySegment sound, MemorySegment numchannels) {
        var mh$ = FMOD_Sound_GetMusicNumChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetMusicNumChannels", sound, numchannels);
            }
            return (int)mh$.invokeExact(sound, numchannels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetMusicChannelVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetMusicChannelVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetMusicChannelVolume$descriptor() {
        return FMOD_Sound_SetMusicChannelVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static MethodHandle FMOD_Sound_SetMusicChannelVolume$handle() {
        return FMOD_Sound_SetMusicChannelVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static MemorySegment FMOD_Sound_SetMusicChannelVolume$address() {
        return FMOD_Sound_SetMusicChannelVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicChannelVolume(FMOD_SOUND *sound, int channel, float volume)
     * }
     */
    public static int FMOD_Sound_SetMusicChannelVolume(MemorySegment sound, int channel, float volume) {
        var mh$ = FMOD_Sound_SetMusicChannelVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetMusicChannelVolume", sound, channel, volume);
            }
            return (int)mh$.invokeExact(sound, channel, volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetMusicChannelVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetMusicChannelVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetMusicChannelVolume$descriptor() {
        return FMOD_Sound_GetMusicChannelVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static MethodHandle FMOD_Sound_GetMusicChannelVolume$handle() {
        return FMOD_Sound_GetMusicChannelVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static MemorySegment FMOD_Sound_GetMusicChannelVolume$address() {
        return FMOD_Sound_GetMusicChannelVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicChannelVolume(FMOD_SOUND *sound, int channel, float *volume)
     * }
     */
    public static int FMOD_Sound_GetMusicChannelVolume(MemorySegment sound, int channel, MemorySegment volume) {
        var mh$ = FMOD_Sound_GetMusicChannelVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetMusicChannelVolume", sound, channel, volume);
            }
            return (int)mh$.invokeExact(sound, channel, volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetMusicSpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetMusicSpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetMusicSpeed$descriptor() {
        return FMOD_Sound_SetMusicSpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static MethodHandle FMOD_Sound_SetMusicSpeed$handle() {
        return FMOD_Sound_SetMusicSpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static MemorySegment FMOD_Sound_SetMusicSpeed$address() {
        return FMOD_Sound_SetMusicSpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetMusicSpeed(FMOD_SOUND *sound, float speed)
     * }
     */
    public static int FMOD_Sound_SetMusicSpeed(MemorySegment sound, float speed) {
        var mh$ = FMOD_Sound_SetMusicSpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetMusicSpeed", sound, speed);
            }
            return (int)mh$.invokeExact(sound, speed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetMusicSpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetMusicSpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetMusicSpeed$descriptor() {
        return FMOD_Sound_GetMusicSpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static MethodHandle FMOD_Sound_GetMusicSpeed$handle() {
        return FMOD_Sound_GetMusicSpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static MemorySegment FMOD_Sound_GetMusicSpeed$address() {
        return FMOD_Sound_GetMusicSpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetMusicSpeed(FMOD_SOUND *sound, float *speed)
     * }
     */
    public static int FMOD_Sound_GetMusicSpeed(MemorySegment sound, MemorySegment speed) {
        var mh$ = FMOD_Sound_GetMusicSpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetMusicSpeed", sound, speed);
            }
            return (int)mh$.invokeExact(sound, speed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_SetUserData$descriptor() {
        return FMOD_Sound_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static MethodHandle FMOD_Sound_SetUserData$handle() {
        return FMOD_Sound_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static MemorySegment FMOD_Sound_SetUserData$address() {
        return FMOD_Sound_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_SetUserData(FMOD_SOUND *sound, void *userdata)
     * }
     */
    public static int FMOD_Sound_SetUserData(MemorySegment sound, MemorySegment userdata) {
        var mh$ = FMOD_Sound_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_SetUserData", sound, userdata);
            }
            return (int)mh$.invokeExact(sound, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Sound_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Sound_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static FunctionDescriptor FMOD_Sound_GetUserData$descriptor() {
        return FMOD_Sound_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static MethodHandle FMOD_Sound_GetUserData$handle() {
        return FMOD_Sound_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static MemorySegment FMOD_Sound_GetUserData$address() {
        return FMOD_Sound_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Sound_GetUserData(FMOD_SOUND *sound, void **userdata)
     * }
     */
    public static int FMOD_Sound_GetUserData(MemorySegment sound, MemorySegment userdata) {
        var mh$ = FMOD_Sound_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Sound_GetUserData", sound, userdata);
            }
            return (int)mh$.invokeExact(sound, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetSystemObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetSystemObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetSystemObject$descriptor() {
        return FMOD_Channel_GetSystemObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static MethodHandle FMOD_Channel_GetSystemObject$handle() {
        return FMOD_Channel_GetSystemObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static MemorySegment FMOD_Channel_GetSystemObject$address() {
        return FMOD_Channel_GetSystemObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetSystemObject(FMOD_CHANNEL *channel, FMOD_SYSTEM **system)
     * }
     */
    public static int FMOD_Channel_GetSystemObject(MemorySegment channel, MemorySegment system) {
        var mh$ = FMOD_Channel_GetSystemObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetSystemObject", channel, system);
            }
            return (int)mh$.invokeExact(channel, system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_Stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_Stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_Stop$descriptor() {
        return FMOD_Channel_Stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static MethodHandle FMOD_Channel_Stop$handle() {
        return FMOD_Channel_Stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static MemorySegment FMOD_Channel_Stop$address() {
        return FMOD_Channel_Stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_Stop(FMOD_CHANNEL *channel)
     * }
     */
    public static int FMOD_Channel_Stop(MemorySegment channel) {
        var mh$ = FMOD_Channel_Stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_Stop", channel);
            }
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPaused$descriptor() {
        return FMOD_Channel_SetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPaused$handle() {
        return FMOD_Channel_SetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPaused$address() {
        return FMOD_Channel_SetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPaused(FMOD_CHANNEL *channel, FMOD_BOOL paused)
     * }
     */
    public static int FMOD_Channel_SetPaused(MemorySegment channel, int paused) {
        var mh$ = FMOD_Channel_SetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPaused", channel, paused);
            }
            return (int)mh$.invokeExact(channel, paused);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetPaused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetPaused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetPaused$descriptor() {
        return FMOD_Channel_GetPaused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static MethodHandle FMOD_Channel_GetPaused$handle() {
        return FMOD_Channel_GetPaused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static MemorySegment FMOD_Channel_GetPaused$address() {
        return FMOD_Channel_GetPaused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPaused(FMOD_CHANNEL *channel, FMOD_BOOL *paused)
     * }
     */
    public static int FMOD_Channel_GetPaused(MemorySegment channel, MemorySegment paused) {
        var mh$ = FMOD_Channel_GetPaused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetPaused", channel, paused);
            }
            return (int)mh$.invokeExact(channel, paused);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetVolume$descriptor() {
        return FMOD_Channel_SetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static MethodHandle FMOD_Channel_SetVolume$handle() {
        return FMOD_Channel_SetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static MemorySegment FMOD_Channel_SetVolume$address() {
        return FMOD_Channel_SetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolume(FMOD_CHANNEL *channel, float volume)
     * }
     */
    public static int FMOD_Channel_SetVolume(MemorySegment channel, float volume) {
        var mh$ = FMOD_Channel_SetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetVolume", channel, volume);
            }
            return (int)mh$.invokeExact(channel, volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetVolume$descriptor() {
        return FMOD_Channel_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static MethodHandle FMOD_Channel_GetVolume$handle() {
        return FMOD_Channel_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static MemorySegment FMOD_Channel_GetVolume$address() {
        return FMOD_Channel_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolume(FMOD_CHANNEL *channel, float *volume)
     * }
     */
    public static int FMOD_Channel_GetVolume(MemorySegment channel, MemorySegment volume) {
        var mh$ = FMOD_Channel_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetVolume", channel, volume);
            }
            return (int)mh$.invokeExact(channel, volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetVolumeRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetVolumeRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetVolumeRamp$descriptor() {
        return FMOD_Channel_SetVolumeRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static MethodHandle FMOD_Channel_SetVolumeRamp$handle() {
        return FMOD_Channel_SetVolumeRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static MemorySegment FMOD_Channel_SetVolumeRamp$address() {
        return FMOD_Channel_SetVolumeRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL ramp)
     * }
     */
    public static int FMOD_Channel_SetVolumeRamp(MemorySegment channel, int ramp) {
        var mh$ = FMOD_Channel_SetVolumeRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetVolumeRamp", channel, ramp);
            }
            return (int)mh$.invokeExact(channel, ramp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetVolumeRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetVolumeRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetVolumeRamp$descriptor() {
        return FMOD_Channel_GetVolumeRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static MethodHandle FMOD_Channel_GetVolumeRamp$handle() {
        return FMOD_Channel_GetVolumeRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static MemorySegment FMOD_Channel_GetVolumeRamp$address() {
        return FMOD_Channel_GetVolumeRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetVolumeRamp(FMOD_CHANNEL *channel, FMOD_BOOL *ramp)
     * }
     */
    public static int FMOD_Channel_GetVolumeRamp(MemorySegment channel, MemorySegment ramp) {
        var mh$ = FMOD_Channel_GetVolumeRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetVolumeRamp", channel, ramp);
            }
            return (int)mh$.invokeExact(channel, ramp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetAudibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetAudibility");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetAudibility$descriptor() {
        return FMOD_Channel_GetAudibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static MethodHandle FMOD_Channel_GetAudibility$handle() {
        return FMOD_Channel_GetAudibility.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static MemorySegment FMOD_Channel_GetAudibility$address() {
        return FMOD_Channel_GetAudibility.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetAudibility(FMOD_CHANNEL *channel, float *audibility)
     * }
     */
    public static int FMOD_Channel_GetAudibility(MemorySegment channel, MemorySegment audibility) {
        var mh$ = FMOD_Channel_GetAudibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetAudibility", channel, audibility);
            }
            return (int)mh$.invokeExact(channel, audibility);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPitch$descriptor() {
        return FMOD_Channel_SetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPitch$handle() {
        return FMOD_Channel_SetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPitch$address() {
        return FMOD_Channel_SetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPitch(FMOD_CHANNEL *channel, float pitch)
     * }
     */
    public static int FMOD_Channel_SetPitch(MemorySegment channel, float pitch) {
        var mh$ = FMOD_Channel_SetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPitch", channel, pitch);
            }
            return (int)mh$.invokeExact(channel, pitch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetPitch$descriptor() {
        return FMOD_Channel_GetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static MethodHandle FMOD_Channel_GetPitch$handle() {
        return FMOD_Channel_GetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static MemorySegment FMOD_Channel_GetPitch$address() {
        return FMOD_Channel_GetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetPitch(FMOD_CHANNEL *channel, float *pitch)
     * }
     */
    public static int FMOD_Channel_GetPitch(MemorySegment channel, MemorySegment pitch) {
        var mh$ = FMOD_Channel_GetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetPitch", channel, pitch);
            }
            return (int)mh$.invokeExact(channel, pitch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMute$descriptor() {
        return FMOD_Channel_SetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMute$handle() {
        return FMOD_Channel_SetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMute$address() {
        return FMOD_Channel_SetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMute(FMOD_CHANNEL *channel, FMOD_BOOL mute)
     * }
     */
    public static int FMOD_Channel_SetMute(MemorySegment channel, int mute) {
        var mh$ = FMOD_Channel_SetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMute", channel, mute);
            }
            return (int)mh$.invokeExact(channel, mute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetMute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetMute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetMute$descriptor() {
        return FMOD_Channel_GetMute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static MethodHandle FMOD_Channel_GetMute$handle() {
        return FMOD_Channel_GetMute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static MemorySegment FMOD_Channel_GetMute$address() {
        return FMOD_Channel_GetMute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMute(FMOD_CHANNEL *channel, FMOD_BOOL *mute)
     * }
     */
    public static int FMOD_Channel_GetMute(MemorySegment channel, MemorySegment mute) {
        var mh$ = FMOD_Channel_GetMute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetMute", channel, mute);
            }
            return (int)mh$.invokeExact(channel, mute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetReverbProperties$descriptor() {
        return FMOD_Channel_SetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static MethodHandle FMOD_Channel_SetReverbProperties$handle() {
        return FMOD_Channel_SetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static MemorySegment FMOD_Channel_SetReverbProperties$address() {
        return FMOD_Channel_SetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetReverbProperties(FMOD_CHANNEL *channel, int instance, float wet)
     * }
     */
    public static int FMOD_Channel_SetReverbProperties(MemorySegment channel, int instance, float wet) {
        var mh$ = FMOD_Channel_SetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetReverbProperties", channel, instance, wet);
            }
            return (int)mh$.invokeExact(channel, instance, wet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetReverbProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetReverbProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetReverbProperties$descriptor() {
        return FMOD_Channel_GetReverbProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static MethodHandle FMOD_Channel_GetReverbProperties$handle() {
        return FMOD_Channel_GetReverbProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static MemorySegment FMOD_Channel_GetReverbProperties$address() {
        return FMOD_Channel_GetReverbProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetReverbProperties(FMOD_CHANNEL *channel, int instance, float *wet)
     * }
     */
    public static int FMOD_Channel_GetReverbProperties(MemorySegment channel, int instance, MemorySegment wet) {
        var mh$ = FMOD_Channel_GetReverbProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetReverbProperties", channel, instance, wet);
            }
            return (int)mh$.invokeExact(channel, instance, wet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetLowPassGain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetLowPassGain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetLowPassGain$descriptor() {
        return FMOD_Channel_SetLowPassGain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static MethodHandle FMOD_Channel_SetLowPassGain$handle() {
        return FMOD_Channel_SetLowPassGain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static MemorySegment FMOD_Channel_SetLowPassGain$address() {
        return FMOD_Channel_SetLowPassGain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetLowPassGain(FMOD_CHANNEL *channel, float gain)
     * }
     */
    public static int FMOD_Channel_SetLowPassGain(MemorySegment channel, float gain) {
        var mh$ = FMOD_Channel_SetLowPassGain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetLowPassGain", channel, gain);
            }
            return (int)mh$.invokeExact(channel, gain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetLowPassGain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetLowPassGain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetLowPassGain$descriptor() {
        return FMOD_Channel_GetLowPassGain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static MethodHandle FMOD_Channel_GetLowPassGain$handle() {
        return FMOD_Channel_GetLowPassGain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static MemorySegment FMOD_Channel_GetLowPassGain$address() {
        return FMOD_Channel_GetLowPassGain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetLowPassGain(FMOD_CHANNEL *channel, float *gain)
     * }
     */
    public static int FMOD_Channel_GetLowPassGain(MemorySegment channel, MemorySegment gain) {
        var mh$ = FMOD_Channel_GetLowPassGain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetLowPassGain", channel, gain);
            }
            return (int)mh$.invokeExact(channel, gain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMode$descriptor() {
        return FMOD_Channel_SetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMode$handle() {
        return FMOD_Channel_SetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMode$address() {
        return FMOD_Channel_SetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMode(FMOD_CHANNEL *channel, FMOD_MODE mode)
     * }
     */
    public static int FMOD_Channel_SetMode(MemorySegment channel, int mode) {
        var mh$ = FMOD_Channel_SetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMode", channel, mode);
            }
            return (int)mh$.invokeExact(channel, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetMode$descriptor() {
        return FMOD_Channel_GetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static MethodHandle FMOD_Channel_GetMode$handle() {
        return FMOD_Channel_GetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static MemorySegment FMOD_Channel_GetMode$address() {
        return FMOD_Channel_GetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMode(FMOD_CHANNEL *channel, FMOD_MODE *mode)
     * }
     */
    public static int FMOD_Channel_GetMode(MemorySegment channel, MemorySegment mode) {
        var mh$ = FMOD_Channel_GetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetMode", channel, mode);
            }
            return (int)mh$.invokeExact(channel, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetCallback$descriptor() {
        return FMOD_Channel_SetCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static MethodHandle FMOD_Channel_SetCallback$handle() {
        return FMOD_Channel_SetCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static MemorySegment FMOD_Channel_SetCallback$address() {
        return FMOD_Channel_SetCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetCallback(FMOD_CHANNEL *channel, FMOD_CHANNELCONTROL_CALLBACK callback)
     * }
     */
    public static int FMOD_Channel_SetCallback(MemorySegment channel, MemorySegment callback) {
        var mh$ = FMOD_Channel_SetCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetCallback", channel, callback);
            }
            return (int)mh$.invokeExact(channel, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_IsPlaying {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_IsPlaying");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_IsPlaying$descriptor() {
        return FMOD_Channel_IsPlaying.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static MethodHandle FMOD_Channel_IsPlaying$handle() {
        return FMOD_Channel_IsPlaying.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static MemorySegment FMOD_Channel_IsPlaying$address() {
        return FMOD_Channel_IsPlaying.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_IsPlaying(FMOD_CHANNEL *channel, FMOD_BOOL *isplaying)
     * }
     */
    public static int FMOD_Channel_IsPlaying(MemorySegment channel, MemorySegment isplaying) {
        var mh$ = FMOD_Channel_IsPlaying.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_IsPlaying", channel, isplaying);
            }
            return (int)mh$.invokeExact(channel, isplaying);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetPan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetPan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetPan$descriptor() {
        return FMOD_Channel_SetPan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static MethodHandle FMOD_Channel_SetPan$handle() {
        return FMOD_Channel_SetPan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static MemorySegment FMOD_Channel_SetPan$address() {
        return FMOD_Channel_SetPan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetPan(FMOD_CHANNEL *channel, float pan)
     * }
     */
    public static int FMOD_Channel_SetPan(MemorySegment channel, float pan) {
        var mh$ = FMOD_Channel_SetPan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetPan", channel, pan);
            }
            return (int)mh$.invokeExact(channel, pan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMixLevelsOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetMixLevelsOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMixLevelsOutput$descriptor() {
        return FMOD_Channel_SetMixLevelsOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMixLevelsOutput$handle() {
        return FMOD_Channel_SetMixLevelsOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMixLevelsOutput$address() {
        return FMOD_Channel_SetMixLevelsOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsOutput(FMOD_CHANNEL *channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
     * }
     */
    public static int FMOD_Channel_SetMixLevelsOutput(MemorySegment channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright) {
        var mh$ = FMOD_Channel_SetMixLevelsOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMixLevelsOutput", channel, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
            }
            return (int)mh$.invokeExact(channel, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMixLevelsInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetMixLevelsInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMixLevelsInput$descriptor() {
        return FMOD_Channel_SetMixLevelsInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMixLevelsInput$handle() {
        return FMOD_Channel_SetMixLevelsInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMixLevelsInput$address() {
        return FMOD_Channel_SetMixLevelsInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixLevelsInput(FMOD_CHANNEL *channel, float *levels, int numlevels)
     * }
     */
    public static int FMOD_Channel_SetMixLevelsInput(MemorySegment channel, MemorySegment levels, int numlevels) {
        var mh$ = FMOD_Channel_SetMixLevelsInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMixLevelsInput", channel, levels, numlevels);
            }
            return (int)mh$.invokeExact(channel, levels, numlevels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_INT,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetMixMatrix$descriptor() {
        return FMOD_Channel_SetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_Channel_SetMixMatrix$handle() {
        return FMOD_Channel_SetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_Channel_SetMixMatrix$address() {
        return FMOD_Channel_SetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int outchannels, int inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_Channel_SetMixMatrix(MemorySegment channel, MemorySegment matrix, int outchannels, int inchannels, int inchannel_hop) {
        var mh$ = FMOD_Channel_SetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetMixMatrix", channel, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(channel, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetMixMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetMixMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetMixMatrix$descriptor() {
        return FMOD_Channel_GetMixMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MethodHandle FMOD_Channel_GetMixMatrix$handle() {
        return FMOD_Channel_GetMixMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static MemorySegment FMOD_Channel_GetMixMatrix$address() {
        return FMOD_Channel_GetMixMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetMixMatrix(FMOD_CHANNEL *channel, float *matrix, int *outchannels, int *inchannels, int inchannel_hop)
     * }
     */
    public static int FMOD_Channel_GetMixMatrix(MemorySegment channel, MemorySegment matrix, MemorySegment outchannels, MemorySegment inchannels, int inchannel_hop) {
        var mh$ = FMOD_Channel_GetMixMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetMixMatrix", channel, matrix, outchannels, inchannels, inchannel_hop);
            }
            return (int)mh$.invokeExact(channel, matrix, outchannels, inchannels, inchannel_hop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetDSPClock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetDSPClock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetDSPClock$descriptor() {
        return FMOD_Channel_GetDSPClock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static MethodHandle FMOD_Channel_GetDSPClock$handle() {
        return FMOD_Channel_GetDSPClock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static MemorySegment FMOD_Channel_GetDSPClock$address() {
        return FMOD_Channel_GetDSPClock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSPClock(FMOD_CHANNEL *channel, unsigned long long *dspclock, unsigned long long *parentclock)
     * }
     */
    public static int FMOD_Channel_GetDSPClock(MemorySegment channel, MemorySegment dspclock, MemorySegment parentclock) {
        var mh$ = FMOD_Channel_GetDSPClock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetDSPClock", channel, dspclock, parentclock);
            }
            return (int)mh$.invokeExact(channel, dspclock, parentclock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_LONG_LONG,
            FmodCore.C_LONG_LONG,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetDelay$descriptor() {
        return FMOD_Channel_SetDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static MethodHandle FMOD_Channel_SetDelay$handle() {
        return FMOD_Channel_SetDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static MemorySegment FMOD_Channel_SetDelay$address() {
        return FMOD_Channel_SetDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDelay(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end, FMOD_BOOL stopchannels)
     * }
     */
    public static int FMOD_Channel_SetDelay(MemorySegment channel, long dspclock_start, long dspclock_end, int stopchannels) {
        var mh$ = FMOD_Channel_SetDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetDelay", channel, dspclock_start, dspclock_end, stopchannels);
            }
            return (int)mh$.invokeExact(channel, dspclock_start, dspclock_end, stopchannels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetDelay$descriptor() {
        return FMOD_Channel_GetDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static MethodHandle FMOD_Channel_GetDelay$handle() {
        return FMOD_Channel_GetDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static MemorySegment FMOD_Channel_GetDelay$address() {
        return FMOD_Channel_GetDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDelay(FMOD_CHANNEL *channel, unsigned long long *dspclock_start, unsigned long long *dspclock_end, FMOD_BOOL *stopchannels)
     * }
     */
    public static int FMOD_Channel_GetDelay(MemorySegment channel, MemorySegment dspclock_start, MemorySegment dspclock_end, MemorySegment stopchannels) {
        var mh$ = FMOD_Channel_GetDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetDelay", channel, dspclock_start, dspclock_end, stopchannels);
            }
            return (int)mh$.invokeExact(channel, dspclock_start, dspclock_end, stopchannels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_AddFadePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_LONG_LONG,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_AddFadePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_AddFadePoint$descriptor() {
        return FMOD_Channel_AddFadePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MethodHandle FMOD_Channel_AddFadePoint$handle() {
        return FMOD_Channel_AddFadePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MemorySegment FMOD_Channel_AddFadePoint$address() {
        return FMOD_Channel_AddFadePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddFadePoint(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static int FMOD_Channel_AddFadePoint(MemorySegment channel, long dspclock, float volume) {
        var mh$ = FMOD_Channel_AddFadePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_AddFadePoint", channel, dspclock, volume);
            }
            return (int)mh$.invokeExact(channel, dspclock, volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetFadePointRamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_LONG_LONG,
            FmodCore.C_FLOAT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetFadePointRamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetFadePointRamp$descriptor() {
        return FMOD_Channel_SetFadePointRamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MethodHandle FMOD_Channel_SetFadePointRamp$handle() {
        return FMOD_Channel_SetFadePointRamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static MemorySegment FMOD_Channel_SetFadePointRamp$address() {
        return FMOD_Channel_SetFadePointRamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetFadePointRamp(FMOD_CHANNEL *channel, unsigned long long dspclock, float volume)
     * }
     */
    public static int FMOD_Channel_SetFadePointRamp(MemorySegment channel, long dspclock, float volume) {
        var mh$ = FMOD_Channel_SetFadePointRamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetFadePointRamp", channel, dspclock, volume);
            }
            return (int)mh$.invokeExact(channel, dspclock, volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_RemoveFadePoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_LONG_LONG,
            FmodCore.C_LONG_LONG
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_RemoveFadePoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_RemoveFadePoints$descriptor() {
        return FMOD_Channel_RemoveFadePoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static MethodHandle FMOD_Channel_RemoveFadePoints$handle() {
        return FMOD_Channel_RemoveFadePoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static MemorySegment FMOD_Channel_RemoveFadePoints$address() {
        return FMOD_Channel_RemoveFadePoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveFadePoints(FMOD_CHANNEL *channel, unsigned long long dspclock_start, unsigned long long dspclock_end)
     * }
     */
    public static int FMOD_Channel_RemoveFadePoints(MemorySegment channel, long dspclock_start, long dspclock_end) {
        var mh$ = FMOD_Channel_RemoveFadePoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_RemoveFadePoints", channel, dspclock_start, dspclock_end);
            }
            return (int)mh$.invokeExact(channel, dspclock_start, dspclock_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetFadePoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetFadePoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetFadePoints$descriptor() {
        return FMOD_Channel_GetFadePoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static MethodHandle FMOD_Channel_GetFadePoints$handle() {
        return FMOD_Channel_GetFadePoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static MemorySegment FMOD_Channel_GetFadePoints$address() {
        return FMOD_Channel_GetFadePoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetFadePoints(FMOD_CHANNEL *channel, unsigned int *numpoints, unsigned long long *point_dspclock, float *point_volume)
     * }
     */
    public static int FMOD_Channel_GetFadePoints(MemorySegment channel, MemorySegment numpoints, MemorySegment point_dspclock, MemorySegment point_volume) {
        var mh$ = FMOD_Channel_GetFadePoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetFadePoints", channel, numpoints, point_dspclock, point_volume);
            }
            return (int)mh$.invokeExact(channel, numpoints, point_dspclock, point_volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetDSP$descriptor() {
        return FMOD_Channel_GetDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static MethodHandle FMOD_Channel_GetDSP$handle() {
        return FMOD_Channel_GetDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static MemorySegment FMOD_Channel_GetDSP$address() {
        return FMOD_Channel_GetDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP **dsp)
     * }
     */
    public static int FMOD_Channel_GetDSP(MemorySegment channel, int index, MemorySegment dsp) {
        var mh$ = FMOD_Channel_GetDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetDSP", channel, index, dsp);
            }
            return (int)mh$.invokeExact(channel, index, dsp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_AddDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_INT,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_AddDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_AddDSP$descriptor() {
        return FMOD_Channel_AddDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_Channel_AddDSP$handle() {
        return FMOD_Channel_AddDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_Channel_AddDSP$address() {
        return FMOD_Channel_AddDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_AddDSP(FMOD_CHANNEL *channel, int index, FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_Channel_AddDSP(MemorySegment channel, int index, MemorySegment dsp) {
        var mh$ = FMOD_Channel_AddDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_AddDSP", channel, index, dsp);
            }
            return (int)mh$.invokeExact(channel, index, dsp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_RemoveDSP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_RemoveDSP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_RemoveDSP$descriptor() {
        return FMOD_Channel_RemoveDSP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static MethodHandle FMOD_Channel_RemoveDSP$handle() {
        return FMOD_Channel_RemoveDSP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static MemorySegment FMOD_Channel_RemoveDSP$address() {
        return FMOD_Channel_RemoveDSP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_RemoveDSP(FMOD_CHANNEL *channel, FMOD_DSP *dsp)
     * }
     */
    public static int FMOD_Channel_RemoveDSP(MemorySegment channel, MemorySegment dsp) {
        var mh$ = FMOD_Channel_RemoveDSP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_RemoveDSP", channel, dsp);
            }
            return (int)mh$.invokeExact(channel, dsp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_GetNumDSPs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_GetNumDSPs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_GetNumDSPs$descriptor() {
        return FMOD_Channel_GetNumDSPs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static MethodHandle FMOD_Channel_GetNumDSPs$handle() {
        return FMOD_Channel_GetNumDSPs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static MemorySegment FMOD_Channel_GetNumDSPs$address() {
        return FMOD_Channel_GetNumDSPs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_GetNumDSPs(FMOD_CHANNEL *channel, int *numdsps)
     * }
     */
    public static int FMOD_Channel_GetNumDSPs(MemorySegment channel, MemorySegment numdsps) {
        var mh$ = FMOD_Channel_GetNumDSPs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_GetNumDSPs", channel, numdsps);
            }
            return (int)mh$.invokeExact(channel, numdsps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FMOD_Channel_SetDSPIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            FmodCore.C_INT,
            FmodCore.C_POINTER,
            FmodCore.C_POINTER,
            FmodCore.C_INT
        );

        public static final MemorySegment ADDR = FmodCore.findOrThrow("FMOD_Channel_SetDSPIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static FunctionDescriptor FMOD_Channel_SetDSPIndex$descriptor() {
        return FMOD_Channel_SetDSPIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static MethodHandle FMOD_Channel_SetDSPIndex$handle() {
        return FMOD_Channel_SetDSPIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static MemorySegment FMOD_Channel_SetDSPIndex$address() {
        return FMOD_Channel_SetDSPIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FMOD_RESULT FMOD_Channel_SetDSPIndex(FMOD_CHANNEL *channel, FMOD_DSP *dsp, int index)
     * }
     */
    public static int FMOD_Channel_SetDSPIndex(MemorySegment channel, MemorySegment dsp, int index) {
        var mh$ = FMOD_Channel_SetDSPIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FMOD_Channel_SetDSPIndex", channel, dsp, index);
            }
            return (int)mh$.invokeExact(channel, dsp, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

