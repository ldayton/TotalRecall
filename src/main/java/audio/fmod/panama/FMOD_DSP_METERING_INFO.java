// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_DSP_METERING_INFO {
 *     int numsamples;
 *     float peaklevel[32];
 *     float rmslevel[32];
 *     short numchannels;
 * }
 * }
 */
public class FMOD_DSP_METERING_INFO {

    FMOD_DSP_METERING_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FmodCore.C_INT.withName("numsamples"),
        MemoryLayout.sequenceLayout(32, FmodCore.C_FLOAT).withName("peaklevel"),
        MemoryLayout.sequenceLayout(32, FmodCore.C_FLOAT).withName("rmslevel"),
        FmodCore.C_SHORT.withName("numchannels"),
        MemoryLayout.paddingLayout(2)
    ).withName("FMOD_DSP_METERING_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt numsamples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numsamples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int numsamples
     * }
     */
    public static final OfInt numsamples$layout() {
        return numsamples$LAYOUT;
    }

    private static final long numsamples$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int numsamples
     * }
     */
    public static final long numsamples$offset() {
        return numsamples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int numsamples
     * }
     */
    public static int numsamples(MemorySegment struct) {
        return struct.get(numsamples$LAYOUT, numsamples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int numsamples
     * }
     */
    public static void numsamples(MemorySegment struct, int fieldValue) {
        struct.set(numsamples$LAYOUT, numsamples$OFFSET, fieldValue);
    }

    private static final SequenceLayout peaklevel$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("peaklevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float peaklevel[32]
     * }
     */
    public static final SequenceLayout peaklevel$layout() {
        return peaklevel$LAYOUT;
    }

    private static final long peaklevel$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float peaklevel[32]
     * }
     */
    public static final long peaklevel$offset() {
        return peaklevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float peaklevel[32]
     * }
     */
    public static MemorySegment peaklevel(MemorySegment struct) {
        return struct.asSlice(peaklevel$OFFSET, peaklevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float peaklevel[32]
     * }
     */
    public static void peaklevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, peaklevel$OFFSET, peaklevel$LAYOUT.byteSize());
    }

    private static long[] peaklevel$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float peaklevel[32]
     * }
     */
    public static long[] peaklevel$dimensions() {
        return peaklevel$DIMS;
    }
    private static final VarHandle peaklevel$ELEM_HANDLE = peaklevel$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float peaklevel[32]
     * }
     */
    public static float peaklevel(MemorySegment struct, long index0) {
        return (float)peaklevel$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float peaklevel[32]
     * }
     */
    public static void peaklevel(MemorySegment struct, long index0, float fieldValue) {
        peaklevel$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout rmslevel$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("rmslevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float rmslevel[32]
     * }
     */
    public static final SequenceLayout rmslevel$layout() {
        return rmslevel$LAYOUT;
    }

    private static final long rmslevel$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float rmslevel[32]
     * }
     */
    public static final long rmslevel$offset() {
        return rmslevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float rmslevel[32]
     * }
     */
    public static MemorySegment rmslevel(MemorySegment struct) {
        return struct.asSlice(rmslevel$OFFSET, rmslevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float rmslevel[32]
     * }
     */
    public static void rmslevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rmslevel$OFFSET, rmslevel$LAYOUT.byteSize());
    }

    private static long[] rmslevel$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float rmslevel[32]
     * }
     */
    public static long[] rmslevel$dimensions() {
        return rmslevel$DIMS;
    }
    private static final VarHandle rmslevel$ELEM_HANDLE = rmslevel$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float rmslevel[32]
     * }
     */
    public static float rmslevel(MemorySegment struct, long index0) {
        return (float)rmslevel$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float rmslevel[32]
     * }
     */
    public static void rmslevel(MemorySegment struct, long index0, float fieldValue) {
        rmslevel$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort numchannels$LAYOUT = (OfShort)$LAYOUT.select(groupElement("numchannels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short numchannels
     * }
     */
    public static final OfShort numchannels$layout() {
        return numchannels$LAYOUT;
    }

    private static final long numchannels$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short numchannels
     * }
     */
    public static final long numchannels$offset() {
        return numchannels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short numchannels
     * }
     */
    public static short numchannels(MemorySegment struct) {
        return struct.get(numchannels$LAYOUT, numchannels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short numchannels
     * }
     */
    public static void numchannels(MemorySegment struct, short fieldValue) {
        struct.set(numchannels$LAYOUT, numchannels$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

