// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_3D_ATTRIBUTES {
 *     FMOD_VECTOR position;
 *     FMOD_VECTOR velocity;
 *     FMOD_VECTOR forward;
 *     FMOD_VECTOR up;
 * }
 * }
 */
public class FMOD_3D_ATTRIBUTES {

    FMOD_3D_ATTRIBUTES() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FMOD_VECTOR.layout().withName("position"),
        FMOD_VECTOR.layout().withName("velocity"),
        FMOD_VECTOR.layout().withName("forward"),
        FMOD_VECTOR.layout().withName("up")
    ).withName("FMOD_3D_ATTRIBUTES");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout position$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static final GroupLayout position$layout() {
        return position$LAYOUT;
    }

    private static final long position$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static final long position$offset() {
        return position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static MemorySegment position(MemorySegment struct) {
        return struct.asSlice(position$OFFSET, position$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR position
     * }
     */
    public static void position(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, position$OFFSET, position$LAYOUT.byteSize());
    }

    private static final GroupLayout velocity$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("velocity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_VECTOR velocity
     * }
     */
    public static final GroupLayout velocity$layout() {
        return velocity$LAYOUT;
    }

    private static final long velocity$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_VECTOR velocity
     * }
     */
    public static final long velocity$offset() {
        return velocity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR velocity
     * }
     */
    public static MemorySegment velocity(MemorySegment struct) {
        return struct.asSlice(velocity$OFFSET, velocity$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR velocity
     * }
     */
    public static void velocity(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, velocity$OFFSET, velocity$LAYOUT.byteSize());
    }

    private static final GroupLayout forward$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("forward"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_VECTOR forward
     * }
     */
    public static final GroupLayout forward$layout() {
        return forward$LAYOUT;
    }

    private static final long forward$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_VECTOR forward
     * }
     */
    public static final long forward$offset() {
        return forward$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR forward
     * }
     */
    public static MemorySegment forward(MemorySegment struct) {
        return struct.asSlice(forward$OFFSET, forward$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR forward
     * }
     */
    public static void forward(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, forward$OFFSET, forward$LAYOUT.byteSize());
    }

    private static final GroupLayout up$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("up"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_VECTOR up
     * }
     */
    public static final GroupLayout up$layout() {
        return up$LAYOUT;
    }

    private static final long up$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_VECTOR up
     * }
     */
    public static final long up$offset() {
        return up$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR up
     * }
     */
    public static MemorySegment up(MemorySegment struct) {
        return struct.asSlice(up$OFFSET, up$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_VECTOR up
     * }
     */
    public static void up(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, up$OFFSET, up$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

