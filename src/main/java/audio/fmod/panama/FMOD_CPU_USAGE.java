// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_CPU_USAGE {
 *     float dsp;
 *     float stream;
 *     float geometry;
 *     float update;
 *     float convolution1;
 *     float convolution2;
 * }
 * }
 */
public class FMOD_CPU_USAGE {

    FMOD_CPU_USAGE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FmodCore.C_FLOAT.withName("dsp"),
        FmodCore.C_FLOAT.withName("stream"),
        FmodCore.C_FLOAT.withName("geometry"),
        FmodCore.C_FLOAT.withName("update"),
        FmodCore.C_FLOAT.withName("convolution1"),
        FmodCore.C_FLOAT.withName("convolution2")
    ).withName("FMOD_CPU_USAGE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat dsp$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("dsp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float dsp
     * }
     */
    public static final OfFloat dsp$layout() {
        return dsp$LAYOUT;
    }

    private static final long dsp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float dsp
     * }
     */
    public static final long dsp$offset() {
        return dsp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float dsp
     * }
     */
    public static float dsp(MemorySegment struct) {
        return struct.get(dsp$LAYOUT, dsp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float dsp
     * }
     */
    public static void dsp(MemorySegment struct, float fieldValue) {
        struct.set(dsp$LAYOUT, dsp$OFFSET, fieldValue);
    }

    private static final OfFloat stream$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("stream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float stream
     * }
     */
    public static final OfFloat stream$layout() {
        return stream$LAYOUT;
    }

    private static final long stream$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float stream
     * }
     */
    public static final long stream$offset() {
        return stream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float stream
     * }
     */
    public static float stream(MemorySegment struct) {
        return struct.get(stream$LAYOUT, stream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float stream
     * }
     */
    public static void stream(MemorySegment struct, float fieldValue) {
        struct.set(stream$LAYOUT, stream$OFFSET, fieldValue);
    }

    private static final OfFloat geometry$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("geometry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float geometry
     * }
     */
    public static final OfFloat geometry$layout() {
        return geometry$LAYOUT;
    }

    private static final long geometry$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float geometry
     * }
     */
    public static final long geometry$offset() {
        return geometry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float geometry
     * }
     */
    public static float geometry(MemorySegment struct) {
        return struct.get(geometry$LAYOUT, geometry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float geometry
     * }
     */
    public static void geometry(MemorySegment struct, float fieldValue) {
        struct.set(geometry$LAYOUT, geometry$OFFSET, fieldValue);
    }

    private static final OfFloat update$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("update"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float update
     * }
     */
    public static final OfFloat update$layout() {
        return update$LAYOUT;
    }

    private static final long update$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float update
     * }
     */
    public static final long update$offset() {
        return update$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float update
     * }
     */
    public static float update(MemorySegment struct) {
        return struct.get(update$LAYOUT, update$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float update
     * }
     */
    public static void update(MemorySegment struct, float fieldValue) {
        struct.set(update$LAYOUT, update$OFFSET, fieldValue);
    }

    private static final OfFloat convolution1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("convolution1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float convolution1
     * }
     */
    public static final OfFloat convolution1$layout() {
        return convolution1$LAYOUT;
    }

    private static final long convolution1$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float convolution1
     * }
     */
    public static final long convolution1$offset() {
        return convolution1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float convolution1
     * }
     */
    public static float convolution1(MemorySegment struct) {
        return struct.get(convolution1$LAYOUT, convolution1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float convolution1
     * }
     */
    public static void convolution1(MemorySegment struct, float fieldValue) {
        struct.set(convolution1$LAYOUT, convolution1$OFFSET, fieldValue);
    }

    private static final OfFloat convolution2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("convolution2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float convolution2
     * }
     */
    public static final OfFloat convolution2$layout() {
        return convolution2$LAYOUT;
    }

    private static final long convolution2$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float convolution2
     * }
     */
    public static final long convolution2$offset() {
        return convolution2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float convolution2
     * }
     */
    public static float convolution2(MemorySegment struct) {
        return struct.get(convolution2$LAYOUT, convolution2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float convolution2
     * }
     */
    public static void convolution2(MemorySegment struct, float fieldValue) {
        struct.set(convolution2$LAYOUT, convolution2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

