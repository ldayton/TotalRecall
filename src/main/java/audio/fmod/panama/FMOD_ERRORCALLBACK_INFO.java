// Generated by jextract

package audio.fmod.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FMOD_ERRORCALLBACK_INFO {
 *     FMOD_RESULT result;
 *     FMOD_ERRORCALLBACK_INSTANCETYPE instancetype;
 *     void *instance;
 *     const char *functionname;
 *     const char *functionparams;
 * }
 * }
 */
public class FMOD_ERRORCALLBACK_INFO {

    FMOD_ERRORCALLBACK_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FmodCore.C_INT.withName("result"),
        FmodCore.C_INT.withName("instancetype"),
        FmodCore.C_POINTER.withName("instance"),
        FmodCore.C_POINTER.withName("functionname"),
        FmodCore.C_POINTER.withName("functionparams")
    ).withName("FMOD_ERRORCALLBACK_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt result$LAYOUT = (OfInt)$LAYOUT.select(groupElement("result"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_RESULT result
     * }
     */
    public static final OfInt result$layout() {
        return result$LAYOUT;
    }

    private static final long result$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_RESULT result
     * }
     */
    public static final long result$offset() {
        return result$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_RESULT result
     * }
     */
    public static int result(MemorySegment struct) {
        return struct.get(result$LAYOUT, result$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_RESULT result
     * }
     */
    public static void result(MemorySegment struct, int fieldValue) {
        struct.set(result$LAYOUT, result$OFFSET, fieldValue);
    }

    private static final OfInt instancetype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("instancetype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FMOD_ERRORCALLBACK_INSTANCETYPE instancetype
     * }
     */
    public static final OfInt instancetype$layout() {
        return instancetype$LAYOUT;
    }

    private static final long instancetype$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FMOD_ERRORCALLBACK_INSTANCETYPE instancetype
     * }
     */
    public static final long instancetype$offset() {
        return instancetype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FMOD_ERRORCALLBACK_INSTANCETYPE instancetype
     * }
     */
    public static int instancetype(MemorySegment struct) {
        return struct.get(instancetype$LAYOUT, instancetype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FMOD_ERRORCALLBACK_INSTANCETYPE instancetype
     * }
     */
    public static void instancetype(MemorySegment struct, int fieldValue) {
        struct.set(instancetype$LAYOUT, instancetype$OFFSET, fieldValue);
    }

    private static final AddressLayout instance$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("instance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *instance
     * }
     */
    public static final AddressLayout instance$layout() {
        return instance$LAYOUT;
    }

    private static final long instance$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *instance
     * }
     */
    public static final long instance$offset() {
        return instance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *instance
     * }
     */
    public static MemorySegment instance(MemorySegment struct) {
        return struct.get(instance$LAYOUT, instance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *instance
     * }
     */
    public static void instance(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(instance$LAYOUT, instance$OFFSET, fieldValue);
    }

    private static final AddressLayout functionname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("functionname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *functionname
     * }
     */
    public static final AddressLayout functionname$layout() {
        return functionname$LAYOUT;
    }

    private static final long functionname$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *functionname
     * }
     */
    public static final long functionname$offset() {
        return functionname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *functionname
     * }
     */
    public static MemorySegment functionname(MemorySegment struct) {
        return struct.get(functionname$LAYOUT, functionname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *functionname
     * }
     */
    public static void functionname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(functionname$LAYOUT, functionname$OFFSET, fieldValue);
    }

    private static final AddressLayout functionparams$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("functionparams"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *functionparams
     * }
     */
    public static final AddressLayout functionparams$layout() {
        return functionparams$LAYOUT;
    }

    private static final long functionparams$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *functionparams
     * }
     */
    public static final long functionparams$offset() {
        return functionparams$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *functionparams
     * }
     */
    public static MemorySegment functionparams(MemorySegment struct) {
        return struct.get(functionparams$LAYOUT, functionparams$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *functionparams
     * }
     */
    public static void functionparams(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(functionparams$LAYOUT, functionparams$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

